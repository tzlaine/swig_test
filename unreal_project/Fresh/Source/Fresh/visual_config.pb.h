// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual_config.proto

#ifndef PROTOBUF_visual_5fconfig_2eproto__INCLUDED
#define PROTOBUF_visual_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb_message {
namespace visual_config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_visual_5fconfig_2eproto();
void protobuf_AssignDesc_visual_5fconfig_2eproto();
void protobuf_ShutdownFile_visual_5fconfig_2eproto();

class color_t;
class hex_map_t;

// ===================================================================

class color_t : public ::google::protobuf::Message {
 public:
  color_t();
  virtual ~color_t();

  color_t(const color_t& from);

  inline color_t& operator=(const color_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const color_t& default_instance();

  void Swap(color_t* other);

  // implements Message ----------------------------------------------

  inline color_t* New() const { return New(NULL); }

  color_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const color_t& from);
  void MergeFrom(const color_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(color_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  ::google::protobuf::int32 r() const;
  void set_r(::google::protobuf::int32 value);

  // optional int32 g = 2;
  void clear_g();
  static const int kGFieldNumber = 2;
  ::google::protobuf::int32 g() const;
  void set_g(::google::protobuf::int32 value);

  // optional int32 b = 3;
  void clear_b();
  static const int kBFieldNumber = 3;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_message.visual_config.color_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_visual_5fconfig_2eproto();
  friend void protobuf_AssignDesc_visual_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_visual_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static color_t* default_instance_;
};
// -------------------------------------------------------------------

class hex_map_t : public ::google::protobuf::Message {
 public:
  hex_map_t();
  virtual ~hex_map_t();

  hex_map_t(const hex_map_t& from);

  inline hex_map_t& operator=(const hex_map_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hex_map_t& default_instance();

  void Swap(hex_map_t* other);

  // implements Message ----------------------------------------------

  inline hex_map_t* New() const { return New(NULL); }

  hex_map_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hex_map_t& from);
  void MergeFrom(const hex_map_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hex_map_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
  int primary_colors_size() const;
  void clear_primary_colors();
  static const int kPrimaryColorsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >&
      primary_colors() const;
  ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >*
      mutable_primary_colors();

  // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
  int secondary_colors_size() const;
  void clear_secondary_colors();
  static const int kSecondaryColorsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >&
      secondary_colors() const;
  ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >*
      mutable_secondary_colors();

  // optional float national_border_thickness = 3;
  void clear_national_border_thickness();
  static const int kNationalBorderThicknessFieldNumber = 3;
  float national_border_thickness() const;
  void set_national_border_thickness(float value);

  // optional float province_border_thickness = 4;
  void clear_province_border_thickness();
  static const int kProvinceBorderThicknessFieldNumber = 4;
  float province_border_thickness() const;
  void set_province_border_thickness(float value);

  // optional float planet_star_thickness = 5;
  void clear_planet_star_thickness();
  static const int kPlanetStarThicknessFieldNumber = 5;
  float planet_star_thickness() const;
  void set_planet_star_thickness(float value);

  // optional float minor_planet_scale = 6;
  void clear_minor_planet_scale();
  static const int kMinorPlanetScaleFieldNumber = 6;
  float minor_planet_scale() const;
  void set_minor_planet_scale(float value);

  // optional float major_planet_scale = 7;
  void clear_major_planet_scale();
  static const int kMajorPlanetScaleFieldNumber = 7;
  float major_planet_scale() const;
  void set_major_planet_scale(float value);

  // optional float star_scale = 8;
  void clear_star_scale();
  static const int kStarScaleFieldNumber = 8;
  float star_scale() const;
  void set_star_scale(float value);

  // optional float mb_scale = 9;
  void clear_mb_scale();
  static const int kMbScaleFieldNumber = 9;
  float mb_scale() const;
  void set_mb_scale(float value);

  // optional float bats_scale = 10;
  void clear_bats_scale();
  static const int kBatsScaleFieldNumber = 10;
  float bats_scale() const;
  void set_bats_scale(float value);

  // optional float sb_scale = 11;
  void clear_sb_scale();
  static const int kSbScaleFieldNumber = 11;
  float sb_scale() const;
  void set_sb_scale(float value);

  // optional float offmap_z = 12;
  void clear_offmap_z();
  static const int kOffmapZFieldNumber = 12;
  float offmap_z() const;
  void set_offmap_z(float value);

  // optional float offmap_border_thickness = 13;
  void clear_offmap_border_thickness();
  static const int kOffmapBorderThicknessFieldNumber = 13;
  float offmap_border_thickness() const;
  void set_offmap_border_thickness(float value);

  // optional float offmap_label_size = 14;
  void clear_offmap_label_size();
  static const int kOffmapLabelSizeFieldNumber = 14;
  float offmap_label_size() const;
  void set_offmap_label_size(float value);

  // optional float offmap_left_right_thickness = 15;
  void clear_offmap_left_right_thickness();
  static const int kOffmapLeftRightThicknessFieldNumber = 15;
  float offmap_left_right_thickness() const;
  void set_offmap_left_right_thickness(float value);

  // optional float offmap_top_bottom_thickness = 16;
  void clear_offmap_top_bottom_thickness();
  static const int kOffmapTopBottomThicknessFieldNumber = 16;
  float offmap_top_bottom_thickness() const;
  void set_offmap_top_bottom_thickness(float value);

  // @@protoc_insertion_point(class_scope:pb_message.visual_config.hex_map_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::pb_message::visual_config::color_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      hex_map_t_PrimaryColorsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::pb_message::visual_config::color_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > primary_colors_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::pb_message::visual_config::color_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      hex_map_t_SecondaryColorsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::pb_message::visual_config::color_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > secondary_colors_;
  float national_border_thickness_;
  float province_border_thickness_;
  float planet_star_thickness_;
  float minor_planet_scale_;
  float major_planet_scale_;
  float star_scale_;
  float mb_scale_;
  float bats_scale_;
  float sb_scale_;
  float offmap_z_;
  float offmap_border_thickness_;
  float offmap_label_size_;
  float offmap_left_right_thickness_;
  float offmap_top_bottom_thickness_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_visual_5fconfig_2eproto();
  friend void protobuf_AssignDesc_visual_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_visual_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static hex_map_t* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// color_t

// optional int32 r = 1;
inline void color_t::clear_r() {
  r_ = 0;
}
inline ::google::protobuf::int32 color_t::r() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.r)
  return r_;
}
inline void color_t::set_r(::google::protobuf::int32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.r)
}

// optional int32 g = 2;
inline void color_t::clear_g() {
  g_ = 0;
}
inline ::google::protobuf::int32 color_t::g() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.g)
  return g_;
}
inline void color_t::set_g(::google::protobuf::int32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.g)
}

// optional int32 b = 3;
inline void color_t::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 color_t::b() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.b)
  return b_;
}
inline void color_t::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.b)
}

// -------------------------------------------------------------------

// hex_map_t

// map<string, .pb_message.visual_config.color_t> primary_colors = 1;
inline int hex_map_t::primary_colors_size() const {
  return primary_colors_.size();
}
inline void hex_map_t::clear_primary_colors() {
  primary_colors_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >&
hex_map_t::primary_colors() const {
  // @@protoc_insertion_point(field_map:pb_message.visual_config.hex_map_t.primary_colors)
  return primary_colors_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >*
hex_map_t::mutable_primary_colors() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.visual_config.hex_map_t.primary_colors)
  return primary_colors_.MutableMap();
}

// map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
inline int hex_map_t::secondary_colors_size() const {
  return secondary_colors_.size();
}
inline void hex_map_t::clear_secondary_colors() {
  secondary_colors_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >&
hex_map_t::secondary_colors() const {
  // @@protoc_insertion_point(field_map:pb_message.visual_config.hex_map_t.secondary_colors)
  return secondary_colors_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >*
hex_map_t::mutable_secondary_colors() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.visual_config.hex_map_t.secondary_colors)
  return secondary_colors_.MutableMap();
}

// optional float national_border_thickness = 3;
inline void hex_map_t::clear_national_border_thickness() {
  national_border_thickness_ = 0;
}
inline float hex_map_t::national_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.national_border_thickness)
  return national_border_thickness_;
}
inline void hex_map_t::set_national_border_thickness(float value) {
  
  national_border_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.national_border_thickness)
}

// optional float province_border_thickness = 4;
inline void hex_map_t::clear_province_border_thickness() {
  province_border_thickness_ = 0;
}
inline float hex_map_t::province_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.province_border_thickness)
  return province_border_thickness_;
}
inline void hex_map_t::set_province_border_thickness(float value) {
  
  province_border_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.province_border_thickness)
}

// optional float planet_star_thickness = 5;
inline void hex_map_t::clear_planet_star_thickness() {
  planet_star_thickness_ = 0;
}
inline float hex_map_t::planet_star_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.planet_star_thickness)
  return planet_star_thickness_;
}
inline void hex_map_t::set_planet_star_thickness(float value) {
  
  planet_star_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.planet_star_thickness)
}

// optional float minor_planet_scale = 6;
inline void hex_map_t::clear_minor_planet_scale() {
  minor_planet_scale_ = 0;
}
inline float hex_map_t::minor_planet_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.minor_planet_scale)
  return minor_planet_scale_;
}
inline void hex_map_t::set_minor_planet_scale(float value) {
  
  minor_planet_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.minor_planet_scale)
}

// optional float major_planet_scale = 7;
inline void hex_map_t::clear_major_planet_scale() {
  major_planet_scale_ = 0;
}
inline float hex_map_t::major_planet_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.major_planet_scale)
  return major_planet_scale_;
}
inline void hex_map_t::set_major_planet_scale(float value) {
  
  major_planet_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.major_planet_scale)
}

// optional float star_scale = 8;
inline void hex_map_t::clear_star_scale() {
  star_scale_ = 0;
}
inline float hex_map_t::star_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.star_scale)
  return star_scale_;
}
inline void hex_map_t::set_star_scale(float value) {
  
  star_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.star_scale)
}

// optional float mb_scale = 9;
inline void hex_map_t::clear_mb_scale() {
  mb_scale_ = 0;
}
inline float hex_map_t::mb_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.mb_scale)
  return mb_scale_;
}
inline void hex_map_t::set_mb_scale(float value) {
  
  mb_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.mb_scale)
}

// optional float bats_scale = 10;
inline void hex_map_t::clear_bats_scale() {
  bats_scale_ = 0;
}
inline float hex_map_t::bats_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.bats_scale)
  return bats_scale_;
}
inline void hex_map_t::set_bats_scale(float value) {
  
  bats_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.bats_scale)
}

// optional float sb_scale = 11;
inline void hex_map_t::clear_sb_scale() {
  sb_scale_ = 0;
}
inline float hex_map_t::sb_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.sb_scale)
  return sb_scale_;
}
inline void hex_map_t::set_sb_scale(float value) {
  
  sb_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.sb_scale)
}

// optional float offmap_z = 12;
inline void hex_map_t::clear_offmap_z() {
  offmap_z_ = 0;
}
inline float hex_map_t::offmap_z() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_z)
  return offmap_z_;
}
inline void hex_map_t::set_offmap_z(float value) {
  
  offmap_z_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_z)
}

// optional float offmap_border_thickness = 13;
inline void hex_map_t::clear_offmap_border_thickness() {
  offmap_border_thickness_ = 0;
}
inline float hex_map_t::offmap_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_border_thickness)
  return offmap_border_thickness_;
}
inline void hex_map_t::set_offmap_border_thickness(float value) {
  
  offmap_border_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_border_thickness)
}

// optional float offmap_label_size = 14;
inline void hex_map_t::clear_offmap_label_size() {
  offmap_label_size_ = 0;
}
inline float hex_map_t::offmap_label_size() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_label_size)
  return offmap_label_size_;
}
inline void hex_map_t::set_offmap_label_size(float value) {
  
  offmap_label_size_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_label_size)
}

// optional float offmap_left_right_thickness = 15;
inline void hex_map_t::clear_offmap_left_right_thickness() {
  offmap_left_right_thickness_ = 0;
}
inline float hex_map_t::offmap_left_right_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_left_right_thickness)
  return offmap_left_right_thickness_;
}
inline void hex_map_t::set_offmap_left_right_thickness(float value) {
  
  offmap_left_right_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_left_right_thickness)
}

// optional float offmap_top_bottom_thickness = 16;
inline void hex_map_t::clear_offmap_top_bottom_thickness() {
  offmap_top_bottom_thickness_ = 0;
}
inline float hex_map_t::offmap_top_bottom_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_top_bottom_thickness)
  return offmap_top_bottom_thickness_;
}
inline void hex_map_t::set_offmap_top_bottom_thickness(float value) {
  
  offmap_top_bottom_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_top_bottom_thickness)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace visual_config
}  // namespace pb_message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_visual_5fconfig_2eproto__INCLUDED
