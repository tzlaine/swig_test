// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto

#ifndef PROTOBUF_game_5fdata_2eproto__INCLUDED
#define PROTOBUF_game_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_types.pb.h"
// @@protoc_insertion_point(includes)

namespace pb_message {
namespace game_data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_game_5fdata_2eproto();
void protobuf_AssignDesc_game_5fdata_2eproto();
void protobuf_ShutdownFile_game_5fdata_2eproto();

class fleet_t;
class fleets_t;
class hex_t;
class hex_zone_fixture_t;
class hex_zone_t;
class map_t;
class offmap_area_t;
class offmap_areas_t;
class planet_t;
class province_t;
class team_t;
class unit_t;

enum planet_t_type_t {
  planet_t_type_t_minor = 0,
  planet_t_type_t_major = 1,
  planet_t_type_t_capital = 2,
  planet_t_type_t_planet_t_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  planet_t_type_t_planet_t_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool planet_t_type_t_IsValid(int value);
const planet_t_type_t planet_t_type_t_type_t_MIN = planet_t_type_t_minor;
const planet_t_type_t planet_t_type_t_type_t_MAX = planet_t_type_t_capital;
const int planet_t_type_t_type_t_ARRAYSIZE = planet_t_type_t_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* planet_t_type_t_descriptor();
inline const ::std::string& planet_t_type_t_Name(planet_t_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    planet_t_type_t_descriptor(), value);
}
inline bool planet_t_type_t_Parse(
    const ::std::string& name, planet_t_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<planet_t_type_t>(
    planet_t_type_t_descriptor(), name, value);
}
enum hex_zone_fixture_t_type_t {
  hex_zone_fixture_t_type_t_type_base = 0,
  hex_zone_fixture_t_type_t_type_planet = 1,
  hex_zone_fixture_t_type_t_hex_zone_fixture_t_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  hex_zone_fixture_t_type_t_hex_zone_fixture_t_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool hex_zone_fixture_t_type_t_IsValid(int value);
const hex_zone_fixture_t_type_t hex_zone_fixture_t_type_t_type_t_MIN = hex_zone_fixture_t_type_t_type_base;
const hex_zone_fixture_t_type_t hex_zone_fixture_t_type_t_type_t_MAX = hex_zone_fixture_t_type_t_type_planet;
const int hex_zone_fixture_t_type_t_type_t_ARRAYSIZE = hex_zone_fixture_t_type_t_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* hex_zone_fixture_t_type_t_descriptor();
inline const ::std::string& hex_zone_fixture_t_type_t_Name(hex_zone_fixture_t_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    hex_zone_fixture_t_type_t_descriptor(), value);
}
inline bool hex_zone_fixture_t_type_t_Parse(
    const ::std::string& name, hex_zone_fixture_t_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hex_zone_fixture_t_type_t>(
    hex_zone_fixture_t_type_t_descriptor(), name, value);
}
// ===================================================================

class unit_t : public ::google::protobuf::Message {
 public:
  unit_t();
  virtual ~unit_t();

  unit_t(const unit_t& from);

  inline unit_t& operator=(const unit_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const unit_t& default_instance();

  void Swap(unit_t* other);

  // implements Message ----------------------------------------------

  inline unit_t* New() const { return New(NULL); }

  unit_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const unit_t& from);
  void MergeFrom(const unit_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(unit_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 unit_id = 1;
  void clear_unit_id();
  static const int kUnitIdFieldNumber = 1;
  ::google::protobuf::int32 unit_id() const;
  void set_unit_id(::google::protobuf::int32 value);

  // optional int32 owner = 2;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  ::google::protobuf::int32 owner() const;
  void set_owner(::google::protobuf::int32 value);

  // optional int32 original_owner = 3;
  void clear_original_owner();
  static const int kOriginalOwnerFieldNumber = 3;
  ::google::protobuf::int32 original_owner() const;
  void set_original_owner(::google::protobuf::int32 value);

  // optional int32 fighters = 4;
  void clear_fighters();
  static const int kFightersFieldNumber = 4;
  ::google::protobuf::int32 fighters() const;
  void set_fighters(::google::protobuf::int32 value);

  // optional int32 pfs = 5;
  void clear_pfs();
  static const int kPfsFieldNumber = 5;
  ::google::protobuf::int32 pfs() const;
  void set_pfs(::google::protobuf::int32 value);

  // optional .pb_message.tug_mission_t tug_mission = 6;
  void clear_tug_mission();
  static const int kTugMissionFieldNumber = 6;
  ::pb_message::tug_mission_t tug_mission() const;
  void set_tug_mission(::pb_message::tug_mission_t value);

  // @@protoc_insertion_point(class_scope:pb_message.game_data.unit_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 unit_id_;
  ::google::protobuf::int32 owner_;
  ::google::protobuf::int32 original_owner_;
  ::google::protobuf::int32 fighters_;
  ::google::protobuf::int32 pfs_;
  int tug_mission_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static unit_t* default_instance_;
};
// -------------------------------------------------------------------

class fleet_t : public ::google::protobuf::Message {
 public:
  fleet_t();
  virtual ~fleet_t();

  fleet_t(const fleet_t& from);

  inline fleet_t& operator=(const fleet_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fleet_t& default_instance();

  void Swap(fleet_t* other);

  // implements Message ----------------------------------------------

  inline fleet_t* New() const { return New(NULL); }

  fleet_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fleet_t& from);
  void MergeFrom(const fleet_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(fleet_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb_message.game_data.unit_t units = 1;
  int units_size() const;
  void clear_units();
  static const int kUnitsFieldNumber = 1;
  const ::pb_message::game_data::unit_t& units(int index) const;
  ::pb_message::game_data::unit_t* mutable_units(int index);
  ::pb_message::game_data::unit_t* add_units();
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::unit_t >*
      mutable_units();
  const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::unit_t >&
      units() const;

  // @@protoc_insertion_point(class_scope:pb_message.game_data.fleet_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::unit_t > units_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static fleet_t* default_instance_;
};
// -------------------------------------------------------------------

class fleets_t : public ::google::protobuf::Message {
 public:
  fleets_t();
  virtual ~fleets_t();

  fleets_t(const fleets_t& from);

  inline fleets_t& operator=(const fleets_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fleets_t& default_instance();

  void Swap(fleets_t* other);

  // implements Message ----------------------------------------------

  inline fleets_t* New() const { return New(NULL); }

  fleets_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fleets_t& from);
  void MergeFrom(const fleets_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(fleets_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
  int fleets_size() const;
  void clear_fleets();
  static const int kFleetsFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >&
      fleets() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >*
      mutable_fleets();

  // @@protoc_insertion_point(class_scope:pb_message.game_data.fleets_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, ::pb_message::game_data::fleet_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      fleets_t_FleetsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, ::pb_message::game_data::fleet_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fleets_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static fleets_t* default_instance_;
};
// -------------------------------------------------------------------

class planet_t : public ::google::protobuf::Message {
 public:
  planet_t();
  virtual ~planet_t();

  planet_t(const planet_t& from);

  inline planet_t& operator=(const planet_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const planet_t& default_instance();

  void Swap(planet_t* other);

  // implements Message ----------------------------------------------

  inline planet_t* New() const { return New(NULL); }

  planet_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const planet_t& from);
  void MergeFrom(const planet_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(planet_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef planet_t_type_t type_t;
  static const type_t minor = planet_t_type_t_minor;
  static const type_t major = planet_t_type_t_major;
  static const type_t capital = planet_t_type_t_capital;
  static inline bool type_t_IsValid(int value) {
    return planet_t_type_t_IsValid(value);
  }
  static const type_t type_t_MIN =
    planet_t_type_t_type_t_MIN;
  static const type_t type_t_MAX =
    planet_t_type_t_type_t_MAX;
  static const int type_t_ARRAYSIZE =
    planet_t_type_t_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_t_descriptor() {
    return planet_t_type_t_descriptor();
  }
  static inline const ::std::string& type_t_Name(type_t value) {
    return planet_t_type_t_Name(value);
  }
  static inline bool type_t_Parse(const ::std::string& name,
      type_t* value) {
    return planet_t_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 owner = 1;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  ::google::protobuf::int32 owner() const;
  void set_owner(::google::protobuf::int32 value);

  // optional int32 original_owner = 2;
  void clear_original_owner();
  static const int kOriginalOwnerFieldNumber = 2;
  ::google::protobuf::int32 original_owner() const;
  void set_original_owner(::google::protobuf::int32 value);

  // optional .pb_message.game_data.planet_t.type_t type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::pb_message::game_data::planet_t_type_t type() const;
  void set_type(::pb_message::game_data::planet_t_type_t value);

  // optional .pb_message.game_data.fleets_t units = 4;
  bool has_units() const;
  void clear_units();
  static const int kUnitsFieldNumber = 4;
  const ::pb_message::game_data::fleets_t& units() const;
  ::pb_message::game_data::fleets_t* mutable_units();
  ::pb_message::game_data::fleets_t* release_units();
  void set_allocated_units(::pb_message::game_data::fleets_t* units);

  // @@protoc_insertion_point(class_scope:pb_message.game_data.planet_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 owner_;
  ::google::protobuf::int32 original_owner_;
  ::pb_message::game_data::fleets_t* units_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static planet_t* default_instance_;
};
// -------------------------------------------------------------------

class hex_zone_fixture_t : public ::google::protobuf::Message {
 public:
  hex_zone_fixture_t();
  virtual ~hex_zone_fixture_t();

  hex_zone_fixture_t(const hex_zone_fixture_t& from);

  inline hex_zone_fixture_t& operator=(const hex_zone_fixture_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hex_zone_fixture_t& default_instance();

  void Swap(hex_zone_fixture_t* other);

  // implements Message ----------------------------------------------

  inline hex_zone_fixture_t* New() const { return New(NULL); }

  hex_zone_fixture_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hex_zone_fixture_t& from);
  void MergeFrom(const hex_zone_fixture_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hex_zone_fixture_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef hex_zone_fixture_t_type_t type_t;
  static const type_t type_base = hex_zone_fixture_t_type_t_type_base;
  static const type_t type_planet = hex_zone_fixture_t_type_t_type_planet;
  static inline bool type_t_IsValid(int value) {
    return hex_zone_fixture_t_type_t_IsValid(value);
  }
  static const type_t type_t_MIN =
    hex_zone_fixture_t_type_t_type_t_MIN;
  static const type_t type_t_MAX =
    hex_zone_fixture_t_type_t_type_t_MAX;
  static const int type_t_ARRAYSIZE =
    hex_zone_fixture_t_type_t_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_t_descriptor() {
    return hex_zone_fixture_t_type_t_descriptor();
  }
  static inline const ::std::string& type_t_Name(type_t value) {
    return hex_zone_fixture_t_type_t_Name(value);
  }
  static inline bool type_t_Parse(const ::std::string& name,
      type_t* value) {
    return hex_zone_fixture_t_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pb_message::game_data::hex_zone_fixture_t_type_t type() const;
  void set_type(::pb_message::game_data::hex_zone_fixture_t_type_t value);

  // optional .pb_message.game_data.unit_t base = 2;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 2;
  const ::pb_message::game_data::unit_t& base() const;
  ::pb_message::game_data::unit_t* mutable_base();
  ::pb_message::game_data::unit_t* release_base();
  void set_allocated_base(::pb_message::game_data::unit_t* base);

  // optional .pb_message.game_data.planet_t planet = 3;
  bool has_planet() const;
  void clear_planet();
  static const int kPlanetFieldNumber = 3;
  const ::pb_message::game_data::planet_t& planet() const;
  ::pb_message::game_data::planet_t* mutable_planet();
  ::pb_message::game_data::planet_t* release_planet();
  void set_allocated_planet(::pb_message::game_data::planet_t* planet);

  // @@protoc_insertion_point(class_scope:pb_message.game_data.hex_zone_fixture_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::pb_message::game_data::unit_t* base_;
  ::pb_message::game_data::planet_t* planet_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static hex_zone_fixture_t* default_instance_;
};
// -------------------------------------------------------------------

class hex_zone_t : public ::google::protobuf::Message {
 public:
  hex_zone_t();
  virtual ~hex_zone_t();

  hex_zone_t(const hex_zone_t& from);

  inline hex_zone_t& operator=(const hex_zone_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hex_zone_t& default_instance();

  void Swap(hex_zone_t* other);

  // implements Message ----------------------------------------------

  inline hex_zone_t* New() const { return New(NULL); }

  hex_zone_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hex_zone_t& from);
  void MergeFrom(const hex_zone_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hex_zone_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
  int fixtures_size() const;
  void clear_fixtures();
  static const int kFixturesFieldNumber = 2;
  const ::pb_message::game_data::hex_zone_fixture_t& fixtures(int index) const;
  ::pb_message::game_data::hex_zone_fixture_t* mutable_fixtures(int index);
  ::pb_message::game_data::hex_zone_fixture_t* add_fixtures();
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >*
      mutable_fixtures();
  const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >&
      fixtures() const;

  // @@protoc_insertion_point(class_scope:pb_message.game_data.hex_zone_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t > fixtures_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static hex_zone_t* default_instance_;
};
// -------------------------------------------------------------------

class hex_t : public ::google::protobuf::Message {
 public:
  hex_t();
  virtual ~hex_t();

  hex_t(const hex_t& from);

  inline hex_t& operator=(const hex_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hex_t& default_instance();

  void Swap(hex_t* other);

  // implements Message ----------------------------------------------

  inline hex_t* New() const { return New(NULL); }

  hex_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hex_t& from);
  void MergeFrom(const hex_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hex_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_message.hex_coord_t coord = 1;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 1;
  const ::pb_message::hex_coord_t& coord() const;
  ::pb_message::hex_coord_t* mutable_coord();
  ::pb_message::hex_coord_t* release_coord();
  void set_allocated_coord(::pb_message::hex_coord_t* coord);

  // optional int32 province_id = 2;
  void clear_province_id();
  static const int kProvinceIdFieldNumber = 2;
  ::google::protobuf::int32 province_id() const;
  void set_province_id(::google::protobuf::int32 value);

  // repeated .pb_message.game_data.hex_zone_t zones = 4;
  int zones_size() const;
  void clear_zones();
  static const int kZonesFieldNumber = 4;
  const ::pb_message::game_data::hex_zone_t& zones(int index) const;
  ::pb_message::game_data::hex_zone_t* mutable_zones(int index);
  ::pb_message::game_data::hex_zone_t* add_zones();
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >*
      mutable_zones();
  const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >&
      zones() const;

  // optional .pb_message.game_data.fleets_t fleets = 5;
  bool has_fleets() const;
  void clear_fleets();
  static const int kFleetsFieldNumber = 5;
  const ::pb_message::game_data::fleets_t& fleets() const;
  ::pb_message::game_data::fleets_t* mutable_fleets();
  ::pb_message::game_data::fleets_t* release_fleets();
  void set_allocated_fleets(::pb_message::game_data::fleets_t* fleets);

  // @@protoc_insertion_point(class_scope:pb_message.game_data.hex_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::pb_message::hex_coord_t* coord_;
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_t > zones_;
  ::pb_message::game_data::fleets_t* fleets_;
  ::google::protobuf::int32 province_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static hex_t* default_instance_;
};
// -------------------------------------------------------------------

class province_t : public ::google::protobuf::Message {
 public:
  province_t();
  virtual ~province_t();

  province_t(const province_t& from);

  inline province_t& operator=(const province_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const province_t& default_instance();

  void Swap(province_t* other);

  // implements Message ----------------------------------------------

  inline province_t* New() const { return New(NULL); }

  province_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const province_t& from);
  void MergeFrom(const province_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(province_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 owner = 2;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  ::google::protobuf::int32 owner() const;
  void set_owner(::google::protobuf::int32 value);

  // optional int32 original_owner = 3;
  void clear_original_owner();
  static const int kOriginalOwnerFieldNumber = 3;
  ::google::protobuf::int32 original_owner() const;
  void set_original_owner(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_message.game_data.province_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 owner_;
  ::google::protobuf::int32 original_owner_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static province_t* default_instance_;
};
// -------------------------------------------------------------------

class map_t : public ::google::protobuf::Message {
 public:
  map_t();
  virtual ~map_t();

  map_t(const map_t& from);

  inline map_t& operator=(const map_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const map_t& default_instance();

  void Swap(map_t* other);

  // implements Message ----------------------------------------------

  inline map_t* New() const { return New(NULL); }

  map_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const map_t& from);
  void MergeFrom(const map_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(map_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // repeated .pb_message.game_data.hex_t hexes = 3;
  int hexes_size() const;
  void clear_hexes();
  static const int kHexesFieldNumber = 3;
  const ::pb_message::game_data::hex_t& hexes(int index) const;
  ::pb_message::game_data::hex_t* mutable_hexes(int index);
  ::pb_message::game_data::hex_t* add_hexes();
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_t >*
      mutable_hexes();
  const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_t >&
      hexes() const;

  // repeated .pb_message.game_data.province_t provinces = 4;
  int provinces_size() const;
  void clear_provinces();
  static const int kProvincesFieldNumber = 4;
  const ::pb_message::game_data::province_t& provinces(int index) const;
  ::pb_message::game_data::province_t* mutable_provinces(int index);
  ::pb_message::game_data::province_t* add_provinces();
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::province_t >*
      mutable_provinces();
  const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::province_t >&
      provinces() const;

  // @@protoc_insertion_point(class_scope:pb_message.game_data.map_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_t > hexes_;
  ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::province_t > provinces_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static map_t* default_instance_;
};
// -------------------------------------------------------------------

class offmap_area_t : public ::google::protobuf::Message {
 public:
  offmap_area_t();
  virtual ~offmap_area_t();

  offmap_area_t(const offmap_area_t& from);

  inline offmap_area_t& operator=(const offmap_area_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offmap_area_t& default_instance();

  void Swap(offmap_area_t* other);

  // implements Message ----------------------------------------------

  inline offmap_area_t* New() const { return New(NULL); }

  offmap_area_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offmap_area_t& from);
  void MergeFrom(const offmap_area_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(offmap_area_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 owner = 1;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  ::google::protobuf::int32 owner() const;
  void set_owner(::google::protobuf::int32 value);

  // optional .pb_message.game_data.fleets_t fleets = 2;
  bool has_fleets() const;
  void clear_fleets();
  static const int kFleetsFieldNumber = 2;
  const ::pb_message::game_data::fleets_t& fleets() const;
  ::pb_message::game_data::fleets_t* mutable_fleets();
  ::pb_message::game_data::fleets_t* release_fleets();
  void set_allocated_fleets(::pb_message::game_data::fleets_t* fleets);

  // @@protoc_insertion_point(class_scope:pb_message.game_data.offmap_area_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::pb_message::game_data::fleets_t* fleets_;
  ::google::protobuf::int32 owner_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static offmap_area_t* default_instance_;
};
// -------------------------------------------------------------------

class offmap_areas_t : public ::google::protobuf::Message {
 public:
  offmap_areas_t();
  virtual ~offmap_areas_t();

  offmap_areas_t(const offmap_areas_t& from);

  inline offmap_areas_t& operator=(const offmap_areas_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offmap_areas_t& default_instance();

  void Swap(offmap_areas_t* other);

  // implements Message ----------------------------------------------

  inline offmap_areas_t* New() const { return New(NULL); }

  offmap_areas_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offmap_areas_t& from);
  void MergeFrom(const offmap_areas_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(offmap_areas_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
  int areas_size() const;
  void clear_areas();
  static const int kAreasFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >&
      areas() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >*
      mutable_areas();

  // @@protoc_insertion_point(class_scope:pb_message.game_data.offmap_areas_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      offmap_areas_t_AreasEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > areas_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static offmap_areas_t* default_instance_;
};
// -------------------------------------------------------------------

class team_t : public ::google::protobuf::Message {
 public:
  team_t();
  virtual ~team_t();

  team_t(const team_t& from);

  inline team_t& operator=(const team_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_t& default_instance();

  void Swap(team_t* other);

  // implements Message ----------------------------------------------

  inline team_t* New() const { return New(NULL); }

  team_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_t& from);
  void MergeFrom(const team_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(team_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated int32 nations = 2;
  int nations_size() const;
  void clear_nations();
  static const int kNationsFieldNumber = 2;
  ::google::protobuf::int32 nations(int index) const;
  void set_nations(int index, ::google::protobuf::int32 value);
  void add_nations(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nations() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nations();

  // @@protoc_insertion_point(class_scope:pb_message.game_data.team_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nations_;
  mutable int _nations_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_game_5fdata_2eproto();
  friend void protobuf_AssignDesc_game_5fdata_2eproto();
  friend void protobuf_ShutdownFile_game_5fdata_2eproto();

  void InitAsDefaultInstance();
  static team_t* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// unit_t

// optional int32 unit_id = 1;
inline void unit_t::clear_unit_id() {
  unit_id_ = 0;
}
inline ::google::protobuf::int32 unit_t::unit_id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.unit_id)
  return unit_id_;
}
inline void unit_t::set_unit_id(::google::protobuf::int32 value) {
  
  unit_id_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.unit_id)
}

// optional int32 owner = 2;
inline void unit_t::clear_owner() {
  owner_ = 0;
}
inline ::google::protobuf::int32 unit_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.owner)
  return owner_;
}
inline void unit_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.owner)
}

// optional int32 original_owner = 3;
inline void unit_t::clear_original_owner() {
  original_owner_ = 0;
}
inline ::google::protobuf::int32 unit_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.original_owner)
  return original_owner_;
}
inline void unit_t::set_original_owner(::google::protobuf::int32 value) {
  
  original_owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.original_owner)
}

// optional int32 fighters = 4;
inline void unit_t::clear_fighters() {
  fighters_ = 0;
}
inline ::google::protobuf::int32 unit_t::fighters() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.fighters)
  return fighters_;
}
inline void unit_t::set_fighters(::google::protobuf::int32 value) {
  
  fighters_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.fighters)
}

// optional int32 pfs = 5;
inline void unit_t::clear_pfs() {
  pfs_ = 0;
}
inline ::google::protobuf::int32 unit_t::pfs() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.pfs)
  return pfs_;
}
inline void unit_t::set_pfs(::google::protobuf::int32 value) {
  
  pfs_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.pfs)
}

// optional .pb_message.tug_mission_t tug_mission = 6;
inline void unit_t::clear_tug_mission() {
  tug_mission_ = 0;
}
inline ::pb_message::tug_mission_t unit_t::tug_mission() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.tug_mission)
  return static_cast< ::pb_message::tug_mission_t >(tug_mission_);
}
inline void unit_t::set_tug_mission(::pb_message::tug_mission_t value) {
  
  tug_mission_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.tug_mission)
}

// -------------------------------------------------------------------

// fleet_t

// repeated .pb_message.game_data.unit_t units = 1;
inline int fleet_t::units_size() const {
  return units_.size();
}
inline void fleet_t::clear_units() {
  units_.Clear();
}
inline const ::pb_message::game_data::unit_t& fleet_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.fleet_t.units)
  return units_.Get(index);
}
inline ::pb_message::game_data::unit_t* fleet_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.fleet_t.units)
  return units_.Mutable(index);
}
inline ::pb_message::game_data::unit_t* fleet_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.fleet_t.units)
  return units_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::unit_t >*
fleet_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.fleet_t.units)
  return &units_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::unit_t >&
fleet_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.fleet_t.units)
  return units_;
}

// -------------------------------------------------------------------

// fleets_t

// map<int32, .pb_message.game_data.fleet_t> fleets = 1;
inline int fleets_t::fleets_size() const {
  return fleets_.size();
}
inline void fleets_t::clear_fleets() {
  fleets_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >&
fleets_t::fleets() const {
  // @@protoc_insertion_point(field_map:pb_message.game_data.fleets_t.fleets)
  return fleets_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >*
fleets_t::mutable_fleets() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.game_data.fleets_t.fleets)
  return fleets_.MutableMap();
}

// -------------------------------------------------------------------

// planet_t

// optional int32 owner = 1;
inline void planet_t::clear_owner() {
  owner_ = 0;
}
inline ::google::protobuf::int32 planet_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.owner)
  return owner_;
}
inline void planet_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.owner)
}

// optional int32 original_owner = 2;
inline void planet_t::clear_original_owner() {
  original_owner_ = 0;
}
inline ::google::protobuf::int32 planet_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.original_owner)
  return original_owner_;
}
inline void planet_t::set_original_owner(::google::protobuf::int32 value) {
  
  original_owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.original_owner)
}

// optional .pb_message.game_data.planet_t.type_t type = 3;
inline void planet_t::clear_type() {
  type_ = 0;
}
inline ::pb_message::game_data::planet_t_type_t planet_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.type)
  return static_cast< ::pb_message::game_data::planet_t_type_t >(type_);
}
inline void planet_t::set_type(::pb_message::game_data::planet_t_type_t value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.type)
}

// optional .pb_message.game_data.fleets_t units = 4;
inline bool planet_t::has_units() const {
  return !_is_default_instance_ && units_ != NULL;
}
inline void planet_t::clear_units() {
  if (GetArenaNoVirtual() == NULL && units_ != NULL) delete units_;
  units_ = NULL;
}
inline const ::pb_message::game_data::fleets_t& planet_t::units() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.units)
  return units_ != NULL ? *units_ : *default_instance_->units_;
}
inline ::pb_message::game_data::fleets_t* planet_t::mutable_units() {
  
  if (units_ == NULL) {
    units_ = new ::pb_message::game_data::fleets_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.planet_t.units)
  return units_;
}
inline ::pb_message::game_data::fleets_t* planet_t::release_units() {
  
  ::pb_message::game_data::fleets_t* temp = units_;
  units_ = NULL;
  return temp;
}
inline void planet_t::set_allocated_units(::pb_message::game_data::fleets_t* units) {
  delete units_;
  units_ = units;
  if (units) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.planet_t.units)
}

// -------------------------------------------------------------------

// hex_zone_fixture_t

// optional .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
inline void hex_zone_fixture_t::clear_type() {
  type_ = 0;
}
inline ::pb_message::game_data::hex_zone_fixture_t_type_t hex_zone_fixture_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.type)
  return static_cast< ::pb_message::game_data::hex_zone_fixture_t_type_t >(type_);
}
inline void hex_zone_fixture_t::set_type(::pb_message::game_data::hex_zone_fixture_t_type_t value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_zone_fixture_t.type)
}

// optional .pb_message.game_data.unit_t base = 2;
inline bool hex_zone_fixture_t::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void hex_zone_fixture_t::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::pb_message::game_data::unit_t& hex_zone_fixture_t::base() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::pb_message::game_data::unit_t* hex_zone_fixture_t::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::pb_message::game_data::unit_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_fixture_t.base)
  return base_;
}
inline ::pb_message::game_data::unit_t* hex_zone_fixture_t::release_base() {
  
  ::pb_message::game_data::unit_t* temp = base_;
  base_ = NULL;
  return temp;
}
inline void hex_zone_fixture_t::set_allocated_base(::pb_message::game_data::unit_t* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_fixture_t.base)
}

// optional .pb_message.game_data.planet_t planet = 3;
inline bool hex_zone_fixture_t::has_planet() const {
  return !_is_default_instance_ && planet_ != NULL;
}
inline void hex_zone_fixture_t::clear_planet() {
  if (GetArenaNoVirtual() == NULL && planet_ != NULL) delete planet_;
  planet_ = NULL;
}
inline const ::pb_message::game_data::planet_t& hex_zone_fixture_t::planet() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.planet)
  return planet_ != NULL ? *planet_ : *default_instance_->planet_;
}
inline ::pb_message::game_data::planet_t* hex_zone_fixture_t::mutable_planet() {
  
  if (planet_ == NULL) {
    planet_ = new ::pb_message::game_data::planet_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_fixture_t.planet)
  return planet_;
}
inline ::pb_message::game_data::planet_t* hex_zone_fixture_t::release_planet() {
  
  ::pb_message::game_data::planet_t* temp = planet_;
  planet_ = NULL;
  return temp;
}
inline void hex_zone_fixture_t::set_allocated_planet(::pb_message::game_data::planet_t* planet) {
  delete planet_;
  planet_ = planet;
  if (planet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_fixture_t.planet)
}

// -------------------------------------------------------------------

// hex_zone_t

// optional string name = 1;
inline void hex_zone_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hex_zone_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hex_zone_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_zone_t.name)
}
inline void hex_zone_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.game_data.hex_zone_t.name)
}
inline void hex_zone_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.game_data.hex_zone_t.name)
}
inline ::std::string* hex_zone_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hex_zone_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hex_zone_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_t.name)
}

// repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
inline int hex_zone_t::fixtures_size() const {
  return fixtures_.size();
}
inline void hex_zone_t::clear_fixtures() {
  fixtures_.Clear();
}
inline const ::pb_message::game_data::hex_zone_fixture_t& hex_zone_t::fixtures(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_.Get(index);
}
inline ::pb_message::game_data::hex_zone_fixture_t* hex_zone_t::mutable_fixtures(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_.Mutable(index);
}
inline ::pb_message::game_data::hex_zone_fixture_t* hex_zone_t::add_fixtures() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >*
hex_zone_t::mutable_fixtures() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.hex_zone_t.fixtures)
  return &fixtures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >&
hex_zone_t::fixtures() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_;
}

// -------------------------------------------------------------------

// hex_t

// optional .pb_message.hex_coord_t coord = 1;
inline bool hex_t::has_coord() const {
  return !_is_default_instance_ && coord_ != NULL;
}
inline void hex_t::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
inline const ::pb_message::hex_coord_t& hex_t::coord() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::pb_message::hex_coord_t* hex_t::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::pb_message::hex_coord_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.coord)
  return coord_;
}
inline ::pb_message::hex_coord_t* hex_t::release_coord() {
  
  ::pb_message::hex_coord_t* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void hex_t::set_allocated_coord(::pb_message::hex_coord_t* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_t.coord)
}

// optional int32 province_id = 2;
inline void hex_t::clear_province_id() {
  province_id_ = 0;
}
inline ::google::protobuf::int32 hex_t::province_id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.province_id)
  return province_id_;
}
inline void hex_t::set_province_id(::google::protobuf::int32 value) {
  
  province_id_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_t.province_id)
}

// repeated .pb_message.game_data.hex_zone_t zones = 4;
inline int hex_t::zones_size() const {
  return zones_.size();
}
inline void hex_t::clear_zones() {
  zones_.Clear();
}
inline const ::pb_message::game_data::hex_zone_t& hex_t::zones(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.zones)
  return zones_.Get(index);
}
inline ::pb_message::game_data::hex_zone_t* hex_t::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.zones)
  return zones_.Mutable(index);
}
inline ::pb_message::game_data::hex_zone_t* hex_t::add_zones() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.hex_t.zones)
  return zones_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >*
hex_t::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.hex_t.zones)
  return &zones_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >&
hex_t::zones() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.hex_t.zones)
  return zones_;
}

// optional .pb_message.game_data.fleets_t fleets = 5;
inline bool hex_t::has_fleets() const {
  return !_is_default_instance_ && fleets_ != NULL;
}
inline void hex_t::clear_fleets() {
  if (GetArenaNoVirtual() == NULL && fleets_ != NULL) delete fleets_;
  fleets_ = NULL;
}
inline const ::pb_message::game_data::fleets_t& hex_t::fleets() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.fleets)
  return fleets_ != NULL ? *fleets_ : *default_instance_->fleets_;
}
inline ::pb_message::game_data::fleets_t* hex_t::mutable_fleets() {
  
  if (fleets_ == NULL) {
    fleets_ = new ::pb_message::game_data::fleets_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.fleets)
  return fleets_;
}
inline ::pb_message::game_data::fleets_t* hex_t::release_fleets() {
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = NULL;
  return temp;
}
inline void hex_t::set_allocated_fleets(::pb_message::game_data::fleets_t* fleets) {
  delete fleets_;
  fleets_ = fleets;
  if (fleets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_t.fleets)
}

// -------------------------------------------------------------------

// province_t

// optional int32 id = 1;
inline void province_t::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 province_t::id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.id)
  return id_;
}
inline void province_t::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.id)
}

// optional int32 owner = 2;
inline void province_t::clear_owner() {
  owner_ = 0;
}
inline ::google::protobuf::int32 province_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.owner)
  return owner_;
}
inline void province_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.owner)
}

// optional int32 original_owner = 3;
inline void province_t::clear_original_owner() {
  original_owner_ = 0;
}
inline ::google::protobuf::int32 province_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.original_owner)
  return original_owner_;
}
inline void province_t::set_original_owner(::google::protobuf::int32 value) {
  
  original_owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.original_owner)
}

// -------------------------------------------------------------------

// map_t

// optional int32 width = 1;
inline void map_t::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 map_t::width() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.width)
  return width_;
}
inline void map_t::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.map_t.width)
}

// optional int32 height = 2;
inline void map_t::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 map_t::height() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.height)
  return height_;
}
inline void map_t::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.map_t.height)
}

// repeated .pb_message.game_data.hex_t hexes = 3;
inline int map_t::hexes_size() const {
  return hexes_.size();
}
inline void map_t::clear_hexes() {
  hexes_.Clear();
}
inline const ::pb_message::game_data::hex_t& map_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.hexes)
  return hexes_.Get(index);
}
inline ::pb_message::game_data::hex_t* map_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.map_t.hexes)
  return hexes_.Mutable(index);
}
inline ::pb_message::game_data::hex_t* map_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.map_t.hexes)
  return hexes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_t >*
map_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.map_t.hexes)
  return &hexes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_t >&
map_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.map_t.hexes)
  return hexes_;
}

// repeated .pb_message.game_data.province_t provinces = 4;
inline int map_t::provinces_size() const {
  return provinces_.size();
}
inline void map_t::clear_provinces() {
  provinces_.Clear();
}
inline const ::pb_message::game_data::province_t& map_t::provinces(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.provinces)
  return provinces_.Get(index);
}
inline ::pb_message::game_data::province_t* map_t::mutable_provinces(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.map_t.provinces)
  return provinces_.Mutable(index);
}
inline ::pb_message::game_data::province_t* map_t::add_provinces() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.map_t.provinces)
  return provinces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::province_t >*
map_t::mutable_provinces() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.map_t.provinces)
  return &provinces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::province_t >&
map_t::provinces() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.map_t.provinces)
  return provinces_;
}

// -------------------------------------------------------------------

// offmap_area_t

// optional int32 owner = 1;
inline void offmap_area_t::clear_owner() {
  owner_ = 0;
}
inline ::google::protobuf::int32 offmap_area_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.offmap_area_t.owner)
  return owner_;
}
inline void offmap_area_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.offmap_area_t.owner)
}

// optional .pb_message.game_data.fleets_t fleets = 2;
inline bool offmap_area_t::has_fleets() const {
  return !_is_default_instance_ && fleets_ != NULL;
}
inline void offmap_area_t::clear_fleets() {
  if (GetArenaNoVirtual() == NULL && fleets_ != NULL) delete fleets_;
  fleets_ = NULL;
}
inline const ::pb_message::game_data::fleets_t& offmap_area_t::fleets() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.offmap_area_t.fleets)
  return fleets_ != NULL ? *fleets_ : *default_instance_->fleets_;
}
inline ::pb_message::game_data::fleets_t* offmap_area_t::mutable_fleets() {
  
  if (fleets_ == NULL) {
    fleets_ = new ::pb_message::game_data::fleets_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.offmap_area_t.fleets)
  return fleets_;
}
inline ::pb_message::game_data::fleets_t* offmap_area_t::release_fleets() {
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = NULL;
  return temp;
}
inline void offmap_area_t::set_allocated_fleets(::pb_message::game_data::fleets_t* fleets) {
  delete fleets_;
  fleets_ = fleets;
  if (fleets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.offmap_area_t.fleets)
}

// -------------------------------------------------------------------

// offmap_areas_t

// map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
inline int offmap_areas_t::areas_size() const {
  return areas_.size();
}
inline void offmap_areas_t::clear_areas() {
  areas_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >&
offmap_areas_t::areas() const {
  // @@protoc_insertion_point(field_map:pb_message.game_data.offmap_areas_t.areas)
  return areas_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >*
offmap_areas_t::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.game_data.offmap_areas_t.areas)
  return areas_.MutableMap();
}

// -------------------------------------------------------------------

// team_t

// optional string name = 1;
inline void team_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& team_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.team_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void team_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.team_t.name)
}
inline void team_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.game_data.team_t.name)
}
inline void team_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.game_data.team_t.name)
}
inline ::std::string* team_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.team_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* team_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void team_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.team_t.name)
}

// repeated int32 nations = 2;
inline int team_t::nations_size() const {
  return nations_.size();
}
inline void team_t::clear_nations() {
  nations_.Clear();
}
inline ::google::protobuf::int32 team_t::nations(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.team_t.nations)
  return nations_.Get(index);
}
inline void team_t::set_nations(int index, ::google::protobuf::int32 value) {
  nations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.team_t.nations)
}
inline void team_t::add_nations(::google::protobuf::int32 value) {
  nations_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.game_data.team_t.nations)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
team_t::nations() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.team_t.nations)
  return nations_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
team_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.team_t.nations)
  return &nations_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_data
}  // namespace pb_message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb_message::game_data::planet_t_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::game_data::planet_t_type_t>() {
  return ::pb_message::game_data::planet_t_type_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::game_data::hex_zone_fixture_t_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::game_data::hex_zone_fixture_t_type_t>() {
  return ::pb_message::game_data::hex_zone_fixture_t_type_t_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fdata_2eproto__INCLUDED
