// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fdata_2eproto;
namespace pb_message {
namespace game_data {
class fleet_t;
class fleet_tDefaultTypeInternal;
extern fleet_tDefaultTypeInternal _fleet_t_default_instance_;
class fleets_t;
class fleets_tDefaultTypeInternal;
extern fleets_tDefaultTypeInternal _fleets_t_default_instance_;
class fleets_t_FleetsEntry_DoNotUse;
class fleets_t_FleetsEntry_DoNotUseDefaultTypeInternal;
extern fleets_t_FleetsEntry_DoNotUseDefaultTypeInternal _fleets_t_FleetsEntry_DoNotUse_default_instance_;
class hex_t;
class hex_tDefaultTypeInternal;
extern hex_tDefaultTypeInternal _hex_t_default_instance_;
class hex_zone_fixture_t;
class hex_zone_fixture_tDefaultTypeInternal;
extern hex_zone_fixture_tDefaultTypeInternal _hex_zone_fixture_t_default_instance_;
class hex_zone_t;
class hex_zone_tDefaultTypeInternal;
extern hex_zone_tDefaultTypeInternal _hex_zone_t_default_instance_;
class map_t;
class map_tDefaultTypeInternal;
extern map_tDefaultTypeInternal _map_t_default_instance_;
class offmap_area_t;
class offmap_area_tDefaultTypeInternal;
extern offmap_area_tDefaultTypeInternal _offmap_area_t_default_instance_;
class offmap_areas_t;
class offmap_areas_tDefaultTypeInternal;
extern offmap_areas_tDefaultTypeInternal _offmap_areas_t_default_instance_;
class offmap_areas_t_AreasEntry_DoNotUse;
class offmap_areas_t_AreasEntry_DoNotUseDefaultTypeInternal;
extern offmap_areas_t_AreasEntry_DoNotUseDefaultTypeInternal _offmap_areas_t_AreasEntry_DoNotUse_default_instance_;
class planet_t;
class planet_tDefaultTypeInternal;
extern planet_tDefaultTypeInternal _planet_t_default_instance_;
class province_t;
class province_tDefaultTypeInternal;
extern province_tDefaultTypeInternal _province_t_default_instance_;
class team_t;
class team_tDefaultTypeInternal;
extern team_tDefaultTypeInternal _team_t_default_instance_;
class unit_t;
class unit_tDefaultTypeInternal;
extern unit_tDefaultTypeInternal _unit_t_default_instance_;
}  // namespace game_data
}  // namespace pb_message
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_message::game_data::fleet_t* Arena::CreateMaybeMessage<::pb_message::game_data::fleet_t>(Arena*);
template<> ::pb_message::game_data::fleets_t* Arena::CreateMaybeMessage<::pb_message::game_data::fleets_t>(Arena*);
template<> ::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse>(Arena*);
template<> ::pb_message::game_data::hex_t* Arena::CreateMaybeMessage<::pb_message::game_data::hex_t>(Arena*);
template<> ::pb_message::game_data::hex_zone_fixture_t* Arena::CreateMaybeMessage<::pb_message::game_data::hex_zone_fixture_t>(Arena*);
template<> ::pb_message::game_data::hex_zone_t* Arena::CreateMaybeMessage<::pb_message::game_data::hex_zone_t>(Arena*);
template<> ::pb_message::game_data::map_t* Arena::CreateMaybeMessage<::pb_message::game_data::map_t>(Arena*);
template<> ::pb_message::game_data::offmap_area_t* Arena::CreateMaybeMessage<::pb_message::game_data::offmap_area_t>(Arena*);
template<> ::pb_message::game_data::offmap_areas_t* Arena::CreateMaybeMessage<::pb_message::game_data::offmap_areas_t>(Arena*);
template<> ::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse>(Arena*);
template<> ::pb_message::game_data::planet_t* Arena::CreateMaybeMessage<::pb_message::game_data::planet_t>(Arena*);
template<> ::pb_message::game_data::province_t* Arena::CreateMaybeMessage<::pb_message::game_data::province_t>(Arena*);
template<> ::pb_message::game_data::team_t* Arena::CreateMaybeMessage<::pb_message::game_data::team_t>(Arena*);
template<> ::pb_message::game_data::unit_t* Arena::CreateMaybeMessage<::pb_message::game_data::unit_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_message {
namespace game_data {

enum planet_t_type_t : int {
  planet_t_type_t_minor = 0,
  planet_t_type_t_major = 1,
  planet_t_type_t_capital = 2,
  planet_t_type_t_planet_t_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  planet_t_type_t_planet_t_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool planet_t_type_t_IsValid(int value);
constexpr planet_t_type_t planet_t_type_t_type_t_MIN = planet_t_type_t_minor;
constexpr planet_t_type_t planet_t_type_t_type_t_MAX = planet_t_type_t_capital;
constexpr int planet_t_type_t_type_t_ARRAYSIZE = planet_t_type_t_type_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* planet_t_type_t_descriptor();
template<typename T>
inline const std::string& planet_t_type_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, planet_t_type_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function planet_t_type_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    planet_t_type_t_descriptor(), enum_t_value);
}
inline bool planet_t_type_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, planet_t_type_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<planet_t_type_t>(
    planet_t_type_t_descriptor(), name, value);
}
enum hex_zone_fixture_t_type_t : int {
  hex_zone_fixture_t_type_t_type_base = 0,
  hex_zone_fixture_t_type_t_type_planet = 1,
  hex_zone_fixture_t_type_t_hex_zone_fixture_t_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  hex_zone_fixture_t_type_t_hex_zone_fixture_t_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool hex_zone_fixture_t_type_t_IsValid(int value);
constexpr hex_zone_fixture_t_type_t hex_zone_fixture_t_type_t_type_t_MIN = hex_zone_fixture_t_type_t_type_base;
constexpr hex_zone_fixture_t_type_t hex_zone_fixture_t_type_t_type_t_MAX = hex_zone_fixture_t_type_t_type_planet;
constexpr int hex_zone_fixture_t_type_t_type_t_ARRAYSIZE = hex_zone_fixture_t_type_t_type_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* hex_zone_fixture_t_type_t_descriptor();
template<typename T>
inline const std::string& hex_zone_fixture_t_type_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, hex_zone_fixture_t_type_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function hex_zone_fixture_t_type_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    hex_zone_fixture_t_type_t_descriptor(), enum_t_value);
}
inline bool hex_zone_fixture_t_type_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, hex_zone_fixture_t_type_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<hex_zone_fixture_t_type_t>(
    hex_zone_fixture_t_type_t_descriptor(), name, value);
}
// ===================================================================

class unit_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.unit_t) */ {
 public:
  inline unit_t() : unit_t(nullptr) {}
  virtual ~unit_t();

  unit_t(const unit_t& from);
  unit_t(unit_t&& from) noexcept
    : unit_t() {
    *this = ::std::move(from);
  }

  inline unit_t& operator=(const unit_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline unit_t& operator=(unit_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const unit_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unit_t* internal_default_instance() {
    return reinterpret_cast<const unit_t*>(
               &_unit_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(unit_t& a, unit_t& b) {
    a.Swap(&b);
  }
  inline void Swap(unit_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unit_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline unit_t* New() const final {
    return CreateMaybeMessage<unit_t>(nullptr);
  }

  unit_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<unit_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const unit_t& from);
  void MergeFrom(const unit_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unit_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.unit_t";
  }
  protected:
  explicit unit_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kOriginalOwnerFieldNumber = 3,
    kFightersFieldNumber = 4,
    kPfsFieldNumber = 5,
    kTugMissionFieldNumber = 6,
  };
  // int32 unit_id = 1;
  void clear_unit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id() const;
  void set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_id() const;
  void _internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner = 2;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 original_owner = 3;
  void clear_original_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 original_owner() const;
  void set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_owner() const;
  void _internal_set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fighters = 4;
  void clear_fighters();
  ::PROTOBUF_NAMESPACE_ID::int32 fighters() const;
  void set_fighters(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fighters() const;
  void _internal_set_fighters(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pfs = 5;
  void clear_pfs();
  ::PROTOBUF_NAMESPACE_ID::int32 pfs() const;
  void set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pfs() const;
  void _internal_set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.tug_mission_t tug_mission = 6;
  void clear_tug_mission();
  ::pb_message::tug_mission_t tug_mission() const;
  void set_tug_mission(::pb_message::tug_mission_t value);
  private:
  ::pb_message::tug_mission_t _internal_tug_mission() const;
  void _internal_set_tug_mission(::pb_message::tug_mission_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.unit_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_owner_;
  ::PROTOBUF_NAMESPACE_ID::int32 fighters_;
  ::PROTOBUF_NAMESPACE_ID::int32 pfs_;
  int tug_mission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class fleet_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.fleet_t) */ {
 public:
  inline fleet_t() : fleet_t(nullptr) {}
  virtual ~fleet_t();

  fleet_t(const fleet_t& from);
  fleet_t(fleet_t&& from) noexcept
    : fleet_t() {
    *this = ::std::move(from);
  }

  inline fleet_t& operator=(const fleet_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline fleet_t& operator=(fleet_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fleet_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fleet_t* internal_default_instance() {
    return reinterpret_cast<const fleet_t*>(
               &_fleet_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(fleet_t& a, fleet_t& b) {
    a.Swap(&b);
  }
  inline void Swap(fleet_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fleet_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fleet_t* New() const final {
    return CreateMaybeMessage<fleet_t>(nullptr);
  }

  fleet_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fleet_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fleet_t& from);
  void MergeFrom(const fleet_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fleet_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.fleet_t";
  }
  protected:
  explicit fleet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
  };
  // repeated .pb_message.game_data.unit_t units = 1;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  ::pb_message::game_data::unit_t* mutable_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::unit_t >*
      mutable_units();
  private:
  const ::pb_message::game_data::unit_t& _internal_units(int index) const;
  ::pb_message::game_data::unit_t* _internal_add_units();
  public:
  const ::pb_message::game_data::unit_t& units(int index) const;
  ::pb_message::game_data::unit_t* add_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::unit_t >&
      units() const;

  // @@protoc_insertion_point(class_scope:pb_message.game_data.fleet_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::unit_t > units_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class fleets_t_FleetsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fleets_t_FleetsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<fleets_t_FleetsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  fleets_t_FleetsEntry_DoNotUse();
  explicit fleets_t_FleetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const fleets_t_FleetsEntry_DoNotUse& other);
  static const fleets_t_FleetsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const fleets_t_FleetsEntry_DoNotUse*>(&_fleets_t_FleetsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class fleets_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.fleets_t) */ {
 public:
  inline fleets_t() : fleets_t(nullptr) {}
  virtual ~fleets_t();

  fleets_t(const fleets_t& from);
  fleets_t(fleets_t&& from) noexcept
    : fleets_t() {
    *this = ::std::move(from);
  }

  inline fleets_t& operator=(const fleets_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline fleets_t& operator=(fleets_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fleets_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fleets_t* internal_default_instance() {
    return reinterpret_cast<const fleets_t*>(
               &_fleets_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(fleets_t& a, fleets_t& b) {
    a.Swap(&b);
  }
  inline void Swap(fleets_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fleets_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fleets_t* New() const final {
    return CreateMaybeMessage<fleets_t>(nullptr);
  }

  fleets_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fleets_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fleets_t& from);
  void MergeFrom(const fleets_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fleets_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.fleets_t";
  }
  protected:
  explicit fleets_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFleetsFieldNumber = 1,
  };
  // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
  int fleets_size() const;
  private:
  int _internal_fleets_size() const;
  public:
  void clear_fleets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >&
      _internal_fleets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >*
      _internal_mutable_fleets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >&
      fleets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >*
      mutable_fleets();

  // @@protoc_insertion_point(class_scope:pb_message.game_data.fleets_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      fleets_t_FleetsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fleets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class planet_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.planet_t) */ {
 public:
  inline planet_t() : planet_t(nullptr) {}
  virtual ~planet_t();

  planet_t(const planet_t& from);
  planet_t(planet_t&& from) noexcept
    : planet_t() {
    *this = ::std::move(from);
  }

  inline planet_t& operator=(const planet_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline planet_t& operator=(planet_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const planet_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const planet_t* internal_default_instance() {
    return reinterpret_cast<const planet_t*>(
               &_planet_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(planet_t& a, planet_t& b) {
    a.Swap(&b);
  }
  inline void Swap(planet_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(planet_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline planet_t* New() const final {
    return CreateMaybeMessage<planet_t>(nullptr);
  }

  planet_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<planet_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const planet_t& from);
  void MergeFrom(const planet_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(planet_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.planet_t";
  }
  protected:
  explicit planet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef planet_t_type_t type_t;
  static constexpr type_t minor =
    planet_t_type_t_minor;
  static constexpr type_t major =
    planet_t_type_t_major;
  static constexpr type_t capital =
    planet_t_type_t_capital;
  static inline bool type_t_IsValid(int value) {
    return planet_t_type_t_IsValid(value);
  }
  static constexpr type_t type_t_MIN =
    planet_t_type_t_type_t_MIN;
  static constexpr type_t type_t_MAX =
    planet_t_type_t_type_t_MAX;
  static constexpr int type_t_ARRAYSIZE =
    planet_t_type_t_type_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  type_t_descriptor() {
    return planet_t_type_t_descriptor();
  }
  template<typename T>
  static inline const std::string& type_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, type_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function type_t_Name.");
    return planet_t_type_t_Name(enum_t_value);
  }
  static inline bool type_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      type_t* value) {
    return planet_t_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 4,
    kOwnerFieldNumber = 1,
    kOriginalOwnerFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // .pb_message.game_data.fleets_t units = 4;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const ::pb_message::game_data::fleets_t& units() const;
  ::pb_message::game_data::fleets_t* release_units();
  ::pb_message::game_data::fleets_t* mutable_units();
  void set_allocated_units(::pb_message::game_data::fleets_t* units);
  private:
  const ::pb_message::game_data::fleets_t& _internal_units() const;
  ::pb_message::game_data::fleets_t* _internal_mutable_units();
  public:
  void unsafe_arena_set_allocated_units(
      ::pb_message::game_data::fleets_t* units);
  ::pb_message::game_data::fleets_t* unsafe_arena_release_units();

  // int32 owner = 1;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 original_owner = 2;
  void clear_original_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 original_owner() const;
  void set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_owner() const;
  void _internal_set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.game_data.planet_t.type_t type = 3;
  void clear_type();
  ::pb_message::game_data::planet_t_type_t type() const;
  void set_type(::pb_message::game_data::planet_t_type_t value);
  private:
  ::pb_message::game_data::planet_t_type_t _internal_type() const;
  void _internal_set_type(::pb_message::game_data::planet_t_type_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.planet_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb_message::game_data::fleets_t* units_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_owner_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class hex_zone_fixture_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.hex_zone_fixture_t) */ {
 public:
  inline hex_zone_fixture_t() : hex_zone_fixture_t(nullptr) {}
  virtual ~hex_zone_fixture_t();

  hex_zone_fixture_t(const hex_zone_fixture_t& from);
  hex_zone_fixture_t(hex_zone_fixture_t&& from) noexcept
    : hex_zone_fixture_t() {
    *this = ::std::move(from);
  }

  inline hex_zone_fixture_t& operator=(const hex_zone_fixture_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline hex_zone_fixture_t& operator=(hex_zone_fixture_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hex_zone_fixture_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hex_zone_fixture_t* internal_default_instance() {
    return reinterpret_cast<const hex_zone_fixture_t*>(
               &_hex_zone_fixture_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(hex_zone_fixture_t& a, hex_zone_fixture_t& b) {
    a.Swap(&b);
  }
  inline void Swap(hex_zone_fixture_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hex_zone_fixture_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hex_zone_fixture_t* New() const final {
    return CreateMaybeMessage<hex_zone_fixture_t>(nullptr);
  }

  hex_zone_fixture_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hex_zone_fixture_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hex_zone_fixture_t& from);
  void MergeFrom(const hex_zone_fixture_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hex_zone_fixture_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.hex_zone_fixture_t";
  }
  protected:
  explicit hex_zone_fixture_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef hex_zone_fixture_t_type_t type_t;
  static constexpr type_t type_base =
    hex_zone_fixture_t_type_t_type_base;
  static constexpr type_t type_planet =
    hex_zone_fixture_t_type_t_type_planet;
  static inline bool type_t_IsValid(int value) {
    return hex_zone_fixture_t_type_t_IsValid(value);
  }
  static constexpr type_t type_t_MIN =
    hex_zone_fixture_t_type_t_type_t_MIN;
  static constexpr type_t type_t_MAX =
    hex_zone_fixture_t_type_t_type_t_MAX;
  static constexpr int type_t_ARRAYSIZE =
    hex_zone_fixture_t_type_t_type_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  type_t_descriptor() {
    return hex_zone_fixture_t_type_t_descriptor();
  }
  template<typename T>
  static inline const std::string& type_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, type_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function type_t_Name.");
    return hex_zone_fixture_t_type_t_Name(enum_t_value);
  }
  static inline bool type_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      type_t* value) {
    return hex_zone_fixture_t_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 2,
    kPlanetFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .pb_message.game_data.unit_t base = 2;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pb_message::game_data::unit_t& base() const;
  ::pb_message::game_data::unit_t* release_base();
  ::pb_message::game_data::unit_t* mutable_base();
  void set_allocated_base(::pb_message::game_data::unit_t* base);
  private:
  const ::pb_message::game_data::unit_t& _internal_base() const;
  ::pb_message::game_data::unit_t* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pb_message::game_data::unit_t* base);
  ::pb_message::game_data::unit_t* unsafe_arena_release_base();

  // .pb_message.game_data.planet_t planet = 3;
  bool has_planet() const;
  private:
  bool _internal_has_planet() const;
  public:
  void clear_planet();
  const ::pb_message::game_data::planet_t& planet() const;
  ::pb_message::game_data::planet_t* release_planet();
  ::pb_message::game_data::planet_t* mutable_planet();
  void set_allocated_planet(::pb_message::game_data::planet_t* planet);
  private:
  const ::pb_message::game_data::planet_t& _internal_planet() const;
  ::pb_message::game_data::planet_t* _internal_mutable_planet();
  public:
  void unsafe_arena_set_allocated_planet(
      ::pb_message::game_data::planet_t* planet);
  ::pb_message::game_data::planet_t* unsafe_arena_release_planet();

  // .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
  void clear_type();
  ::pb_message::game_data::hex_zone_fixture_t_type_t type() const;
  void set_type(::pb_message::game_data::hex_zone_fixture_t_type_t value);
  private:
  ::pb_message::game_data::hex_zone_fixture_t_type_t _internal_type() const;
  void _internal_set_type(::pb_message::game_data::hex_zone_fixture_t_type_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.hex_zone_fixture_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb_message::game_data::unit_t* base_;
  ::pb_message::game_data::planet_t* planet_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class hex_zone_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.hex_zone_t) */ {
 public:
  inline hex_zone_t() : hex_zone_t(nullptr) {}
  virtual ~hex_zone_t();

  hex_zone_t(const hex_zone_t& from);
  hex_zone_t(hex_zone_t&& from) noexcept
    : hex_zone_t() {
    *this = ::std::move(from);
  }

  inline hex_zone_t& operator=(const hex_zone_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline hex_zone_t& operator=(hex_zone_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hex_zone_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hex_zone_t* internal_default_instance() {
    return reinterpret_cast<const hex_zone_t*>(
               &_hex_zone_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(hex_zone_t& a, hex_zone_t& b) {
    a.Swap(&b);
  }
  inline void Swap(hex_zone_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hex_zone_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hex_zone_t* New() const final {
    return CreateMaybeMessage<hex_zone_t>(nullptr);
  }

  hex_zone_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hex_zone_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hex_zone_t& from);
  void MergeFrom(const hex_zone_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hex_zone_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.hex_zone_t";
  }
  protected:
  explicit hex_zone_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixturesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
  int fixtures_size() const;
  private:
  int _internal_fixtures_size() const;
  public:
  void clear_fixtures();
  ::pb_message::game_data::hex_zone_fixture_t* mutable_fixtures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >*
      mutable_fixtures();
  private:
  const ::pb_message::game_data::hex_zone_fixture_t& _internal_fixtures(int index) const;
  ::pb_message::game_data::hex_zone_fixture_t* _internal_add_fixtures();
  public:
  const ::pb_message::game_data::hex_zone_fixture_t& fixtures(int index) const;
  ::pb_message::game_data::hex_zone_fixture_t* add_fixtures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >&
      fixtures() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.hex_zone_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t > fixtures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class hex_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.hex_t) */ {
 public:
  inline hex_t() : hex_t(nullptr) {}
  virtual ~hex_t();

  hex_t(const hex_t& from);
  hex_t(hex_t&& from) noexcept
    : hex_t() {
    *this = ::std::move(from);
  }

  inline hex_t& operator=(const hex_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline hex_t& operator=(hex_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hex_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hex_t* internal_default_instance() {
    return reinterpret_cast<const hex_t*>(
               &_hex_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(hex_t& a, hex_t& b) {
    a.Swap(&b);
  }
  inline void Swap(hex_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hex_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hex_t* New() const final {
    return CreateMaybeMessage<hex_t>(nullptr);
  }

  hex_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hex_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hex_t& from);
  void MergeFrom(const hex_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hex_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.hex_t";
  }
  protected:
  explicit hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZonesFieldNumber = 4,
    kCoordFieldNumber = 1,
    kFleetsFieldNumber = 5,
    kProvinceIdFieldNumber = 2,
  };
  // repeated .pb_message.game_data.hex_zone_t zones = 4;
  int zones_size() const;
  private:
  int _internal_zones_size() const;
  public:
  void clear_zones();
  ::pb_message::game_data::hex_zone_t* mutable_zones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >*
      mutable_zones();
  private:
  const ::pb_message::game_data::hex_zone_t& _internal_zones(int index) const;
  ::pb_message::game_data::hex_zone_t* _internal_add_zones();
  public:
  const ::pb_message::game_data::hex_zone_t& zones(int index) const;
  ::pb_message::game_data::hex_zone_t* add_zones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >&
      zones() const;

  // .pb_message.hex_coord_t coord = 1;
  bool has_coord() const;
  private:
  bool _internal_has_coord() const;
  public:
  void clear_coord();
  const ::pb_message::hex_coord_t& coord() const;
  ::pb_message::hex_coord_t* release_coord();
  ::pb_message::hex_coord_t* mutable_coord();
  void set_allocated_coord(::pb_message::hex_coord_t* coord);
  private:
  const ::pb_message::hex_coord_t& _internal_coord() const;
  ::pb_message::hex_coord_t* _internal_mutable_coord();
  public:
  void unsafe_arena_set_allocated_coord(
      ::pb_message::hex_coord_t* coord);
  ::pb_message::hex_coord_t* unsafe_arena_release_coord();

  // .pb_message.game_data.fleets_t fleets = 5;
  bool has_fleets() const;
  private:
  bool _internal_has_fleets() const;
  public:
  void clear_fleets();
  const ::pb_message::game_data::fleets_t& fleets() const;
  ::pb_message::game_data::fleets_t* release_fleets();
  ::pb_message::game_data::fleets_t* mutable_fleets();
  void set_allocated_fleets(::pb_message::game_data::fleets_t* fleets);
  private:
  const ::pb_message::game_data::fleets_t& _internal_fleets() const;
  ::pb_message::game_data::fleets_t* _internal_mutable_fleets();
  public:
  void unsafe_arena_set_allocated_fleets(
      ::pb_message::game_data::fleets_t* fleets);
  ::pb_message::game_data::fleets_t* unsafe_arena_release_fleets();

  // int32 province_id = 2;
  void clear_province_id();
  ::PROTOBUF_NAMESPACE_ID::int32 province_id() const;
  void set_province_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_province_id() const;
  void _internal_set_province_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.hex_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_t > zones_;
  ::pb_message::hex_coord_t* coord_;
  ::pb_message::game_data::fleets_t* fleets_;
  ::PROTOBUF_NAMESPACE_ID::int32 province_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class province_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.province_t) */ {
 public:
  inline province_t() : province_t(nullptr) {}
  virtual ~province_t();

  province_t(const province_t& from);
  province_t(province_t&& from) noexcept
    : province_t() {
    *this = ::std::move(from);
  }

  inline province_t& operator=(const province_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline province_t& operator=(province_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const province_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const province_t* internal_default_instance() {
    return reinterpret_cast<const province_t*>(
               &_province_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(province_t& a, province_t& b) {
    a.Swap(&b);
  }
  inline void Swap(province_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(province_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline province_t* New() const final {
    return CreateMaybeMessage<province_t>(nullptr);
  }

  province_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<province_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const province_t& from);
  void MergeFrom(const province_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(province_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.province_t";
  }
  protected:
  explicit province_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kOriginalOwnerFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner = 2;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 original_owner = 3;
  void clear_original_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 original_owner() const;
  void set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_owner() const;
  void _internal_set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.province_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class map_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.map_t) */ {
 public:
  inline map_t() : map_t(nullptr) {}
  virtual ~map_t();

  map_t(const map_t& from);
  map_t(map_t&& from) noexcept
    : map_t() {
    *this = ::std::move(from);
  }

  inline map_t& operator=(const map_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline map_t& operator=(map_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const map_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_t* internal_default_instance() {
    return reinterpret_cast<const map_t*>(
               &_map_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(map_t& a, map_t& b) {
    a.Swap(&b);
  }
  inline void Swap(map_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(map_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline map_t* New() const final {
    return CreateMaybeMessage<map_t>(nullptr);
  }

  map_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<map_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const map_t& from);
  void MergeFrom(const map_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.map_t";
  }
  protected:
  explicit map_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexesFieldNumber = 3,
    kProvincesFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated .pb_message.game_data.hex_t hexes = 3;
  int hexes_size() const;
  private:
  int _internal_hexes_size() const;
  public:
  void clear_hexes();
  ::pb_message::game_data::hex_t* mutable_hexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_t >*
      mutable_hexes();
  private:
  const ::pb_message::game_data::hex_t& _internal_hexes(int index) const;
  ::pb_message::game_data::hex_t* _internal_add_hexes();
  public:
  const ::pb_message::game_data::hex_t& hexes(int index) const;
  ::pb_message::game_data::hex_t* add_hexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_t >&
      hexes() const;

  // repeated .pb_message.game_data.province_t provinces = 4;
  int provinces_size() const;
  private:
  int _internal_provinces_size() const;
  public:
  void clear_provinces();
  ::pb_message::game_data::province_t* mutable_provinces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::province_t >*
      mutable_provinces();
  private:
  const ::pb_message::game_data::province_t& _internal_provinces(int index) const;
  ::pb_message::game_data::province_t* _internal_add_provinces();
  public:
  const ::pb_message::game_data::province_t& provinces(int index) const;
  ::pb_message::game_data::province_t* add_provinces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::province_t >&
      provinces() const;

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.map_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_t > hexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::province_t > provinces_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class offmap_area_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.offmap_area_t) */ {
 public:
  inline offmap_area_t() : offmap_area_t(nullptr) {}
  virtual ~offmap_area_t();

  offmap_area_t(const offmap_area_t& from);
  offmap_area_t(offmap_area_t&& from) noexcept
    : offmap_area_t() {
    *this = ::std::move(from);
  }

  inline offmap_area_t& operator=(const offmap_area_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline offmap_area_t& operator=(offmap_area_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const offmap_area_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offmap_area_t* internal_default_instance() {
    return reinterpret_cast<const offmap_area_t*>(
               &_offmap_area_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(offmap_area_t& a, offmap_area_t& b) {
    a.Swap(&b);
  }
  inline void Swap(offmap_area_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(offmap_area_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline offmap_area_t* New() const final {
    return CreateMaybeMessage<offmap_area_t>(nullptr);
  }

  offmap_area_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<offmap_area_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const offmap_area_t& from);
  void MergeFrom(const offmap_area_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offmap_area_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.offmap_area_t";
  }
  protected:
  explicit offmap_area_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFleetsFieldNumber = 2,
    kOwnerFieldNumber = 1,
  };
  // .pb_message.game_data.fleets_t fleets = 2;
  bool has_fleets() const;
  private:
  bool _internal_has_fleets() const;
  public:
  void clear_fleets();
  const ::pb_message::game_data::fleets_t& fleets() const;
  ::pb_message::game_data::fleets_t* release_fleets();
  ::pb_message::game_data::fleets_t* mutable_fleets();
  void set_allocated_fleets(::pb_message::game_data::fleets_t* fleets);
  private:
  const ::pb_message::game_data::fleets_t& _internal_fleets() const;
  ::pb_message::game_data::fleets_t* _internal_mutable_fleets();
  public:
  void unsafe_arena_set_allocated_fleets(
      ::pb_message::game_data::fleets_t* fleets);
  ::pb_message::game_data::fleets_t* unsafe_arena_release_fleets();

  // int32 owner = 1;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.offmap_area_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb_message::game_data::fleets_t* fleets_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class offmap_areas_t_AreasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<offmap_areas_t_AreasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<offmap_areas_t_AreasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  offmap_areas_t_AreasEntry_DoNotUse();
  explicit offmap_areas_t_AreasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const offmap_areas_t_AreasEntry_DoNotUse& other);
  static const offmap_areas_t_AreasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const offmap_areas_t_AreasEntry_DoNotUse*>(&_offmap_areas_t_AreasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class offmap_areas_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.offmap_areas_t) */ {
 public:
  inline offmap_areas_t() : offmap_areas_t(nullptr) {}
  virtual ~offmap_areas_t();

  offmap_areas_t(const offmap_areas_t& from);
  offmap_areas_t(offmap_areas_t&& from) noexcept
    : offmap_areas_t() {
    *this = ::std::move(from);
  }

  inline offmap_areas_t& operator=(const offmap_areas_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline offmap_areas_t& operator=(offmap_areas_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const offmap_areas_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offmap_areas_t* internal_default_instance() {
    return reinterpret_cast<const offmap_areas_t*>(
               &_offmap_areas_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(offmap_areas_t& a, offmap_areas_t& b) {
    a.Swap(&b);
  }
  inline void Swap(offmap_areas_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(offmap_areas_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline offmap_areas_t* New() const final {
    return CreateMaybeMessage<offmap_areas_t>(nullptr);
  }

  offmap_areas_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<offmap_areas_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const offmap_areas_t& from);
  void MergeFrom(const offmap_areas_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offmap_areas_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.offmap_areas_t";
  }
  protected:
  explicit offmap_areas_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAreasFieldNumber = 1,
  };
  // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
  int areas_size() const;
  private:
  int _internal_areas_size() const;
  public:
  void clear_areas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >&
      _internal_areas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >*
      _internal_mutable_areas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >&
      areas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >*
      mutable_areas();

  // @@protoc_insertion_point(class_scope:pb_message.game_data.offmap_areas_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      offmap_areas_t_AreasEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > areas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// -------------------------------------------------------------------

class team_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.game_data.team_t) */ {
 public:
  inline team_t() : team_t(nullptr) {}
  virtual ~team_t();

  team_t(const team_t& from);
  team_t(team_t&& from) noexcept
    : team_t() {
    *this = ::std::move(from);
  }

  inline team_t& operator=(const team_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline team_t& operator=(team_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const team_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const team_t* internal_default_instance() {
    return reinterpret_cast<const team_t*>(
               &_team_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(team_t& a, team_t& b) {
    a.Swap(&b);
  }
  inline void Swap(team_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(team_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline team_t* New() const final {
    return CreateMaybeMessage<team_t>(nullptr);
  }

  team_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<team_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const team_t& from);
  void MergeFrom(const team_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(team_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.game_data.team_t";
  }
  protected:
  explicit team_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fdata_2eproto);
    return ::descriptor_table_game_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNationsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated int32 nations = 2;
  int nations_size() const;
  private:
  int _internal_nations_size() const;
  public:
  void clear_nations();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_nations() const;
  void _internal_add_nations(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_nations();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 nations(int index) const;
  void set_nations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_nations(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      nations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_nations();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb_message.game_data.team_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > nations_;
  mutable std::atomic<int> _nations_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// unit_t

// int32 unit_id = 1;
inline void unit_t::clear_unit_id() {
  unit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::_internal_unit_id() const {
  return unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::unit_id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.unit_id)
  return _internal_unit_id();
}
inline void unit_t::_internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_id_ = value;
}
inline void unit_t::set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_id(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.unit_id)
}

// int32 owner = 2;
inline void unit_t::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.owner)
  return _internal_owner();
}
inline void unit_t::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void unit_t::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.owner)
}

// int32 original_owner = 3;
inline void unit_t::clear_original_owner() {
  original_owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::_internal_original_owner() const {
  return original_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.original_owner)
  return _internal_original_owner();
}
inline void unit_t::_internal_set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_owner_ = value;
}
inline void unit_t::set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.original_owner)
}

// int32 fighters = 4;
inline void unit_t::clear_fighters() {
  fighters_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::_internal_fighters() const {
  return fighters_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::fighters() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.fighters)
  return _internal_fighters();
}
inline void unit_t::_internal_set_fighters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fighters_ = value;
}
inline void unit_t::set_fighters(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fighters(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.fighters)
}

// int32 pfs = 5;
inline void unit_t::clear_pfs() {
  pfs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::_internal_pfs() const {
  return pfs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_t::pfs() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.pfs)
  return _internal_pfs();
}
inline void unit_t::_internal_set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pfs_ = value;
}
inline void unit_t::set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pfs(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.pfs)
}

// .pb_message.tug_mission_t tug_mission = 6;
inline void unit_t::clear_tug_mission() {
  tug_mission_ = 0;
}
inline ::pb_message::tug_mission_t unit_t::_internal_tug_mission() const {
  return static_cast< ::pb_message::tug_mission_t >(tug_mission_);
}
inline ::pb_message::tug_mission_t unit_t::tug_mission() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.tug_mission)
  return _internal_tug_mission();
}
inline void unit_t::_internal_set_tug_mission(::pb_message::tug_mission_t value) {
  
  tug_mission_ = value;
}
inline void unit_t::set_tug_mission(::pb_message::tug_mission_t value) {
  _internal_set_tug_mission(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.tug_mission)
}

// -------------------------------------------------------------------

// fleet_t

// repeated .pb_message.game_data.unit_t units = 1;
inline int fleet_t::_internal_units_size() const {
  return units_.size();
}
inline int fleet_t::units_size() const {
  return _internal_units_size();
}
inline void fleet_t::clear_units() {
  units_.Clear();
}
inline ::pb_message::game_data::unit_t* fleet_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.fleet_t.units)
  return units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::unit_t >*
fleet_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.fleet_t.units)
  return &units_;
}
inline const ::pb_message::game_data::unit_t& fleet_t::_internal_units(int index) const {
  return units_.Get(index);
}
inline const ::pb_message::game_data::unit_t& fleet_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.fleet_t.units)
  return _internal_units(index);
}
inline ::pb_message::game_data::unit_t* fleet_t::_internal_add_units() {
  return units_.Add();
}
inline ::pb_message::game_data::unit_t* fleet_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.fleet_t.units)
  return _internal_add_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::unit_t >&
fleet_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.fleet_t.units)
  return units_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// fleets_t

// map<int32, .pb_message.game_data.fleet_t> fleets = 1;
inline int fleets_t::_internal_fleets_size() const {
  return fleets_.size();
}
inline int fleets_t::fleets_size() const {
  return _internal_fleets_size();
}
inline void fleets_t::clear_fleets() {
  fleets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >&
fleets_t::_internal_fleets() const {
  return fleets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >&
fleets_t::fleets() const {
  // @@protoc_insertion_point(field_map:pb_message.game_data.fleets_t.fleets)
  return _internal_fleets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >*
fleets_t::_internal_mutable_fleets() {
  return fleets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >*
fleets_t::mutable_fleets() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.game_data.fleets_t.fleets)
  return _internal_mutable_fleets();
}

// -------------------------------------------------------------------

// planet_t

// int32 owner = 1;
inline void planet_t::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 planet_t::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 planet_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.owner)
  return _internal_owner();
}
inline void planet_t::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void planet_t::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.owner)
}

// int32 original_owner = 2;
inline void planet_t::clear_original_owner() {
  original_owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 planet_t::_internal_original_owner() const {
  return original_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 planet_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.original_owner)
  return _internal_original_owner();
}
inline void planet_t::_internal_set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_owner_ = value;
}
inline void planet_t::set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.original_owner)
}

// .pb_message.game_data.planet_t.type_t type = 3;
inline void planet_t::clear_type() {
  type_ = 0;
}
inline ::pb_message::game_data::planet_t_type_t planet_t::_internal_type() const {
  return static_cast< ::pb_message::game_data::planet_t_type_t >(type_);
}
inline ::pb_message::game_data::planet_t_type_t planet_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.type)
  return _internal_type();
}
inline void planet_t::_internal_set_type(::pb_message::game_data::planet_t_type_t value) {
  
  type_ = value;
}
inline void planet_t::set_type(::pb_message::game_data::planet_t_type_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.type)
}

// .pb_message.game_data.fleets_t units = 4;
inline bool planet_t::_internal_has_units() const {
  return this != internal_default_instance() && units_ != nullptr;
}
inline bool planet_t::has_units() const {
  return _internal_has_units();
}
inline void planet_t::clear_units() {
  if (GetArena() == nullptr && units_ != nullptr) {
    delete units_;
  }
  units_ = nullptr;
}
inline const ::pb_message::game_data::fleets_t& planet_t::_internal_units() const {
  const ::pb_message::game_data::fleets_t* p = units_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::game_data::fleets_t*>(
      &::pb_message::game_data::_fleets_t_default_instance_);
}
inline const ::pb_message::game_data::fleets_t& planet_t::units() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.units)
  return _internal_units();
}
inline void planet_t::unsafe_arena_set_allocated_units(
    ::pb_message::game_data::fleets_t* units) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(units_);
  }
  units_ = units;
  if (units) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.game_data.planet_t.units)
}
inline ::pb_message::game_data::fleets_t* planet_t::release_units() {
  
  ::pb_message::game_data::fleets_t* temp = units_;
  units_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::game_data::fleets_t* planet_t::unsafe_arena_release_units() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.planet_t.units)
  
  ::pb_message::game_data::fleets_t* temp = units_;
  units_ = nullptr;
  return temp;
}
inline ::pb_message::game_data::fleets_t* planet_t::_internal_mutable_units() {
  
  if (units_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::game_data::fleets_t>(GetArena());
    units_ = p;
  }
  return units_;
}
inline ::pb_message::game_data::fleets_t* planet_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.planet_t.units)
  return _internal_mutable_units();
}
inline void planet_t::set_allocated_units(::pb_message::game_data::fleets_t* units) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete units_;
  }
  if (units) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(units);
    if (message_arena != submessage_arena) {
      units = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, units, submessage_arena);
    }
    
  } else {
    
  }
  units_ = units;
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.planet_t.units)
}

// -------------------------------------------------------------------

// hex_zone_fixture_t

// .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
inline void hex_zone_fixture_t::clear_type() {
  type_ = 0;
}
inline ::pb_message::game_data::hex_zone_fixture_t_type_t hex_zone_fixture_t::_internal_type() const {
  return static_cast< ::pb_message::game_data::hex_zone_fixture_t_type_t >(type_);
}
inline ::pb_message::game_data::hex_zone_fixture_t_type_t hex_zone_fixture_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.type)
  return _internal_type();
}
inline void hex_zone_fixture_t::_internal_set_type(::pb_message::game_data::hex_zone_fixture_t_type_t value) {
  
  type_ = value;
}
inline void hex_zone_fixture_t::set_type(::pb_message::game_data::hex_zone_fixture_t_type_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_zone_fixture_t.type)
}

// .pb_message.game_data.unit_t base = 2;
inline bool hex_zone_fixture_t::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool hex_zone_fixture_t::has_base() const {
  return _internal_has_base();
}
inline void hex_zone_fixture_t::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pb_message::game_data::unit_t& hex_zone_fixture_t::_internal_base() const {
  const ::pb_message::game_data::unit_t* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::game_data::unit_t*>(
      &::pb_message::game_data::_unit_t_default_instance_);
}
inline const ::pb_message::game_data::unit_t& hex_zone_fixture_t::base() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.base)
  return _internal_base();
}
inline void hex_zone_fixture_t::unsafe_arena_set_allocated_base(
    ::pb_message::game_data::unit_t* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.game_data.hex_zone_fixture_t.base)
}
inline ::pb_message::game_data::unit_t* hex_zone_fixture_t::release_base() {
  
  ::pb_message::game_data::unit_t* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::game_data::unit_t* hex_zone_fixture_t::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.hex_zone_fixture_t.base)
  
  ::pb_message::game_data::unit_t* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pb_message::game_data::unit_t* hex_zone_fixture_t::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::game_data::unit_t>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pb_message::game_data::unit_t* hex_zone_fixture_t::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_fixture_t.base)
  return _internal_mutable_base();
}
inline void hex_zone_fixture_t::set_allocated_base(::pb_message::game_data::unit_t* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_fixture_t.base)
}

// .pb_message.game_data.planet_t planet = 3;
inline bool hex_zone_fixture_t::_internal_has_planet() const {
  return this != internal_default_instance() && planet_ != nullptr;
}
inline bool hex_zone_fixture_t::has_planet() const {
  return _internal_has_planet();
}
inline void hex_zone_fixture_t::clear_planet() {
  if (GetArena() == nullptr && planet_ != nullptr) {
    delete planet_;
  }
  planet_ = nullptr;
}
inline const ::pb_message::game_data::planet_t& hex_zone_fixture_t::_internal_planet() const {
  const ::pb_message::game_data::planet_t* p = planet_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::game_data::planet_t*>(
      &::pb_message::game_data::_planet_t_default_instance_);
}
inline const ::pb_message::game_data::planet_t& hex_zone_fixture_t::planet() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.planet)
  return _internal_planet();
}
inline void hex_zone_fixture_t::unsafe_arena_set_allocated_planet(
    ::pb_message::game_data::planet_t* planet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planet_);
  }
  planet_ = planet;
  if (planet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.game_data.hex_zone_fixture_t.planet)
}
inline ::pb_message::game_data::planet_t* hex_zone_fixture_t::release_planet() {
  
  ::pb_message::game_data::planet_t* temp = planet_;
  planet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::game_data::planet_t* hex_zone_fixture_t::unsafe_arena_release_planet() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.hex_zone_fixture_t.planet)
  
  ::pb_message::game_data::planet_t* temp = planet_;
  planet_ = nullptr;
  return temp;
}
inline ::pb_message::game_data::planet_t* hex_zone_fixture_t::_internal_mutable_planet() {
  
  if (planet_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::game_data::planet_t>(GetArena());
    planet_ = p;
  }
  return planet_;
}
inline ::pb_message::game_data::planet_t* hex_zone_fixture_t::mutable_planet() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_fixture_t.planet)
  return _internal_mutable_planet();
}
inline void hex_zone_fixture_t::set_allocated_planet(::pb_message::game_data::planet_t* planet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete planet_;
  }
  if (planet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(planet);
    if (message_arena != submessage_arena) {
      planet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planet, submessage_arena);
    }
    
  } else {
    
  }
  planet_ = planet;
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_fixture_t.planet)
}

// -------------------------------------------------------------------

// hex_zone_t

// string name = 1;
inline void hex_zone_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& hex_zone_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_t.name)
  return _internal_name();
}
inline void hex_zone_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_zone_t.name)
}
inline std::string* hex_zone_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_t.name)
  return _internal_mutable_name();
}
inline const std::string& hex_zone_t::_internal_name() const {
  return name_.Get();
}
inline void hex_zone_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void hex_zone_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.game_data.hex_zone_t.name)
}
inline void hex_zone_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.game_data.hex_zone_t.name)
}
inline void hex_zone_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.game_data.hex_zone_t.name)
}
inline std::string* hex_zone_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* hex_zone_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.hex_zone_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void hex_zone_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_t.name)
}

// repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
inline int hex_zone_t::_internal_fixtures_size() const {
  return fixtures_.size();
}
inline int hex_zone_t::fixtures_size() const {
  return _internal_fixtures_size();
}
inline void hex_zone_t::clear_fixtures() {
  fixtures_.Clear();
}
inline ::pb_message::game_data::hex_zone_fixture_t* hex_zone_t::mutable_fixtures(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >*
hex_zone_t::mutable_fixtures() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.hex_zone_t.fixtures)
  return &fixtures_;
}
inline const ::pb_message::game_data::hex_zone_fixture_t& hex_zone_t::_internal_fixtures(int index) const {
  return fixtures_.Get(index);
}
inline const ::pb_message::game_data::hex_zone_fixture_t& hex_zone_t::fixtures(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_t.fixtures)
  return _internal_fixtures(index);
}
inline ::pb_message::game_data::hex_zone_fixture_t* hex_zone_t::_internal_add_fixtures() {
  return fixtures_.Add();
}
inline ::pb_message::game_data::hex_zone_fixture_t* hex_zone_t::add_fixtures() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.hex_zone_t.fixtures)
  return _internal_add_fixtures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >&
hex_zone_t::fixtures() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_;
}

// -------------------------------------------------------------------

// hex_t

// .pb_message.hex_coord_t coord = 1;
inline bool hex_t::_internal_has_coord() const {
  return this != internal_default_instance() && coord_ != nullptr;
}
inline bool hex_t::has_coord() const {
  return _internal_has_coord();
}
inline const ::pb_message::hex_coord_t& hex_t::_internal_coord() const {
  const ::pb_message::hex_coord_t* p = coord_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::hex_coord_t*>(
      &::pb_message::_hex_coord_t_default_instance_);
}
inline const ::pb_message::hex_coord_t& hex_t::coord() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.coord)
  return _internal_coord();
}
inline void hex_t::unsafe_arena_set_allocated_coord(
    ::pb_message::hex_coord_t* coord) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_);
  }
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.game_data.hex_t.coord)
}
inline ::pb_message::hex_coord_t* hex_t::release_coord() {
  
  ::pb_message::hex_coord_t* temp = coord_;
  coord_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::hex_coord_t* hex_t::unsafe_arena_release_coord() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.hex_t.coord)
  
  ::pb_message::hex_coord_t* temp = coord_;
  coord_ = nullptr;
  return temp;
}
inline ::pb_message::hex_coord_t* hex_t::_internal_mutable_coord() {
  
  if (coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::hex_coord_t>(GetArena());
    coord_ = p;
  }
  return coord_;
}
inline ::pb_message::hex_coord_t* hex_t::mutable_coord() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.coord)
  return _internal_mutable_coord();
}
inline void hex_t::set_allocated_coord(::pb_message::hex_coord_t* coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_);
  }
  if (coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord)->GetArena();
    if (message_arena != submessage_arena) {
      coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord, submessage_arena);
    }
    
  } else {
    
  }
  coord_ = coord;
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_t.coord)
}

// int32 province_id = 2;
inline void hex_t::clear_province_id() {
  province_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hex_t::_internal_province_id() const {
  return province_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hex_t::province_id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.province_id)
  return _internal_province_id();
}
inline void hex_t::_internal_set_province_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  province_id_ = value;
}
inline void hex_t::set_province_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_province_id(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_t.province_id)
}

// repeated .pb_message.game_data.hex_zone_t zones = 4;
inline int hex_t::_internal_zones_size() const {
  return zones_.size();
}
inline int hex_t::zones_size() const {
  return _internal_zones_size();
}
inline void hex_t::clear_zones() {
  zones_.Clear();
}
inline ::pb_message::game_data::hex_zone_t* hex_t::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.zones)
  return zones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >*
hex_t::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.hex_t.zones)
  return &zones_;
}
inline const ::pb_message::game_data::hex_zone_t& hex_t::_internal_zones(int index) const {
  return zones_.Get(index);
}
inline const ::pb_message::game_data::hex_zone_t& hex_t::zones(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.zones)
  return _internal_zones(index);
}
inline ::pb_message::game_data::hex_zone_t* hex_t::_internal_add_zones() {
  return zones_.Add();
}
inline ::pb_message::game_data::hex_zone_t* hex_t::add_zones() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.hex_t.zones)
  return _internal_add_zones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >&
hex_t::zones() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.hex_t.zones)
  return zones_;
}

// .pb_message.game_data.fleets_t fleets = 5;
inline bool hex_t::_internal_has_fleets() const {
  return this != internal_default_instance() && fleets_ != nullptr;
}
inline bool hex_t::has_fleets() const {
  return _internal_has_fleets();
}
inline void hex_t::clear_fleets() {
  if (GetArena() == nullptr && fleets_ != nullptr) {
    delete fleets_;
  }
  fleets_ = nullptr;
}
inline const ::pb_message::game_data::fleets_t& hex_t::_internal_fleets() const {
  const ::pb_message::game_data::fleets_t* p = fleets_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::game_data::fleets_t*>(
      &::pb_message::game_data::_fleets_t_default_instance_);
}
inline const ::pb_message::game_data::fleets_t& hex_t::fleets() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.fleets)
  return _internal_fleets();
}
inline void hex_t::unsafe_arena_set_allocated_fleets(
    ::pb_message::game_data::fleets_t* fleets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fleets_);
  }
  fleets_ = fleets;
  if (fleets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.game_data.hex_t.fleets)
}
inline ::pb_message::game_data::fleets_t* hex_t::release_fleets() {
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::game_data::fleets_t* hex_t::unsafe_arena_release_fleets() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.hex_t.fleets)
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = nullptr;
  return temp;
}
inline ::pb_message::game_data::fleets_t* hex_t::_internal_mutable_fleets() {
  
  if (fleets_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::game_data::fleets_t>(GetArena());
    fleets_ = p;
  }
  return fleets_;
}
inline ::pb_message::game_data::fleets_t* hex_t::mutable_fleets() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.fleets)
  return _internal_mutable_fleets();
}
inline void hex_t::set_allocated_fleets(::pb_message::game_data::fleets_t* fleets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fleets_;
  }
  if (fleets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fleets);
    if (message_arena != submessage_arena) {
      fleets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fleets, submessage_arena);
    }
    
  } else {
    
  }
  fleets_ = fleets;
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_t.fleets)
}

// -------------------------------------------------------------------

// province_t

// int32 id = 1;
inline void province_t::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_t::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_t::id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.id)
  return _internal_id();
}
inline void province_t::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void province_t::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.id)
}

// int32 owner = 2;
inline void province_t::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_t::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.owner)
  return _internal_owner();
}
inline void province_t::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void province_t::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.owner)
}

// int32 original_owner = 3;
inline void province_t::clear_original_owner() {
  original_owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_t::_internal_original_owner() const {
  return original_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.original_owner)
  return _internal_original_owner();
}
inline void province_t::_internal_set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_owner_ = value;
}
inline void province_t::set_original_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.original_owner)
}

// -------------------------------------------------------------------

// map_t

// int32 width = 1;
inline void map_t::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::width() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.width)
  return _internal_width();
}
inline void map_t::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void map_t::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.map_t.width)
}

// int32 height = 2;
inline void map_t::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::height() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.height)
  return _internal_height();
}
inline void map_t::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void map_t::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.map_t.height)
}

// repeated .pb_message.game_data.hex_t hexes = 3;
inline int map_t::_internal_hexes_size() const {
  return hexes_.size();
}
inline int map_t::hexes_size() const {
  return _internal_hexes_size();
}
inline void map_t::clear_hexes() {
  hexes_.Clear();
}
inline ::pb_message::game_data::hex_t* map_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.map_t.hexes)
  return hexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_t >*
map_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.map_t.hexes)
  return &hexes_;
}
inline const ::pb_message::game_data::hex_t& map_t::_internal_hexes(int index) const {
  return hexes_.Get(index);
}
inline const ::pb_message::game_data::hex_t& map_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.hexes)
  return _internal_hexes(index);
}
inline ::pb_message::game_data::hex_t* map_t::_internal_add_hexes() {
  return hexes_.Add();
}
inline ::pb_message::game_data::hex_t* map_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.map_t.hexes)
  return _internal_add_hexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::hex_t >&
map_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.map_t.hexes)
  return hexes_;
}

// repeated .pb_message.game_data.province_t provinces = 4;
inline int map_t::_internal_provinces_size() const {
  return provinces_.size();
}
inline int map_t::provinces_size() const {
  return _internal_provinces_size();
}
inline void map_t::clear_provinces() {
  provinces_.Clear();
}
inline ::pb_message::game_data::province_t* map_t::mutable_provinces(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.map_t.provinces)
  return provinces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::province_t >*
map_t::mutable_provinces() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.map_t.provinces)
  return &provinces_;
}
inline const ::pb_message::game_data::province_t& map_t::_internal_provinces(int index) const {
  return provinces_.Get(index);
}
inline const ::pb_message::game_data::province_t& map_t::provinces(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.provinces)
  return _internal_provinces(index);
}
inline ::pb_message::game_data::province_t* map_t::_internal_add_provinces() {
  return provinces_.Add();
}
inline ::pb_message::game_data::province_t* map_t::add_provinces() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.map_t.provinces)
  return _internal_add_provinces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::game_data::province_t >&
map_t::provinces() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.map_t.provinces)
  return provinces_;
}

// -------------------------------------------------------------------

// offmap_area_t

// int32 owner = 1;
inline void offmap_area_t::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_area_t::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_area_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.offmap_area_t.owner)
  return _internal_owner();
}
inline void offmap_area_t::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void offmap_area_t::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.offmap_area_t.owner)
}

// .pb_message.game_data.fleets_t fleets = 2;
inline bool offmap_area_t::_internal_has_fleets() const {
  return this != internal_default_instance() && fleets_ != nullptr;
}
inline bool offmap_area_t::has_fleets() const {
  return _internal_has_fleets();
}
inline void offmap_area_t::clear_fleets() {
  if (GetArena() == nullptr && fleets_ != nullptr) {
    delete fleets_;
  }
  fleets_ = nullptr;
}
inline const ::pb_message::game_data::fleets_t& offmap_area_t::_internal_fleets() const {
  const ::pb_message::game_data::fleets_t* p = fleets_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::game_data::fleets_t*>(
      &::pb_message::game_data::_fleets_t_default_instance_);
}
inline const ::pb_message::game_data::fleets_t& offmap_area_t::fleets() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.offmap_area_t.fleets)
  return _internal_fleets();
}
inline void offmap_area_t::unsafe_arena_set_allocated_fleets(
    ::pb_message::game_data::fleets_t* fleets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fleets_);
  }
  fleets_ = fleets;
  if (fleets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.game_data.offmap_area_t.fleets)
}
inline ::pb_message::game_data::fleets_t* offmap_area_t::release_fleets() {
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::game_data::fleets_t* offmap_area_t::unsafe_arena_release_fleets() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.offmap_area_t.fleets)
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = nullptr;
  return temp;
}
inline ::pb_message::game_data::fleets_t* offmap_area_t::_internal_mutable_fleets() {
  
  if (fleets_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::game_data::fleets_t>(GetArena());
    fleets_ = p;
  }
  return fleets_;
}
inline ::pb_message::game_data::fleets_t* offmap_area_t::mutable_fleets() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.offmap_area_t.fleets)
  return _internal_mutable_fleets();
}
inline void offmap_area_t::set_allocated_fleets(::pb_message::game_data::fleets_t* fleets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fleets_;
  }
  if (fleets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fleets);
    if (message_arena != submessage_arena) {
      fleets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fleets, submessage_arena);
    }
    
  } else {
    
  }
  fleets_ = fleets;
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.offmap_area_t.fleets)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// offmap_areas_t

// map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
inline int offmap_areas_t::_internal_areas_size() const {
  return areas_.size();
}
inline int offmap_areas_t::areas_size() const {
  return _internal_areas_size();
}
inline void offmap_areas_t::clear_areas() {
  areas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >&
offmap_areas_t::_internal_areas() const {
  return areas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >&
offmap_areas_t::areas() const {
  // @@protoc_insertion_point(field_map:pb_message.game_data.offmap_areas_t.areas)
  return _internal_areas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >*
offmap_areas_t::_internal_mutable_areas() {
  return areas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >*
offmap_areas_t::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.game_data.offmap_areas_t.areas)
  return _internal_mutable_areas();
}

// -------------------------------------------------------------------

// team_t

// string name = 1;
inline void team_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& team_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.team_t.name)
  return _internal_name();
}
inline void team_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.team_t.name)
}
inline std::string* team_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.team_t.name)
  return _internal_mutable_name();
}
inline const std::string& team_t::_internal_name() const {
  return name_.Get();
}
inline void team_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void team_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.game_data.team_t.name)
}
inline void team_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.game_data.team_t.name)
}
inline void team_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.game_data.team_t.name)
}
inline std::string* team_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* team_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.game_data.team_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void team_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.team_t.name)
}

// repeated int32 nations = 2;
inline int team_t::_internal_nations_size() const {
  return nations_.size();
}
inline int team_t::nations_size() const {
  return _internal_nations_size();
}
inline void team_t::clear_nations() {
  nations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 team_t::_internal_nations(int index) const {
  return nations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 team_t::nations(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.team_t.nations)
  return _internal_nations(index);
}
inline void team_t::set_nations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  nations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.team_t.nations)
}
inline void team_t::_internal_add_nations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  nations_.Add(value);
}
inline void team_t::add_nations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_nations(value);
  // @@protoc_insertion_point(field_add:pb_message.game_data.team_t.nations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
team_t::_internal_nations() const {
  return nations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
team_t::nations() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.team_t.nations)
  return _internal_nations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
team_t::_internal_mutable_nations() {
  return &nations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
team_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.team_t.nations)
  return _internal_mutable_nations();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_data
}  // namespace pb_message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb_message::game_data::planet_t_type_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::game_data::planet_t_type_t>() {
  return ::pb_message::game_data::planet_t_type_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::game_data::hex_zone_fixture_t_type_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::game_data::hex_zone_fixture_t_type_t>() {
  return ::pb_message::game_data::hex_zone_fixture_t_type_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fdata_2eproto
