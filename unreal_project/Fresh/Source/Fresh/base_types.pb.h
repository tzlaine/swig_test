// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_types.proto

#ifndef PROTOBUF_base_5ftypes_2eproto__INCLUDED
#define PROTOBUF_base_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb_message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_base_5ftypes_2eproto();
void protobuf_AssignDesc_base_5ftypes_2eproto();
void protobuf_ShutdownFile_base_5ftypes_2eproto();

class hex_coord_t;
class turn_t;

enum season_t {
  spring = 0,
  fall = 1,
  season_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  season_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool season_t_IsValid(int value);
const season_t season_t_MIN = spring;
const season_t season_t_MAX = fall;
const int season_t_ARRAYSIZE = season_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* season_t_descriptor();
inline const ::std::string& season_t_Name(season_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    season_t_descriptor(), value);
}
inline bool season_t_Parse(
    const ::std::string& name, season_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<season_t>(
    season_t_descriptor(), name, value);
}
enum tug_mission_t {
  no_mission = 0,
  A_battle = 1,
  B_carrier = 2,
  C_mobile_base = 3,
  D_supply = 4,
  E_repair = 5,
  F_tow_frd = 6,
  G_pft = 7,
  H_economic_transfer = 8,
  I_crippled = 9,
  J1_base_repair = 10,
  J2_base_upgrade = 11,
  K1_pdu_transport = 12,
  K2_pdu_upgrade = 13,
  L_drone = 14,
  M_vanilla = 15,
  O_hydran_special_supply = 16,
  tug_mission_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tug_mission_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tug_mission_t_IsValid(int value);
const tug_mission_t tug_mission_t_MIN = no_mission;
const tug_mission_t tug_mission_t_MAX = O_hydran_special_supply;
const int tug_mission_t_ARRAYSIZE = tug_mission_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* tug_mission_t_descriptor();
inline const ::std::string& tug_mission_t_Name(tug_mission_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    tug_mission_t_descriptor(), value);
}
inline bool tug_mission_t_Parse(
    const ::std::string& name, tug_mission_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tug_mission_t>(
    tug_mission_t_descriptor(), name, value);
}
enum carrier_type_t {
  not_a_carrier = 0,
  single_ship_carrier = 1,
  light_carrier = 2,
  medium_carrier = 3,
  heavy_carrier = 4,
  carrier_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  carrier_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool carrier_type_t_IsValid(int value);
const carrier_type_t carrier_type_t_MIN = not_a_carrier;
const carrier_type_t carrier_type_t_MAX = heavy_carrier;
const int carrier_type_t_ARRAYSIZE = carrier_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* carrier_type_t_descriptor();
inline const ::std::string& carrier_type_t_Name(carrier_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    carrier_type_t_descriptor(), value);
}
inline bool carrier_type_t_Parse(
    const ::std::string& name, carrier_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<carrier_type_t>(
    carrier_type_t_descriptor(), name, value);
}
enum escort_type_t {
  not_an_escort = 0,
  light_escort = 1,
  heavy_escort = 2,
  escort_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  escort_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool escort_type_t_IsValid(int value);
const escort_type_t escort_type_t_MIN = not_an_escort;
const escort_type_t escort_type_t_MAX = heavy_escort;
const int escort_type_t_ARRAYSIZE = escort_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* escort_type_t_descriptor();
inline const ::std::string& escort_type_t_Name(escort_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    escort_type_t_descriptor(), value);
}
inline bool escort_type_t_Parse(
    const ::std::string& name, escort_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<escort_type_t>(
    escort_type_t_descriptor(), name, value);
}
enum war_footing_t {
  war = 0,
  limited_war = 1,
  peace = 2,
  war_footing_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  war_footing_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool war_footing_t_IsValid(int value);
const war_footing_t war_footing_t_MIN = war;
const war_footing_t war_footing_t_MAX = peace;
const int war_footing_t_ARRAYSIZE = war_footing_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* war_footing_t_descriptor();
inline const ::std::string& war_footing_t_Name(war_footing_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    war_footing_t_descriptor(), value);
}
inline bool war_footing_t_Parse(
    const ::std::string& name, war_footing_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<war_footing_t>(
    war_footing_t_descriptor(), name, value);
}
// ===================================================================

class turn_t : public ::google::protobuf::Message {
 public:
  turn_t();
  virtual ~turn_t();

  turn_t(const turn_t& from);

  inline turn_t& operator=(const turn_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const turn_t& default_instance();

  void Swap(turn_t* other);

  // implements Message ----------------------------------------------

  inline turn_t* New() const { return New(NULL); }

  turn_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const turn_t& from);
  void MergeFrom(const turn_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(turn_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // optional .pb_message.season_t season = 2;
  void clear_season();
  static const int kSeasonFieldNumber = 2;
  ::pb_message::season_t season() const;
  void set_season(::pb_message::season_t value);

  // @@protoc_insertion_point(class_scope:pb_message.turn_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 year_;
  int season_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_base_5ftypes_2eproto();
  friend void protobuf_AssignDesc_base_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_base_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static turn_t* default_instance_;
};
// -------------------------------------------------------------------

class hex_coord_t : public ::google::protobuf::Message {
 public:
  hex_coord_t();
  virtual ~hex_coord_t();

  hex_coord_t(const hex_coord_t& from);

  inline hex_coord_t& operator=(const hex_coord_t& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hex_coord_t& default_instance();

  void Swap(hex_coord_t* other);

  // implements Message ----------------------------------------------

  inline hex_coord_t* New() const { return New(NULL); }

  hex_coord_t* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hex_coord_t& from);
  void MergeFrom(const hex_coord_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hex_coord_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_message.hex_coord_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_base_5ftypes_2eproto();
  friend void protobuf_AssignDesc_base_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_base_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static hex_coord_t* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// turn_t

// optional int32 year = 1;
inline void turn_t::clear_year() {
  year_ = 0;
}
inline ::google::protobuf::int32 turn_t::year() const {
  // @@protoc_insertion_point(field_get:pb_message.turn_t.year)
  return year_;
}
inline void turn_t::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:pb_message.turn_t.year)
}

// optional .pb_message.season_t season = 2;
inline void turn_t::clear_season() {
  season_ = 0;
}
inline ::pb_message::season_t turn_t::season() const {
  // @@protoc_insertion_point(field_get:pb_message.turn_t.season)
  return static_cast< ::pb_message::season_t >(season_);
}
inline void turn_t::set_season(::pb_message::season_t value) {
  
  season_ = value;
  // @@protoc_insertion_point(field_set:pb_message.turn_t.season)
}

// -------------------------------------------------------------------

// hex_coord_t

// optional int32 x = 1;
inline void hex_coord_t::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 hex_coord_t::x() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_coord_t.x)
  return x_;
}
inline void hex_coord_t::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:pb_message.hex_coord_t.x)
}

// optional int32 y = 2;
inline void hex_coord_t::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 hex_coord_t::y() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_coord_t.y)
  return y_;
}
inline void hex_coord_t::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:pb_message.hex_coord_t.y)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb_message::season_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::season_t>() {
  return ::pb_message::season_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::tug_mission_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::tug_mission_t>() {
  return ::pb_message::tug_mission_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::carrier_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::carrier_type_t>() {
  return ::pb_message::carrier_type_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::escort_type_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::escort_type_t>() {
  return ::pb_message::escort_type_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::war_footing_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::war_footing_t>() {
  return ::pb_message::war_footing_t_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_5ftypes_2eproto__INCLUDED
