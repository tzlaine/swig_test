// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb_message {
namespace game_data {

namespace {

const ::google::protobuf::Descriptor* unit_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* fleet_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fleet_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* fleets_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fleets_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* fleets_t_FleetsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* planet_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  planet_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* planet_t_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hex_zone_fixture_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hex_zone_fixture_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* hex_zone_fixture_t_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hex_zone_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hex_zone_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* hex_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hex_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* offmap_area_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offmap_area_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* offmap_areas_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offmap_areas_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* offmap_areas_t_AreasEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* team_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fdata_2eproto() {
  protobuf_AddDesc_game_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_data.proto");
  GOOGLE_CHECK(file != NULL);
  unit_t_descriptor_ = file->message_type(0);
  static const int unit_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, unit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, original_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, fighters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, pfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, tug_mission_),
  };
  unit_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      unit_t_descriptor_,
      unit_t::default_instance_,
      unit_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(unit_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_t, _is_default_instance_));
  fleet_t_descriptor_ = file->message_type(1);
  static const int fleet_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleet_t, units_),
  };
  fleet_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      fleet_t_descriptor_,
      fleet_t::default_instance_,
      fleet_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(fleet_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleet_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleet_t, _is_default_instance_));
  fleets_t_descriptor_ = file->message_type(2);
  static const int fleets_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleets_t, fleets_),
  };
  fleets_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      fleets_t_descriptor_,
      fleets_t::default_instance_,
      fleets_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(fleets_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleets_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleets_t, _is_default_instance_));
  fleets_t_FleetsEntry_descriptor_ = fleets_t_descriptor_->nested_type(0);
  planet_t_descriptor_ = file->message_type(3);
  static const int planet_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planet_t, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planet_t, original_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planet_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planet_t, units_),
  };
  planet_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      planet_t_descriptor_,
      planet_t::default_instance_,
      planet_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(planet_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planet_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(planet_t, _is_default_instance_));
  planet_t_type_t_descriptor_ = planet_t_descriptor_->enum_type(0);
  hex_zone_fixture_t_descriptor_ = file->message_type(4);
  static const int hex_zone_fixture_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_fixture_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_fixture_t, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_fixture_t, planet_),
  };
  hex_zone_fixture_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hex_zone_fixture_t_descriptor_,
      hex_zone_fixture_t::default_instance_,
      hex_zone_fixture_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(hex_zone_fixture_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_fixture_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_fixture_t, _is_default_instance_));
  hex_zone_fixture_t_type_t_descriptor_ = hex_zone_fixture_t_descriptor_->enum_type(0);
  hex_zone_t_descriptor_ = file->message_type(5);
  static const int hex_zone_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_t, fixtures_),
  };
  hex_zone_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hex_zone_t_descriptor_,
      hex_zone_t::default_instance_,
      hex_zone_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(hex_zone_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_zone_t, _is_default_instance_));
  hex_t_descriptor_ = file->message_type(6);
  static const int hex_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, province_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, zones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, fleets_),
  };
  hex_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hex_t_descriptor_,
      hex_t::default_instance_,
      hex_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(hex_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, _is_default_instance_));
  province_t_descriptor_ = file->message_type(7);
  static const int province_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, original_owner_),
  };
  province_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      province_t_descriptor_,
      province_t::default_instance_,
      province_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(province_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, _is_default_instance_));
  map_t_descriptor_ = file->message_type(8);
  static const int map_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, hexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, provinces_),
  };
  map_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_t_descriptor_,
      map_t::default_instance_,
      map_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(map_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, _is_default_instance_));
  offmap_area_t_descriptor_ = file->message_type(9);
  static const int offmap_area_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, fleets_),
  };
  offmap_area_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      offmap_area_t_descriptor_,
      offmap_area_t::default_instance_,
      offmap_area_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(offmap_area_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, _is_default_instance_));
  offmap_areas_t_descriptor_ = file->message_type(10);
  static const int offmap_areas_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_areas_t, areas_),
  };
  offmap_areas_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      offmap_areas_t_descriptor_,
      offmap_areas_t::default_instance_,
      offmap_areas_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(offmap_areas_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_areas_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_areas_t, _is_default_instance_));
  offmap_areas_t_AreasEntry_descriptor_ = offmap_areas_t_descriptor_->nested_type(0);
  team_t_descriptor_ = file->message_type(11);
  static const int team_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, nations_),
  };
  team_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      team_t_descriptor_,
      team_t::default_instance_,
      team_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(team_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      unit_t_descriptor_, &unit_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      fleet_t_descriptor_, &fleet_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      fleets_t_descriptor_, &fleets_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        fleets_t_FleetsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::pb_message::game_data::fleet_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                fleets_t_FleetsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      planet_t_descriptor_, &planet_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hex_zone_fixture_t_descriptor_, &hex_zone_fixture_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hex_zone_t_descriptor_, &hex_zone_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hex_t_descriptor_, &hex_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      province_t_descriptor_, &province_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_t_descriptor_, &map_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      offmap_area_t_descriptor_, &offmap_area_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      offmap_areas_t_descriptor_, &offmap_areas_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        offmap_areas_t_AreasEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::pb_message::game_data::offmap_area_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                offmap_areas_t_AreasEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      team_t_descriptor_, &team_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fdata_2eproto() {
  delete unit_t::default_instance_;
  delete unit_t_reflection_;
  delete fleet_t::default_instance_;
  delete fleet_t_reflection_;
  delete fleets_t::default_instance_;
  delete fleets_t_reflection_;
  delete planet_t::default_instance_;
  delete planet_t_reflection_;
  delete hex_zone_fixture_t::default_instance_;
  delete hex_zone_fixture_t_reflection_;
  delete hex_zone_t::default_instance_;
  delete hex_zone_t_reflection_;
  delete hex_t::default_instance_;
  delete hex_t_reflection_;
  delete province_t::default_instance_;
  delete province_t_reflection_;
  delete map_t::default_instance_;
  delete map_t_reflection_;
  delete offmap_area_t::default_instance_;
  delete offmap_area_t_reflection_;
  delete offmap_areas_t::default_instance_;
  delete offmap_areas_t_reflection_;
  delete team_t::default_instance_;
  delete team_t_reflection_;
}

void protobuf_AddDesc_game_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb_message::protobuf_AddDesc_base_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017game_data.proto\022\024pb_message.game_data\032"
    "\020base_types.proto\"\217\001\n\006unit_t\022\017\n\007unit_id\030"
    "\001 \001(\005\022\r\n\005owner\030\002 \001(\005\022\026\n\016original_owner\030\003"
    " \001(\005\022\020\n\010fighters\030\004 \001(\005\022\013\n\003pfs\030\005 \001(\005\022.\n\013t"
    "ug_mission\030\006 \001(\0162\031.pb_message.tug_missio"
    "n_t\"6\n\007fleet_t\022+\n\005units\030\001 \003(\0132\034.pb_messa"
    "ge.game_data.unit_t\"\224\001\n\010fleets_t\022:\n\006flee"
    "ts\030\001 \003(\0132*.pb_message.game_data.fleets_t"
    ".FleetsEntry\032L\n\013FleetsEntry\022\013\n\003key\030\001 \001(\005"
    "\022,\n\005value\030\002 \001(\0132\035.pb_message.game_data.f"
    "leet_t:\0028\001\"\302\001\n\010planet_t\022\r\n\005owner\030\001 \001(\005\022\026"
    "\n\016original_owner\030\002 \001(\005\0223\n\004type\030\003 \001(\0162%.p"
    "b_message.game_data.planet_t.type_t\022-\n\005u"
    "nits\030\004 \001(\0132\036.pb_message.game_data.fleets"
    "_t\"+\n\006type_t\022\t\n\005minor\020\000\022\t\n\005major\020\001\022\013\n\007ca"
    "pital\020\002\"\331\001\n\022hex_zone_fixture_t\022=\n\004type\030\001"
    " \001(\0162/.pb_message.game_data.hex_zone_fix"
    "ture_t.type_t\022*\n\004base\030\002 \001(\0132\034.pb_message"
    ".game_data.unit_t\022.\n\006planet\030\003 \001(\0132\036.pb_m"
    "essage.game_data.planet_t\"(\n\006type_t\022\r\n\tt"
    "ype_base\020\000\022\017\n\013type_planet\020\001\"V\n\nhex_zone_"
    "t\022\014\n\004name\030\001 \001(\t\022:\n\010fixtures\030\002 \003(\0132(.pb_m"
    "essage.game_data.hex_zone_fixture_t\"\245\001\n\005"
    "hex_t\022&\n\005coord\030\001 \001(\0132\027.pb_message.hex_co"
    "ord_t\022\023\n\013province_id\030\002 \001(\005\022/\n\005zones\030\004 \003("
    "\0132 .pb_message.game_data.hex_zone_t\022.\n\006f"
    "leets\030\005 \001(\0132\036.pb_message.game_data.fleet"
    "s_t\"\?\n\nprovince_t\022\n\n\002id\030\001 \001(\005\022\r\n\005owner\030\002"
    " \001(\005\022\026\n\016original_owner\030\003 \001(\005\"\207\001\n\005map_t\022\r"
    "\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022*\n\005hexes\030\003"
    " \003(\0132\033.pb_message.game_data.hex_t\0223\n\tpro"
    "vinces\030\004 \003(\0132 .pb_message.game_data.prov"
    "ince_t\"N\n\roffmap_area_t\022\r\n\005owner\030\001 \001(\005\022."
    "\n\006fleets\030\002 \001(\0132\036.pb_message.game_data.fl"
    "eets_t\"\243\001\n\016offmap_areas_t\022>\n\005areas\030\001 \003(\013"
    "2/.pb_message.game_data.offmap_areas_t.A"
    "reasEntry\032Q\n\nAreasEntry\022\013\n\003key\030\001 \001(\005\0222\n\005"
    "value\030\002 \001(\0132#.pb_message.game_data.offma"
    "p_area_t:\0028\001\"\'\n\006team_t\022\014\n\004name\030\001 \001(\t\022\017\n\007"
    "nations\030\002 \003(\005b\006proto3", 1581);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_data.proto", &protobuf_RegisterTypes);
  unit_t::default_instance_ = new unit_t();
  fleet_t::default_instance_ = new fleet_t();
  fleets_t::default_instance_ = new fleets_t();
  planet_t::default_instance_ = new planet_t();
  hex_zone_fixture_t::default_instance_ = new hex_zone_fixture_t();
  hex_zone_t::default_instance_ = new hex_zone_t();
  hex_t::default_instance_ = new hex_t();
  province_t::default_instance_ = new province_t();
  map_t::default_instance_ = new map_t();
  offmap_area_t::default_instance_ = new offmap_area_t();
  offmap_areas_t::default_instance_ = new offmap_areas_t();
  team_t::default_instance_ = new team_t();
  unit_t::default_instance_->InitAsDefaultInstance();
  fleet_t::default_instance_->InitAsDefaultInstance();
  fleets_t::default_instance_->InitAsDefaultInstance();
  planet_t::default_instance_->InitAsDefaultInstance();
  hex_zone_fixture_t::default_instance_->InitAsDefaultInstance();
  hex_zone_t::default_instance_->InitAsDefaultInstance();
  hex_t::default_instance_->InitAsDefaultInstance();
  province_t::default_instance_->InitAsDefaultInstance();
  map_t::default_instance_->InitAsDefaultInstance();
  offmap_area_t::default_instance_->InitAsDefaultInstance();
  offmap_areas_t::default_instance_->InitAsDefaultInstance();
  team_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fdata_2eproto {
  StaticDescriptorInitializer_game_5fdata_2eproto() {
    protobuf_AddDesc_game_5fdata_2eproto();
  }
} static_descriptor_initializer_game_5fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unit_t::kUnitIdFieldNumber;
const int unit_t::kOwnerFieldNumber;
const int unit_t::kOriginalOwnerFieldNumber;
const int unit_t::kFightersFieldNumber;
const int unit_t::kPfsFieldNumber;
const int unit_t::kTugMissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unit_t::unit_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.unit_t)
}

void unit_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

unit_t::unit_t(const unit_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.unit_t)
}

void unit_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  unit_id_ = 0;
  owner_ = 0;
  original_owner_ = 0;
  fighters_ = 0;
  pfs_ = 0;
  tug_mission_ = 0;
}

unit_t::~unit_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.unit_t)
  SharedDtor();
}

void unit_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_t_descriptor_;
}

const unit_t& unit_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

unit_t* unit_t::default_instance_ = NULL;

unit_t* unit_t::New(::google::protobuf::Arena* arena) const {
  unit_t* n = new unit_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unit_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<unit_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(unit_id_, tug_mission_);

#undef ZR_HELPER_
#undef ZR_

}

bool unit_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.unit_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unit_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional int32 owner = 2;
      case 2: {
        if (tag == 16) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_original_owner;
        break;
      }

      // optional int32 original_owner = 3;
      case 3: {
        if (tag == 24) {
         parse_original_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fighters;
        break;
      }

      // optional int32 fighters = 4;
      case 4: {
        if (tag == 32) {
         parse_fighters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighters_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pfs;
        break;
      }

      // optional int32 pfs = 5;
      case 5: {
        if (tag == 40) {
         parse_pfs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pfs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tug_mission;
        break;
      }

      // optional .pb_message.tug_mission_t tug_mission = 6;
      case 6: {
        if (tag == 48) {
         parse_tug_mission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tug_mission(static_cast< ::pb_message::tug_mission_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.unit_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.unit_t)
  return false;
#undef DO_
}

void unit_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.unit_t)
  // optional int32 unit_id = 1;
  if (this->unit_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unit_id(), output);
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->owner(), output);
  }

  // optional int32 original_owner = 3;
  if (this->original_owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->original_owner(), output);
  }

  // optional int32 fighters = 4;
  if (this->fighters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fighters(), output);
  }

  // optional int32 pfs = 5;
  if (this->pfs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pfs(), output);
  }

  // optional .pb_message.tug_mission_t tug_mission = 6;
  if (this->tug_mission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tug_mission(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.unit_t)
}

::google::protobuf::uint8* unit_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.unit_t)
  // optional int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unit_id(), target);
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->owner(), target);
  }

  // optional int32 original_owner = 3;
  if (this->original_owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->original_owner(), target);
  }

  // optional int32 fighters = 4;
  if (this->fighters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fighters(), target);
  }

  // optional int32 pfs = 5;
  if (this->pfs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pfs(), target);
  }

  // optional .pb_message.tug_mission_t tug_mission = 6;
  if (this->tug_mission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tug_mission(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.unit_t)
  return target;
}

int unit_t::ByteSize() const {
  int total_size = 0;

  // optional int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unit_id());
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner());
  }

  // optional int32 original_owner = 3;
  if (this->original_owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->original_owner());
  }

  // optional int32 fighters = 4;
  if (this->fighters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fighters());
  }

  // optional int32 pfs = 5;
  if (this->pfs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pfs());
  }

  // optional .pb_message.tug_mission_t tug_mission = 6;
  if (this->tug_mission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tug_mission());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const unit_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const unit_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_t::MergeFrom(const unit_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.unit_id() != 0) {
    set_unit_id(from.unit_id());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.original_owner() != 0) {
    set_original_owner(from.original_owner());
  }
  if (from.fighters() != 0) {
    set_fighters(from.fighters());
  }
  if (from.pfs() != 0) {
    set_pfs(from.pfs());
  }
  if (from.tug_mission() != 0) {
    set_tug_mission(from.tug_mission());
  }
}

void unit_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_t::CopyFrom(const unit_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_t::IsInitialized() const {

  return true;
}

void unit_t::Swap(unit_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unit_t::InternalSwap(unit_t* other) {
  std::swap(unit_id_, other->unit_id_);
  std::swap(owner_, other->owner_);
  std::swap(original_owner_, other->original_owner_);
  std::swap(fighters_, other->fighters_);
  std::swap(pfs_, other->pfs_);
  std::swap(tug_mission_, other->tug_mission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unit_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_t_descriptor_;
  metadata.reflection = unit_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unit_t

// optional int32 unit_id = 1;
void unit_t::clear_unit_id() {
  unit_id_ = 0;
}
 ::google::protobuf::int32 unit_t::unit_id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.unit_id)
  return unit_id_;
}
 void unit_t::set_unit_id(::google::protobuf::int32 value) {
  
  unit_id_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.unit_id)
}

// optional int32 owner = 2;
void unit_t::clear_owner() {
  owner_ = 0;
}
 ::google::protobuf::int32 unit_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.owner)
  return owner_;
}
 void unit_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.owner)
}

// optional int32 original_owner = 3;
void unit_t::clear_original_owner() {
  original_owner_ = 0;
}
 ::google::protobuf::int32 unit_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.original_owner)
  return original_owner_;
}
 void unit_t::set_original_owner(::google::protobuf::int32 value) {
  
  original_owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.original_owner)
}

// optional int32 fighters = 4;
void unit_t::clear_fighters() {
  fighters_ = 0;
}
 ::google::protobuf::int32 unit_t::fighters() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.fighters)
  return fighters_;
}
 void unit_t::set_fighters(::google::protobuf::int32 value) {
  
  fighters_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.fighters)
}

// optional int32 pfs = 5;
void unit_t::clear_pfs() {
  pfs_ = 0;
}
 ::google::protobuf::int32 unit_t::pfs() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.pfs)
  return pfs_;
}
 void unit_t::set_pfs(::google::protobuf::int32 value) {
  
  pfs_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.pfs)
}

// optional .pb_message.tug_mission_t tug_mission = 6;
void unit_t::clear_tug_mission() {
  tug_mission_ = 0;
}
 ::pb_message::tug_mission_t unit_t::tug_mission() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.unit_t.tug_mission)
  return static_cast< ::pb_message::tug_mission_t >(tug_mission_);
}
 void unit_t::set_tug_mission(::pb_message::tug_mission_t value) {
  
  tug_mission_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.unit_t.tug_mission)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fleet_t::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fleet_t::fleet_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.fleet_t)
}

void fleet_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

fleet_t::fleet_t(const fleet_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.fleet_t)
}

void fleet_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

fleet_t::~fleet_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.fleet_t)
  SharedDtor();
}

void fleet_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fleet_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fleet_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fleet_t_descriptor_;
}

const fleet_t& fleet_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

fleet_t* fleet_t::default_instance_ = NULL;

fleet_t* fleet_t::New(::google::protobuf::Arena* arena) const {
  fleet_t* n = new fleet_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fleet_t::Clear() {
  units_.Clear();
}

bool fleet_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.fleet_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_message.game_data.unit_t units = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_units;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.fleet_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.fleet_t)
  return false;
#undef DO_
}

void fleet_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.fleet_t)
  // repeated .pb_message.game_data.unit_t units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.fleet_t)
}

::google::protobuf::uint8* fleet_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.fleet_t)
  // repeated .pb_message.game_data.unit_t units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->units(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.fleet_t)
  return target;
}

int fleet_t::ByteSize() const {
  int total_size = 0;

  // repeated .pb_message.game_data.unit_t units = 1;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fleet_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const fleet_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const fleet_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fleet_t::MergeFrom(const fleet_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  units_.MergeFrom(from.units_);
}

void fleet_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fleet_t::CopyFrom(const fleet_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fleet_t::IsInitialized() const {

  return true;
}

void fleet_t::Swap(fleet_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fleet_t::InternalSwap(fleet_t* other) {
  units_.UnsafeArenaSwap(&other->units_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fleet_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fleet_t_descriptor_;
  metadata.reflection = fleet_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fleet_t

// repeated .pb_message.game_data.unit_t units = 1;
int fleet_t::units_size() const {
  return units_.size();
}
void fleet_t::clear_units() {
  units_.Clear();
}
const ::pb_message::game_data::unit_t& fleet_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.fleet_t.units)
  return units_.Get(index);
}
::pb_message::game_data::unit_t* fleet_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.fleet_t.units)
  return units_.Mutable(index);
}
::pb_message::game_data::unit_t* fleet_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.fleet_t.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::game_data::unit_t >*
fleet_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.fleet_t.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::unit_t >&
fleet_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.fleet_t.units)
  return units_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fleets_t::kFleetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fleets_t::fleets_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.fleets_t)
}

void fleets_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

fleets_t::fleets_t(const fleets_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.fleets_t)
}

void fleets_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fleets_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  fleets_.SetEntryDescriptor(
      &::pb_message::game_data::fleets_t_FleetsEntry_descriptor_);
}

fleets_t::~fleets_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.fleets_t)
  SharedDtor();
}

void fleets_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fleets_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fleets_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fleets_t_descriptor_;
}

const fleets_t& fleets_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

fleets_t* fleets_t::default_instance_ = NULL;

fleets_t* fleets_t::New(::google::protobuf::Arena* arena) const {
  fleets_t* n = new fleets_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fleets_t::Clear() {
  fleets_.Clear();
}

bool fleets_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.fleets_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_fleets:
          ::google::protobuf::scoped_ptr<fleets_t_FleetsEntry> entry(fleets_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_fleets())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_fleets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.fleets_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.fleets_t)
  return false;
#undef DO_
}

void fleets_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.fleets_t)
  // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
  {
    ::google::protobuf::scoped_ptr<fleets_t_FleetsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >::const_iterator
        it = this->fleets().begin();
        it != this->fleets().end(); ++it) {
      entry.reset(fleets_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.fleets_t)
}

::google::protobuf::uint8* fleets_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.fleets_t)
  // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
  {
    ::google::protobuf::scoped_ptr<fleets_t_FleetsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >::const_iterator
        it = this->fleets().begin();
        it != this->fleets().end(); ++it) {
      entry.reset(fleets_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.fleets_t)
  return target;
}

int fleets_t::ByteSize() const {
  int total_size = 0;

  // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
  total_size += 1 * this->fleets_size();
  {
    ::google::protobuf::scoped_ptr<fleets_t_FleetsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >::const_iterator
        it = this->fleets().begin();
        it != this->fleets().end(); ++it) {
      entry.reset(fleets_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fleets_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const fleets_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const fleets_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fleets_t::MergeFrom(const fleets_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fleets_.MergeFrom(from.fleets_);
}

void fleets_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fleets_t::CopyFrom(const fleets_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fleets_t::IsInitialized() const {

  return true;
}

void fleets_t::Swap(fleets_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fleets_t::InternalSwap(fleets_t* other) {
  fleets_.Swap(&other->fleets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fleets_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fleets_t_descriptor_;
  metadata.reflection = fleets_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fleets_t

// map<int32, .pb_message.game_data.fleet_t> fleets = 1;
int fleets_t::fleets_size() const {
  return fleets_.size();
}
void fleets_t::clear_fleets() {
  fleets_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >&
fleets_t::fleets() const {
  // @@protoc_insertion_point(field_map:pb_message.game_data.fleets_t.fleets)
  return fleets_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::fleet_t >*
fleets_t::mutable_fleets() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.game_data.fleets_t.fleets)
  return fleets_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* planet_t_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planet_t_type_t_descriptor_;
}
bool planet_t_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const planet_t_type_t planet_t::minor;
const planet_t_type_t planet_t::major;
const planet_t_type_t planet_t::capital;
const planet_t_type_t planet_t::type_t_MIN;
const planet_t_type_t planet_t::type_t_MAX;
const int planet_t::type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int planet_t::kOwnerFieldNumber;
const int planet_t::kOriginalOwnerFieldNumber;
const int planet_t::kTypeFieldNumber;
const int planet_t::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

planet_t::planet_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.planet_t)
}

void planet_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  units_ = const_cast< ::pb_message::game_data::fleets_t*>(&::pb_message::game_data::fleets_t::default_instance());
}

planet_t::planet_t(const planet_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.planet_t)
}

void planet_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  owner_ = 0;
  original_owner_ = 0;
  type_ = 0;
  units_ = NULL;
}

planet_t::~planet_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.planet_t)
  SharedDtor();
}

void planet_t::SharedDtor() {
  if (this != default_instance_) {
    delete units_;
  }
}

void planet_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* planet_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return planet_t_descriptor_;
}

const planet_t& planet_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

planet_t* planet_t::default_instance_ = NULL;

planet_t* planet_t::New(::google::protobuf::Arena* arena) const {
  planet_t* n = new planet_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void planet_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<planet_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(owner_, original_owner_);
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && units_ != NULL) delete units_;
  units_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool planet_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.planet_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 owner = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_original_owner;
        break;
      }

      // optional int32 original_owner = 2;
      case 2: {
        if (tag == 16) {
         parse_original_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .pb_message.game_data.planet_t.type_t type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb_message::game_data::planet_t_type_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_units;
        break;
      }

      // optional .pb_message.game_data.fleets_t units = 4;
      case 4: {
        if (tag == 34) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.planet_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.planet_t)
  return false;
#undef DO_
}

void planet_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.planet_t)
  // optional int32 owner = 1;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->owner(), output);
  }

  // optional int32 original_owner = 2;
  if (this->original_owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->original_owner(), output);
  }

  // optional .pb_message.game_data.planet_t.type_t type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .pb_message.game_data.fleets_t units = 4;
  if (this->has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->units_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.planet_t)
}

::google::protobuf::uint8* planet_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.planet_t)
  // optional int32 owner = 1;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->owner(), target);
  }

  // optional int32 original_owner = 2;
  if (this->original_owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->original_owner(), target);
  }

  // optional .pb_message.game_data.planet_t.type_t type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .pb_message.game_data.fleets_t units = 4;
  if (this->has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->units_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.planet_t)
  return target;
}

int planet_t::ByteSize() const {
  int total_size = 0;

  // optional int32 owner = 1;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner());
  }

  // optional int32 original_owner = 2;
  if (this->original_owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->original_owner());
  }

  // optional .pb_message.game_data.planet_t.type_t type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .pb_message.game_data.fleets_t units = 4;
  if (this->has_units()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->units_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void planet_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const planet_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const planet_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void planet_t::MergeFrom(const planet_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.original_owner() != 0) {
    set_original_owner(from.original_owner());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_units()) {
    mutable_units()->::pb_message::game_data::fleets_t::MergeFrom(from.units());
  }
}

void planet_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planet_t::CopyFrom(const planet_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planet_t::IsInitialized() const {

  return true;
}

void planet_t::Swap(planet_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void planet_t::InternalSwap(planet_t* other) {
  std::swap(owner_, other->owner_);
  std::swap(original_owner_, other->original_owner_);
  std::swap(type_, other->type_);
  std::swap(units_, other->units_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata planet_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = planet_t_descriptor_;
  metadata.reflection = planet_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// planet_t

// optional int32 owner = 1;
void planet_t::clear_owner() {
  owner_ = 0;
}
 ::google::protobuf::int32 planet_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.owner)
  return owner_;
}
 void planet_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.owner)
}

// optional int32 original_owner = 2;
void planet_t::clear_original_owner() {
  original_owner_ = 0;
}
 ::google::protobuf::int32 planet_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.original_owner)
  return original_owner_;
}
 void planet_t::set_original_owner(::google::protobuf::int32 value) {
  
  original_owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.original_owner)
}

// optional .pb_message.game_data.planet_t.type_t type = 3;
void planet_t::clear_type() {
  type_ = 0;
}
 ::pb_message::game_data::planet_t_type_t planet_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.type)
  return static_cast< ::pb_message::game_data::planet_t_type_t >(type_);
}
 void planet_t::set_type(::pb_message::game_data::planet_t_type_t value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.planet_t.type)
}

// optional .pb_message.game_data.fleets_t units = 4;
bool planet_t::has_units() const {
  return !_is_default_instance_ && units_ != NULL;
}
void planet_t::clear_units() {
  if (GetArenaNoVirtual() == NULL && units_ != NULL) delete units_;
  units_ = NULL;
}
const ::pb_message::game_data::fleets_t& planet_t::units() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.planet_t.units)
  return units_ != NULL ? *units_ : *default_instance_->units_;
}
::pb_message::game_data::fleets_t* planet_t::mutable_units() {
  
  if (units_ == NULL) {
    units_ = new ::pb_message::game_data::fleets_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.planet_t.units)
  return units_;
}
::pb_message::game_data::fleets_t* planet_t::release_units() {
  
  ::pb_message::game_data::fleets_t* temp = units_;
  units_ = NULL;
  return temp;
}
void planet_t::set_allocated_units(::pb_message::game_data::fleets_t* units) {
  delete units_;
  units_ = units;
  if (units) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.planet_t.units)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* hex_zone_fixture_t_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hex_zone_fixture_t_type_t_descriptor_;
}
bool hex_zone_fixture_t_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const hex_zone_fixture_t_type_t hex_zone_fixture_t::type_base;
const hex_zone_fixture_t_type_t hex_zone_fixture_t::type_planet;
const hex_zone_fixture_t_type_t hex_zone_fixture_t::type_t_MIN;
const hex_zone_fixture_t_type_t hex_zone_fixture_t::type_t_MAX;
const int hex_zone_fixture_t::type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hex_zone_fixture_t::kTypeFieldNumber;
const int hex_zone_fixture_t::kBaseFieldNumber;
const int hex_zone_fixture_t::kPlanetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hex_zone_fixture_t::hex_zone_fixture_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.hex_zone_fixture_t)
}

void hex_zone_fixture_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::pb_message::game_data::unit_t*>(&::pb_message::game_data::unit_t::default_instance());
  planet_ = const_cast< ::pb_message::game_data::planet_t*>(&::pb_message::game_data::planet_t::default_instance());
}

hex_zone_fixture_t::hex_zone_fixture_t(const hex_zone_fixture_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.hex_zone_fixture_t)
}

void hex_zone_fixture_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  base_ = NULL;
  planet_ = NULL;
}

hex_zone_fixture_t::~hex_zone_fixture_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.hex_zone_fixture_t)
  SharedDtor();
}

void hex_zone_fixture_t::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete planet_;
  }
}

void hex_zone_fixture_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hex_zone_fixture_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hex_zone_fixture_t_descriptor_;
}

const hex_zone_fixture_t& hex_zone_fixture_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

hex_zone_fixture_t* hex_zone_fixture_t::default_instance_ = NULL;

hex_zone_fixture_t* hex_zone_fixture_t::New(::google::protobuf::Arena* arena) const {
  hex_zone_fixture_t* n = new hex_zone_fixture_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hex_zone_fixture_t::Clear() {
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && planet_ != NULL) delete planet_;
  planet_ = NULL;
}

bool hex_zone_fixture_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.hex_zone_fixture_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb_message::game_data::hex_zone_fixture_t_type_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .pb_message.game_data.unit_t base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_planet;
        break;
      }

      // optional .pb_message.game_data.planet_t planet = 3;
      case 3: {
        if (tag == 26) {
         parse_planet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.hex_zone_fixture_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.hex_zone_fixture_t)
  return false;
#undef DO_
}

void hex_zone_fixture_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.hex_zone_fixture_t)
  // optional .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pb_message.game_data.unit_t base = 2;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // optional .pb_message.game_data.planet_t planet = 3;
  if (this->has_planet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->planet_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.hex_zone_fixture_t)
}

::google::protobuf::uint8* hex_zone_fixture_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.hex_zone_fixture_t)
  // optional .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pb_message.game_data.unit_t base = 2;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->base_, target);
  }

  // optional .pb_message.game_data.planet_t planet = 3;
  if (this->has_planet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->planet_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.hex_zone_fixture_t)
  return target;
}

int hex_zone_fixture_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .pb_message.game_data.unit_t base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional .pb_message.game_data.planet_t planet = 3;
  if (this->has_planet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planet_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hex_zone_fixture_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hex_zone_fixture_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hex_zone_fixture_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hex_zone_fixture_t::MergeFrom(const hex_zone_fixture_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_base()) {
    mutable_base()->::pb_message::game_data::unit_t::MergeFrom(from.base());
  }
  if (from.has_planet()) {
    mutable_planet()->::pb_message::game_data::planet_t::MergeFrom(from.planet());
  }
}

void hex_zone_fixture_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_zone_fixture_t::CopyFrom(const hex_zone_fixture_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_zone_fixture_t::IsInitialized() const {

  return true;
}

void hex_zone_fixture_t::Swap(hex_zone_fixture_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hex_zone_fixture_t::InternalSwap(hex_zone_fixture_t* other) {
  std::swap(type_, other->type_);
  std::swap(base_, other->base_);
  std::swap(planet_, other->planet_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hex_zone_fixture_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hex_zone_fixture_t_descriptor_;
  metadata.reflection = hex_zone_fixture_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hex_zone_fixture_t

// optional .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
void hex_zone_fixture_t::clear_type() {
  type_ = 0;
}
 ::pb_message::game_data::hex_zone_fixture_t_type_t hex_zone_fixture_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.type)
  return static_cast< ::pb_message::game_data::hex_zone_fixture_t_type_t >(type_);
}
 void hex_zone_fixture_t::set_type(::pb_message::game_data::hex_zone_fixture_t_type_t value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_zone_fixture_t.type)
}

// optional .pb_message.game_data.unit_t base = 2;
bool hex_zone_fixture_t::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void hex_zone_fixture_t::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::pb_message::game_data::unit_t& hex_zone_fixture_t::base() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::pb_message::game_data::unit_t* hex_zone_fixture_t::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::pb_message::game_data::unit_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_fixture_t.base)
  return base_;
}
::pb_message::game_data::unit_t* hex_zone_fixture_t::release_base() {
  
  ::pb_message::game_data::unit_t* temp = base_;
  base_ = NULL;
  return temp;
}
void hex_zone_fixture_t::set_allocated_base(::pb_message::game_data::unit_t* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_fixture_t.base)
}

// optional .pb_message.game_data.planet_t planet = 3;
bool hex_zone_fixture_t::has_planet() const {
  return !_is_default_instance_ && planet_ != NULL;
}
void hex_zone_fixture_t::clear_planet() {
  if (GetArenaNoVirtual() == NULL && planet_ != NULL) delete planet_;
  planet_ = NULL;
}
const ::pb_message::game_data::planet_t& hex_zone_fixture_t::planet() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_fixture_t.planet)
  return planet_ != NULL ? *planet_ : *default_instance_->planet_;
}
::pb_message::game_data::planet_t* hex_zone_fixture_t::mutable_planet() {
  
  if (planet_ == NULL) {
    planet_ = new ::pb_message::game_data::planet_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_fixture_t.planet)
  return planet_;
}
::pb_message::game_data::planet_t* hex_zone_fixture_t::release_planet() {
  
  ::pb_message::game_data::planet_t* temp = planet_;
  planet_ = NULL;
  return temp;
}
void hex_zone_fixture_t::set_allocated_planet(::pb_message::game_data::planet_t* planet) {
  delete planet_;
  planet_ = planet;
  if (planet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_fixture_t.planet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hex_zone_t::kNameFieldNumber;
const int hex_zone_t::kFixturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hex_zone_t::hex_zone_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.hex_zone_t)
}

void hex_zone_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

hex_zone_t::hex_zone_t(const hex_zone_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.hex_zone_t)
}

void hex_zone_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

hex_zone_t::~hex_zone_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.hex_zone_t)
  SharedDtor();
}

void hex_zone_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void hex_zone_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hex_zone_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hex_zone_t_descriptor_;
}

const hex_zone_t& hex_zone_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

hex_zone_t* hex_zone_t::default_instance_ = NULL;

hex_zone_t* hex_zone_t::New(::google::protobuf::Arena* arena) const {
  hex_zone_t* n = new hex_zone_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hex_zone_t::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fixtures_.Clear();
}

bool hex_zone_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.hex_zone_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.game_data.hex_zone_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fixtures;
        break;
      }

      // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
      case 2: {
        if (tag == 18) {
         parse_fixtures:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fixtures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fixtures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_fixtures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.hex_zone_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.hex_zone_t)
  return false;
#undef DO_
}

void hex_zone_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.hex_zone_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.game_data.hex_zone_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
  for (unsigned int i = 0, n = this->fixtures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fixtures(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.hex_zone_t)
}

::google::protobuf::uint8* hex_zone_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.hex_zone_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.game_data.hex_zone_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
  for (unsigned int i = 0, n = this->fixtures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fixtures(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.hex_zone_t)
  return target;
}

int hex_zone_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
  total_size += 1 * this->fixtures_size();
  for (int i = 0; i < this->fixtures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fixtures(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hex_zone_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hex_zone_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hex_zone_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hex_zone_t::MergeFrom(const hex_zone_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fixtures_.MergeFrom(from.fixtures_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void hex_zone_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_zone_t::CopyFrom(const hex_zone_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_zone_t::IsInitialized() const {

  return true;
}

void hex_zone_t::Swap(hex_zone_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hex_zone_t::InternalSwap(hex_zone_t* other) {
  name_.Swap(&other->name_);
  fixtures_.UnsafeArenaSwap(&other->fixtures_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hex_zone_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hex_zone_t_descriptor_;
  metadata.reflection = hex_zone_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hex_zone_t

// optional string name = 1;
void hex_zone_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& hex_zone_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hex_zone_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_zone_t.name)
}
 void hex_zone_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.game_data.hex_zone_t.name)
}
 void hex_zone_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.game_data.hex_zone_t.name)
}
 ::std::string* hex_zone_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* hex_zone_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void hex_zone_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_zone_t.name)
}

// repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
int hex_zone_t::fixtures_size() const {
  return fixtures_.size();
}
void hex_zone_t::clear_fixtures() {
  fixtures_.Clear();
}
const ::pb_message::game_data::hex_zone_fixture_t& hex_zone_t::fixtures(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_.Get(index);
}
::pb_message::game_data::hex_zone_fixture_t* hex_zone_t::mutable_fixtures(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_.Mutable(index);
}
::pb_message::game_data::hex_zone_fixture_t* hex_zone_t::add_fixtures() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >*
hex_zone_t::mutable_fixtures() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.hex_zone_t.fixtures)
  return &fixtures_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_fixture_t >&
hex_zone_t::fixtures() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.hex_zone_t.fixtures)
  return fixtures_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hex_t::kCoordFieldNumber;
const int hex_t::kProvinceIdFieldNumber;
const int hex_t::kZonesFieldNumber;
const int hex_t::kFleetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hex_t::hex_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.hex_t)
}

void hex_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  coord_ = const_cast< ::pb_message::hex_coord_t*>(&::pb_message::hex_coord_t::default_instance());
  fleets_ = const_cast< ::pb_message::game_data::fleets_t*>(&::pb_message::game_data::fleets_t::default_instance());
}

hex_t::hex_t(const hex_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.hex_t)
}

void hex_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  coord_ = NULL;
  province_id_ = 0;
  fleets_ = NULL;
}

hex_t::~hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.hex_t)
  SharedDtor();
}

void hex_t::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
    delete fleets_;
  }
}

void hex_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hex_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hex_t_descriptor_;
}

const hex_t& hex_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

hex_t* hex_t::default_instance_ = NULL;

hex_t* hex_t::New(::google::protobuf::Arena* arena) const {
  hex_t* n = new hex_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hex_t::Clear() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
  province_id_ = 0;
  if (GetArenaNoVirtual() == NULL && fleets_ != NULL) delete fleets_;
  fleets_ = NULL;
  zones_.Clear();
}

bool hex_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.hex_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_message.hex_coord_t coord = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_province_id;
        break;
      }

      // optional int32 province_id = 2;
      case 2: {
        if (tag == 16) {
         parse_province_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &province_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_zones;
        break;
      }

      // repeated .pb_message.game_data.hex_zone_t zones = 4;
      case 4: {
        if (tag == 34) {
         parse_zones:
          DO_(input->IncrementRecursionDepth());
         parse_loop_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_zones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_zones;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_fleets;
        break;
      }

      // optional .pb_message.game_data.fleets_t fleets = 5;
      case 5: {
        if (tag == 42) {
         parse_fleets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.hex_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.hex_t)
  return false;
#undef DO_
}

void hex_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.hex_t)
  // optional .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->coord_, output);
  }

  // optional int32 province_id = 2;
  if (this->province_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->province_id(), output);
  }

  // repeated .pb_message.game_data.hex_zone_t zones = 4;
  for (unsigned int i = 0, n = this->zones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->zones(i), output);
  }

  // optional .pb_message.game_data.fleets_t fleets = 5;
  if (this->has_fleets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fleets_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.hex_t)
}

::google::protobuf::uint8* hex_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.hex_t)
  // optional .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->coord_, target);
  }

  // optional int32 province_id = 2;
  if (this->province_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->province_id(), target);
  }

  // repeated .pb_message.game_data.hex_zone_t zones = 4;
  for (unsigned int i = 0, n = this->zones_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->zones(i), target);
  }

  // optional .pb_message.game_data.fleets_t fleets = 5;
  if (this->has_fleets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->fleets_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.hex_t)
  return target;
}

int hex_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_);
  }

  // optional int32 province_id = 2;
  if (this->province_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->province_id());
  }

  // optional .pb_message.game_data.fleets_t fleets = 5;
  if (this->has_fleets()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fleets_);
  }

  // repeated .pb_message.game_data.hex_zone_t zones = 4;
  total_size += 1 * this->zones_size();
  for (int i = 0; i < this->zones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zones(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hex_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hex_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hex_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hex_t::MergeFrom(const hex_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  zones_.MergeFrom(from.zones_);
  if (from.has_coord()) {
    mutable_coord()->::pb_message::hex_coord_t::MergeFrom(from.coord());
  }
  if (from.province_id() != 0) {
    set_province_id(from.province_id());
  }
  if (from.has_fleets()) {
    mutable_fleets()->::pb_message::game_data::fleets_t::MergeFrom(from.fleets());
  }
}

void hex_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_t::CopyFrom(const hex_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_t::IsInitialized() const {

  return true;
}

void hex_t::Swap(hex_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hex_t::InternalSwap(hex_t* other) {
  std::swap(coord_, other->coord_);
  std::swap(province_id_, other->province_id_);
  zones_.UnsafeArenaSwap(&other->zones_);
  std::swap(fleets_, other->fleets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hex_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hex_t_descriptor_;
  metadata.reflection = hex_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hex_t

// optional .pb_message.hex_coord_t coord = 1;
bool hex_t::has_coord() const {
  return !_is_default_instance_ && coord_ != NULL;
}
void hex_t::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
const ::pb_message::hex_coord_t& hex_t::coord() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pb_message::hex_coord_t* hex_t::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::pb_message::hex_coord_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.coord)
  return coord_;
}
::pb_message::hex_coord_t* hex_t::release_coord() {
  
  ::pb_message::hex_coord_t* temp = coord_;
  coord_ = NULL;
  return temp;
}
void hex_t::set_allocated_coord(::pb_message::hex_coord_t* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_t.coord)
}

// optional int32 province_id = 2;
void hex_t::clear_province_id() {
  province_id_ = 0;
}
 ::google::protobuf::int32 hex_t::province_id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.province_id)
  return province_id_;
}
 void hex_t::set_province_id(::google::protobuf::int32 value) {
  
  province_id_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.hex_t.province_id)
}

// repeated .pb_message.game_data.hex_zone_t zones = 4;
int hex_t::zones_size() const {
  return zones_.size();
}
void hex_t::clear_zones() {
  zones_.Clear();
}
const ::pb_message::game_data::hex_zone_t& hex_t::zones(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.zones)
  return zones_.Get(index);
}
::pb_message::game_data::hex_zone_t* hex_t::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.zones)
  return zones_.Mutable(index);
}
::pb_message::game_data::hex_zone_t* hex_t::add_zones() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.hex_t.zones)
  return zones_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >*
hex_t::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.hex_t.zones)
  return &zones_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_zone_t >&
hex_t::zones() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.hex_t.zones)
  return zones_;
}

// optional .pb_message.game_data.fleets_t fleets = 5;
bool hex_t::has_fleets() const {
  return !_is_default_instance_ && fleets_ != NULL;
}
void hex_t::clear_fleets() {
  if (GetArenaNoVirtual() == NULL && fleets_ != NULL) delete fleets_;
  fleets_ = NULL;
}
const ::pb_message::game_data::fleets_t& hex_t::fleets() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.hex_t.fleets)
  return fleets_ != NULL ? *fleets_ : *default_instance_->fleets_;
}
::pb_message::game_data::fleets_t* hex_t::mutable_fleets() {
  
  if (fleets_ == NULL) {
    fleets_ = new ::pb_message::game_data::fleets_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.hex_t.fleets)
  return fleets_;
}
::pb_message::game_data::fleets_t* hex_t::release_fleets() {
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = NULL;
  return temp;
}
void hex_t::set_allocated_fleets(::pb_message::game_data::fleets_t* fleets) {
  delete fleets_;
  fleets_ = fleets;
  if (fleets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.hex_t.fleets)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int province_t::kIdFieldNumber;
const int province_t::kOwnerFieldNumber;
const int province_t::kOriginalOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

province_t::province_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.province_t)
}

void province_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

province_t::province_t(const province_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.province_t)
}

void province_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  owner_ = 0;
  original_owner_ = 0;
}

province_t::~province_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.province_t)
  SharedDtor();
}

void province_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void province_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_t_descriptor_;
}

const province_t& province_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

province_t* province_t::default_instance_ = NULL;

province_t* province_t::New(::google::protobuf::Arena* arena) const {
  province_t* n = new province_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void province_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<province_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, original_owner_);

#undef ZR_HELPER_
#undef ZR_

}

bool province_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.province_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional int32 owner = 2;
      case 2: {
        if (tag == 16) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_original_owner;
        break;
      }

      // optional int32 original_owner = 3;
      case 3: {
        if (tag == 24) {
         parse_original_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.province_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.province_t)
  return false;
#undef DO_
}

void province_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.province_t)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->owner(), output);
  }

  // optional int32 original_owner = 3;
  if (this->original_owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->original_owner(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.province_t)
}

::google::protobuf::uint8* province_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.province_t)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->owner(), target);
  }

  // optional int32 original_owner = 3;
  if (this->original_owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->original_owner(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.province_t)
  return target;
}

int province_t::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner());
  }

  // optional int32 original_owner = 3;
  if (this->original_owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->original_owner());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const province_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const province_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_t::MergeFrom(const province_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.original_owner() != 0) {
    set_original_owner(from.original_owner());
  }
}

void province_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_t::CopyFrom(const province_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_t::IsInitialized() const {

  return true;
}

void province_t::Swap(province_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void province_t::InternalSwap(province_t* other) {
  std::swap(id_, other->id_);
  std::swap(owner_, other->owner_);
  std::swap(original_owner_, other->original_owner_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata province_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_t_descriptor_;
  metadata.reflection = province_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// province_t

// optional int32 id = 1;
void province_t::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 province_t::id() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.id)
  return id_;
}
 void province_t::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.id)
}

// optional int32 owner = 2;
void province_t::clear_owner() {
  owner_ = 0;
}
 ::google::protobuf::int32 province_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.owner)
  return owner_;
}
 void province_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.owner)
}

// optional int32 original_owner = 3;
void province_t::clear_original_owner() {
  original_owner_ = 0;
}
 ::google::protobuf::int32 province_t::original_owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.province_t.original_owner)
  return original_owner_;
}
 void province_t::set_original_owner(::google::protobuf::int32 value) {
  
  original_owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.province_t.original_owner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map_t::kWidthFieldNumber;
const int map_t::kHeightFieldNumber;
const int map_t::kHexesFieldNumber;
const int map_t::kProvincesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map_t::map_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.map_t)
}

void map_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

map_t::map_t(const map_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.map_t)
}

void map_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
}

map_t::~map_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.map_t)
  SharedDtor();
}

void map_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_t_descriptor_;
}

const map_t& map_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

map_t* map_t::default_instance_ = NULL;

map_t* map_t::New(::google::protobuf::Arena* arena) const {
  map_t* n = new map_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<map_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  hexes_.Clear();
  provinces_.Clear();
}

bool map_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.map_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hexes;
        break;
      }

      // repeated .pb_message.game_data.hex_t hexes = 3;
      case 3: {
        if (tag == 26) {
         parse_hexes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_hexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hexes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_hexes;
        if (input->ExpectTag(34)) goto parse_loop_provinces;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb_message.game_data.province_t provinces = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_provinces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_provinces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_provinces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.map_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.map_t)
  return false;
#undef DO_
}

void map_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.map_t)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // repeated .pb_message.game_data.hex_t hexes = 3;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hexes(i), output);
  }

  // repeated .pb_message.game_data.province_t provinces = 4;
  for (unsigned int i = 0, n = this->provinces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->provinces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.map_t)
}

::google::protobuf::uint8* map_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.map_t)
  // optional int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // repeated .pb_message.game_data.hex_t hexes = 3;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hexes(i), target);
  }

  // repeated .pb_message.game_data.province_t provinces = 4;
  for (unsigned int i = 0, n = this->provinces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->provinces(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.map_t)
  return target;
}

int map_t::ByteSize() const {
  int total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // repeated .pb_message.game_data.hex_t hexes = 3;
  total_size += 1 * this->hexes_size();
  for (int i = 0; i < this->hexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hexes(i));
  }

  // repeated .pb_message.game_data.province_t provinces = 4;
  total_size += 1 * this->provinces_size();
  for (int i = 0; i < this->provinces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->provinces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const map_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void map_t::MergeFrom(const map_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  hexes_.MergeFrom(from.hexes_);
  provinces_.MergeFrom(from.provinces_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void map_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_t::CopyFrom(const map_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_t::IsInitialized() const {

  return true;
}

void map_t::Swap(map_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map_t::InternalSwap(map_t* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  hexes_.UnsafeArenaSwap(&other->hexes_);
  provinces_.UnsafeArenaSwap(&other->provinces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_t_descriptor_;
  metadata.reflection = map_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// map_t

// optional int32 width = 1;
void map_t::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 map_t::width() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.width)
  return width_;
}
 void map_t::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.map_t.width)
}

// optional int32 height = 2;
void map_t::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 map_t::height() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.height)
  return height_;
}
 void map_t::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.map_t.height)
}

// repeated .pb_message.game_data.hex_t hexes = 3;
int map_t::hexes_size() const {
  return hexes_.size();
}
void map_t::clear_hexes() {
  hexes_.Clear();
}
const ::pb_message::game_data::hex_t& map_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.hexes)
  return hexes_.Get(index);
}
::pb_message::game_data::hex_t* map_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.map_t.hexes)
  return hexes_.Mutable(index);
}
::pb_message::game_data::hex_t* map_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.map_t.hexes)
  return hexes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_t >*
map_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.map_t.hexes)
  return &hexes_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::hex_t >&
map_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.map_t.hexes)
  return hexes_;
}

// repeated .pb_message.game_data.province_t provinces = 4;
int map_t::provinces_size() const {
  return provinces_.size();
}
void map_t::clear_provinces() {
  provinces_.Clear();
}
const ::pb_message::game_data::province_t& map_t::provinces(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.map_t.provinces)
  return provinces_.Get(index);
}
::pb_message::game_data::province_t* map_t::mutable_provinces(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.map_t.provinces)
  return provinces_.Mutable(index);
}
::pb_message::game_data::province_t* map_t::add_provinces() {
  // @@protoc_insertion_point(field_add:pb_message.game_data.map_t.provinces)
  return provinces_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::game_data::province_t >*
map_t::mutable_provinces() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.map_t.provinces)
  return &provinces_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::game_data::province_t >&
map_t::provinces() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.map_t.provinces)
  return provinces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offmap_area_t::kOwnerFieldNumber;
const int offmap_area_t::kFleetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offmap_area_t::offmap_area_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.offmap_area_t)
}

void offmap_area_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fleets_ = const_cast< ::pb_message::game_data::fleets_t*>(&::pb_message::game_data::fleets_t::default_instance());
}

offmap_area_t::offmap_area_t(const offmap_area_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.offmap_area_t)
}

void offmap_area_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  owner_ = 0;
  fleets_ = NULL;
}

offmap_area_t::~offmap_area_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.offmap_area_t)
  SharedDtor();
}

void offmap_area_t::SharedDtor() {
  if (this != default_instance_) {
    delete fleets_;
  }
}

void offmap_area_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offmap_area_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offmap_area_t_descriptor_;
}

const offmap_area_t& offmap_area_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

offmap_area_t* offmap_area_t::default_instance_ = NULL;

offmap_area_t* offmap_area_t::New(::google::protobuf::Arena* arena) const {
  offmap_area_t* n = new offmap_area_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void offmap_area_t::Clear() {
  owner_ = 0;
  if (GetArenaNoVirtual() == NULL && fleets_ != NULL) delete fleets_;
  fleets_ = NULL;
}

bool offmap_area_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.offmap_area_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 owner = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fleets;
        break;
      }

      // optional .pb_message.game_data.fleets_t fleets = 2;
      case 2: {
        if (tag == 18) {
         parse_fleets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.offmap_area_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.offmap_area_t)
  return false;
#undef DO_
}

void offmap_area_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.offmap_area_t)
  // optional int32 owner = 1;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->owner(), output);
  }

  // optional .pb_message.game_data.fleets_t fleets = 2;
  if (this->has_fleets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fleets_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.offmap_area_t)
}

::google::protobuf::uint8* offmap_area_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.offmap_area_t)
  // optional int32 owner = 1;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->owner(), target);
  }

  // optional .pb_message.game_data.fleets_t fleets = 2;
  if (this->has_fleets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->fleets_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.offmap_area_t)
  return target;
}

int offmap_area_t::ByteSize() const {
  int total_size = 0;

  // optional int32 owner = 1;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner());
  }

  // optional .pb_message.game_data.fleets_t fleets = 2;
  if (this->has_fleets()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fleets_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offmap_area_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const offmap_area_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const offmap_area_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offmap_area_t::MergeFrom(const offmap_area_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.has_fleets()) {
    mutable_fleets()->::pb_message::game_data::fleets_t::MergeFrom(from.fleets());
  }
}

void offmap_area_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_area_t::CopyFrom(const offmap_area_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_area_t::IsInitialized() const {

  return true;
}

void offmap_area_t::Swap(offmap_area_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offmap_area_t::InternalSwap(offmap_area_t* other) {
  std::swap(owner_, other->owner_);
  std::swap(fleets_, other->fleets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata offmap_area_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offmap_area_t_descriptor_;
  metadata.reflection = offmap_area_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// offmap_area_t

// optional int32 owner = 1;
void offmap_area_t::clear_owner() {
  owner_ = 0;
}
 ::google::protobuf::int32 offmap_area_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.offmap_area_t.owner)
  return owner_;
}
 void offmap_area_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.game_data.offmap_area_t.owner)
}

// optional .pb_message.game_data.fleets_t fleets = 2;
bool offmap_area_t::has_fleets() const {
  return !_is_default_instance_ && fleets_ != NULL;
}
void offmap_area_t::clear_fleets() {
  if (GetArenaNoVirtual() == NULL && fleets_ != NULL) delete fleets_;
  fleets_ = NULL;
}
const ::pb_message::game_data::fleets_t& offmap_area_t::fleets() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.offmap_area_t.fleets)
  return fleets_ != NULL ? *fleets_ : *default_instance_->fleets_;
}
::pb_message::game_data::fleets_t* offmap_area_t::mutable_fleets() {
  
  if (fleets_ == NULL) {
    fleets_ = new ::pb_message::game_data::fleets_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.offmap_area_t.fleets)
  return fleets_;
}
::pb_message::game_data::fleets_t* offmap_area_t::release_fleets() {
  
  ::pb_message::game_data::fleets_t* temp = fleets_;
  fleets_ = NULL;
  return temp;
}
void offmap_area_t::set_allocated_fleets(::pb_message::game_data::fleets_t* fleets) {
  delete fleets_;
  fleets_ = fleets;
  if (fleets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.offmap_area_t.fleets)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offmap_areas_t::kAreasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offmap_areas_t::offmap_areas_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.offmap_areas_t)
}

void offmap_areas_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

offmap_areas_t::offmap_areas_t(const offmap_areas_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.offmap_areas_t)
}

void offmap_areas_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  areas_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  areas_.SetEntryDescriptor(
      &::pb_message::game_data::offmap_areas_t_AreasEntry_descriptor_);
}

offmap_areas_t::~offmap_areas_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.offmap_areas_t)
  SharedDtor();
}

void offmap_areas_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offmap_areas_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offmap_areas_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offmap_areas_t_descriptor_;
}

const offmap_areas_t& offmap_areas_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

offmap_areas_t* offmap_areas_t::default_instance_ = NULL;

offmap_areas_t* offmap_areas_t::New(::google::protobuf::Arena* arena) const {
  offmap_areas_t* n = new offmap_areas_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void offmap_areas_t::Clear() {
  areas_.Clear();
}

bool offmap_areas_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.offmap_areas_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_areas:
          ::google::protobuf::scoped_ptr<offmap_areas_t_AreasEntry> entry(areas_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_areas())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_areas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.offmap_areas_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.offmap_areas_t)
  return false;
#undef DO_
}

void offmap_areas_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.offmap_areas_t)
  // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
  {
    ::google::protobuf::scoped_ptr<offmap_areas_t_AreasEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >::const_iterator
        it = this->areas().begin();
        it != this->areas().end(); ++it) {
      entry.reset(areas_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.offmap_areas_t)
}

::google::protobuf::uint8* offmap_areas_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.offmap_areas_t)
  // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
  {
    ::google::protobuf::scoped_ptr<offmap_areas_t_AreasEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >::const_iterator
        it = this->areas().begin();
        it != this->areas().end(); ++it) {
      entry.reset(areas_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.offmap_areas_t)
  return target;
}

int offmap_areas_t::ByteSize() const {
  int total_size = 0;

  // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
  total_size += 1 * this->areas_size();
  {
    ::google::protobuf::scoped_ptr<offmap_areas_t_AreasEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >::const_iterator
        it = this->areas().begin();
        it != this->areas().end(); ++it) {
      entry.reset(areas_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offmap_areas_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const offmap_areas_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const offmap_areas_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offmap_areas_t::MergeFrom(const offmap_areas_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  areas_.MergeFrom(from.areas_);
}

void offmap_areas_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_areas_t::CopyFrom(const offmap_areas_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_areas_t::IsInitialized() const {

  return true;
}

void offmap_areas_t::Swap(offmap_areas_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offmap_areas_t::InternalSwap(offmap_areas_t* other) {
  areas_.Swap(&other->areas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata offmap_areas_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offmap_areas_t_descriptor_;
  metadata.reflection = offmap_areas_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// offmap_areas_t

// map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
int offmap_areas_t::areas_size() const {
  return areas_.size();
}
void offmap_areas_t::clear_areas() {
  areas_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >&
offmap_areas_t::areas() const {
  // @@protoc_insertion_point(field_map:pb_message.game_data.offmap_areas_t.areas)
  return areas_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::pb_message::game_data::offmap_area_t >*
offmap_areas_t::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.game_data.offmap_areas_t.areas)
  return areas_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int team_t::kNameFieldNumber;
const int team_t::kNationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

team_t::team_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.game_data.team_t)
}

void team_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

team_t::team_t(const team_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.team_t)
}

void team_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

team_t::~team_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.team_t)
  SharedDtor();
}

void team_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void team_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_t_descriptor_;
}

const team_t& team_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fdata_2eproto();
  return *default_instance_;
}

team_t* team_t::default_instance_ = NULL;

team_t* team_t::New(::google::protobuf::Arena* arena) const {
  team_t* n = new team_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void team_t::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nations_.Clear();
}

bool team_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.game_data.team_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.game_data.team_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nations;
        break;
      }

      // repeated int32 nations = 2;
      case 2: {
        if (tag == 18) {
         parse_nations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nations())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_nations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.game_data.team_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.game_data.team_t)
  return false;
#undef DO_
}

void team_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.game_data.team_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.game_data.team_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int32 nations = 2;
  if (this->nations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nations_cached_byte_size_);
  }
  for (int i = 0; i < this->nations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->nations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.game_data.team_t)
}

::google::protobuf::uint8* team_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.team_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.game_data.team_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 nations = 2;
  if (this->nations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nations_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->nations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.team_t)
  return target;
}

int team_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated int32 nations = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->nations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nations(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nations_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const team_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const team_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_t::MergeFrom(const team_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nations_.MergeFrom(from.nations_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void team_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_t::CopyFrom(const team_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_t::IsInitialized() const {

  return true;
}

void team_t::Swap(team_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void team_t::InternalSwap(team_t* other) {
  name_.Swap(&other->name_);
  nations_.UnsafeArenaSwap(&other->nations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata team_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_t_descriptor_;
  metadata.reflection = team_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// team_t

// optional string name = 1;
void team_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& team_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.team_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void team_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.team_t.name)
}
 void team_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.game_data.team_t.name)
}
 void team_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.game_data.team_t.name)
}
 ::std::string* team_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.game_data.team_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* team_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void team_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.game_data.team_t.name)
}

// repeated int32 nations = 2;
int team_t::nations_size() const {
  return nations_.size();
}
void team_t::clear_nations() {
  nations_.Clear();
}
 ::google::protobuf::int32 team_t::nations(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.game_data.team_t.nations)
  return nations_.Get(index);
}
 void team_t::set_nations(int index, ::google::protobuf::int32 value) {
  nations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.game_data.team_t.nations)
}
 void team_t::add_nations(::google::protobuf::int32 value) {
  nations_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.game_data.team_t.nations)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
team_t::nations() const {
  // @@protoc_insertion_point(field_list:pb_message.game_data.team_t.nations)
  return nations_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
team_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.game_data.team_t.nations)
  return &nations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace game_data
}  // namespace pb_message

// @@protoc_insertion_point(global_scope)
