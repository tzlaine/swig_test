// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "visual_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb_message {
namespace visual_config {

namespace {

const ::google::protobuf::Descriptor* color_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  color_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* hex_map_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hex_map_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* hex_map_t_PrimaryColorsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hex_map_t_SecondaryColorsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_visual_5fconfig_2eproto() {
  protobuf_AddDesc_visual_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "visual_config.proto");
  GOOGLE_CHECK(file != NULL);
  color_t_descriptor_ = file->message_type(0);
  static const int color_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_t, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_t, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_t, b_),
  };
  color_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      color_t_descriptor_,
      color_t::default_instance_,
      color_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(color_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_t, _is_default_instance_));
  hex_map_t_descriptor_ = file->message_type(1);
  static const int hex_map_t_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, primary_colors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, secondary_colors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, national_border_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, province_border_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, planet_star_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, minor_planet_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, major_planet_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, star_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, mb_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, bats_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, sb_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, offmap_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, offmap_border_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, offmap_label_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, offmap_left_right_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, offmap_top_bottom_thickness_),
  };
  hex_map_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hex_map_t_descriptor_,
      hex_map_t::default_instance_,
      hex_map_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(hex_map_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_map_t, _is_default_instance_));
  hex_map_t_PrimaryColorsEntry_descriptor_ = hex_map_t_descriptor_->nested_type(0);
  hex_map_t_SecondaryColorsEntry_descriptor_ = hex_map_t_descriptor_->nested_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_visual_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      color_t_descriptor_, &color_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hex_map_t_descriptor_, &hex_map_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        hex_map_t_PrimaryColorsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::visual_config::color_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                hex_map_t_PrimaryColorsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        hex_map_t_SecondaryColorsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::visual_config::color_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                hex_map_t_SecondaryColorsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_visual_5fconfig_2eproto() {
  delete color_t::default_instance_;
  delete color_t_reflection_;
  delete hex_map_t::default_instance_;
  delete hex_map_t_reflection_;
}

void protobuf_AddDesc_visual_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023visual_config.proto\022\030pb_message.visual"
    "_config\"*\n\007color_t\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005"
    "\022\t\n\001b\030\003 \001(\005\"\344\005\n\thex_map_t\022N\n\016primary_col"
    "ors\030\001 \003(\01326.pb_message.visual_config.hex"
    "_map_t.PrimaryColorsEntry\022R\n\020secondary_c"
    "olors\030\002 \003(\01328.pb_message.visual_config.h"
    "ex_map_t.SecondaryColorsEntry\022!\n\031nationa"
    "l_border_thickness\030\003 \001(\002\022!\n\031province_bor"
    "der_thickness\030\004 \001(\002\022\035\n\025planet_star_thick"
    "ness\030\005 \001(\002\022\032\n\022minor_planet_scale\030\006 \001(\002\022\032"
    "\n\022major_planet_scale\030\007 \001(\002\022\022\n\nstar_scale"
    "\030\010 \001(\002\022\020\n\010mb_scale\030\t \001(\002\022\022\n\nbats_scale\030\n"
    " \001(\002\022\020\n\010sb_scale\030\013 \001(\002\022\020\n\010offmap_z\030\014 \001(\002"
    "\022\037\n\027offmap_border_thickness\030\r \001(\002\022\031\n\021off"
    "map_label_size\030\016 \001(\002\022#\n\033offmap_left_righ"
    "t_thickness\030\017 \001(\002\022#\n\033offmap_top_bottom_t"
    "hickness\030\020 \001(\002\032W\n\022PrimaryColorsEntry\022\013\n\003"
    "key\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!.pb_message.vi"
    "sual_config.color_t:\0028\001\032Y\n\024SecondaryColo"
    "rsEntry\022\013\n\003key\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!.pb"
    "_message.visual_config.color_t:\0028\001b\006prot"
    "o3", 842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "visual_config.proto", &protobuf_RegisterTypes);
  color_t::default_instance_ = new color_t();
  hex_map_t::default_instance_ = new hex_map_t();
  color_t::default_instance_->InitAsDefaultInstance();
  hex_map_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_visual_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_visual_5fconfig_2eproto {
  StaticDescriptorInitializer_visual_5fconfig_2eproto() {
    protobuf_AddDesc_visual_5fconfig_2eproto();
  }
} static_descriptor_initializer_visual_5fconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int color_t::kRFieldNumber;
const int color_t::kGFieldNumber;
const int color_t::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

color_t::color_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.visual_config.color_t)
}

void color_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

color_t::color_t(const color_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.visual_config.color_t)
}

void color_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
}

color_t::~color_t() {
  // @@protoc_insertion_point(destructor:pb_message.visual_config.color_t)
  SharedDtor();
}

void color_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void color_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* color_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return color_t_descriptor_;
}

const color_t& color_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_visual_5fconfig_2eproto();
  return *default_instance_;
}

color_t* color_t::default_instance_ = NULL;

color_t* color_t::New(::google::protobuf::Arena* arena) const {
  color_t* n = new color_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void color_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<color_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(r_, b_);

#undef ZR_HELPER_
#undef ZR_

}

bool color_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.visual_config.color_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // optional int32 g = 2;
      case 2: {
        if (tag == 16) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // optional int32 b = 3;
      case 3: {
        if (tag == 24) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.visual_config.color_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.visual_config.color_t)
  return false;
#undef DO_
}

void color_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.visual_config.color_t)
  // optional int32 r = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // optional int32 g = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // optional int32 b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.visual_config.color_t)
}

::google::protobuf::uint8* color_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.visual_config.color_t)
  // optional int32 r = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // optional int32 g = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // optional int32 b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.visual_config.color_t)
  return target;
}

int color_t::ByteSize() const {
  int total_size = 0;

  // optional int32 r = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->r());
  }

  // optional int32 g = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->g());
  }

  // optional int32 b = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void color_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const color_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const color_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void color_t::MergeFrom(const color_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void color_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void color_t::CopyFrom(const color_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool color_t::IsInitialized() const {

  return true;
}

void color_t::Swap(color_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void color_t::InternalSwap(color_t* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata color_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = color_t_descriptor_;
  metadata.reflection = color_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// color_t

// optional int32 r = 1;
void color_t::clear_r() {
  r_ = 0;
}
 ::google::protobuf::int32 color_t::r() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.r)
  return r_;
}
 void color_t::set_r(::google::protobuf::int32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.r)
}

// optional int32 g = 2;
void color_t::clear_g() {
  g_ = 0;
}
 ::google::protobuf::int32 color_t::g() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.g)
  return g_;
}
 void color_t::set_g(::google::protobuf::int32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.g)
}

// optional int32 b = 3;
void color_t::clear_b() {
  b_ = 0;
}
 ::google::protobuf::int32 color_t::b() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.b)
  return b_;
}
 void color_t::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hex_map_t::kPrimaryColorsFieldNumber;
const int hex_map_t::kSecondaryColorsFieldNumber;
const int hex_map_t::kNationalBorderThicknessFieldNumber;
const int hex_map_t::kProvinceBorderThicknessFieldNumber;
const int hex_map_t::kPlanetStarThicknessFieldNumber;
const int hex_map_t::kMinorPlanetScaleFieldNumber;
const int hex_map_t::kMajorPlanetScaleFieldNumber;
const int hex_map_t::kStarScaleFieldNumber;
const int hex_map_t::kMbScaleFieldNumber;
const int hex_map_t::kBatsScaleFieldNumber;
const int hex_map_t::kSbScaleFieldNumber;
const int hex_map_t::kOffmapZFieldNumber;
const int hex_map_t::kOffmapBorderThicknessFieldNumber;
const int hex_map_t::kOffmapLabelSizeFieldNumber;
const int hex_map_t::kOffmapLeftRightThicknessFieldNumber;
const int hex_map_t::kOffmapTopBottomThicknessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hex_map_t::hex_map_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.visual_config.hex_map_t)
}

void hex_map_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

hex_map_t::hex_map_t(const hex_map_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.visual_config.hex_map_t)
}

void hex_map_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  primary_colors_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  primary_colors_.SetEntryDescriptor(
      &::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_descriptor_);
  secondary_colors_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  secondary_colors_.SetEntryDescriptor(
      &::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_descriptor_);
  national_border_thickness_ = 0;
  province_border_thickness_ = 0;
  planet_star_thickness_ = 0;
  minor_planet_scale_ = 0;
  major_planet_scale_ = 0;
  star_scale_ = 0;
  mb_scale_ = 0;
  bats_scale_ = 0;
  sb_scale_ = 0;
  offmap_z_ = 0;
  offmap_border_thickness_ = 0;
  offmap_label_size_ = 0;
  offmap_left_right_thickness_ = 0;
  offmap_top_bottom_thickness_ = 0;
}

hex_map_t::~hex_map_t() {
  // @@protoc_insertion_point(destructor:pb_message.visual_config.hex_map_t)
  SharedDtor();
}

void hex_map_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hex_map_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hex_map_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hex_map_t_descriptor_;
}

const hex_map_t& hex_map_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_visual_5fconfig_2eproto();
  return *default_instance_;
}

hex_map_t* hex_map_t::default_instance_ = NULL;

hex_map_t* hex_map_t::New(::google::protobuf::Arena* arena) const {
  hex_map_t* n = new hex_map_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hex_map_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hex_map_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(national_border_thickness_, star_scale_);
  ZR_(mb_scale_, offmap_top_bottom_thickness_);

#undef ZR_HELPER_
#undef ZR_

  primary_colors_.Clear();
  secondary_colors_.Clear();
}

bool hex_map_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.visual_config.hex_map_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_primary_colors:
          ::google::protobuf::scoped_ptr<hex_map_t_PrimaryColorsEntry> entry(primary_colors_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_primary_colors())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.visual_config.hex_map_t.PrimaryColorsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_primary_colors;
        if (input->ExpectTag(18)) goto parse_loop_secondary_colors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_secondary_colors:
          ::google::protobuf::scoped_ptr<hex_map_t_SecondaryColorsEntry> entry(secondary_colors_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_secondary_colors())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.visual_config.hex_map_t.SecondaryColorsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_secondary_colors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(29)) goto parse_national_border_thickness;
        break;
      }

      // optional float national_border_thickness = 3;
      case 3: {
        if (tag == 29) {
         parse_national_border_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &national_border_thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_province_border_thickness;
        break;
      }

      // optional float province_border_thickness = 4;
      case 4: {
        if (tag == 37) {
         parse_province_border_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &province_border_thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_planet_star_thickness;
        break;
      }

      // optional float planet_star_thickness = 5;
      case 5: {
        if (tag == 45) {
         parse_planet_star_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &planet_star_thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_minor_planet_scale;
        break;
      }

      // optional float minor_planet_scale = 6;
      case 6: {
        if (tag == 53) {
         parse_minor_planet_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minor_planet_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_major_planet_scale;
        break;
      }

      // optional float major_planet_scale = 7;
      case 7: {
        if (tag == 61) {
         parse_major_planet_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &major_planet_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_star_scale;
        break;
      }

      // optional float star_scale = 8;
      case 8: {
        if (tag == 69) {
         parse_star_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &star_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_mb_scale;
        break;
      }

      // optional float mb_scale = 9;
      case 9: {
        if (tag == 77) {
         parse_mb_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mb_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_bats_scale;
        break;
      }

      // optional float bats_scale = 10;
      case 10: {
        if (tag == 85) {
         parse_bats_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bats_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_sb_scale;
        break;
      }

      // optional float sb_scale = 11;
      case 11: {
        if (tag == 93) {
         parse_sb_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sb_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_offmap_z;
        break;
      }

      // optional float offmap_z = 12;
      case 12: {
        if (tag == 101) {
         parse_offmap_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offmap_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_offmap_border_thickness;
        break;
      }

      // optional float offmap_border_thickness = 13;
      case 13: {
        if (tag == 109) {
         parse_offmap_border_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offmap_border_thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_offmap_label_size;
        break;
      }

      // optional float offmap_label_size = 14;
      case 14: {
        if (tag == 117) {
         parse_offmap_label_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offmap_label_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_offmap_left_right_thickness;
        break;
      }

      // optional float offmap_left_right_thickness = 15;
      case 15: {
        if (tag == 125) {
         parse_offmap_left_right_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offmap_left_right_thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_offmap_top_bottom_thickness;
        break;
      }

      // optional float offmap_top_bottom_thickness = 16;
      case 16: {
        if (tag == 133) {
         parse_offmap_top_bottom_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offmap_top_bottom_thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.visual_config.hex_map_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.visual_config.hex_map_t)
  return false;
#undef DO_
}

void hex_map_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.visual_config.hex_map_t)
  // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
  {
    ::google::protobuf::scoped_ptr<hex_map_t_PrimaryColorsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >::const_iterator
        it = this->primary_colors().begin();
        it != this->primary_colors().end(); ++it) {
      entry.reset(primary_colors_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.visual_config.hex_map_t.PrimaryColorsEntry.key");
    }
  }

  // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
  {
    ::google::protobuf::scoped_ptr<hex_map_t_SecondaryColorsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >::const_iterator
        it = this->secondary_colors().begin();
        it != this->secondary_colors().end(); ++it) {
      entry.reset(secondary_colors_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.visual_config.hex_map_t.SecondaryColorsEntry.key");
    }
  }

  // optional float national_border_thickness = 3;
  if (this->national_border_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->national_border_thickness(), output);
  }

  // optional float province_border_thickness = 4;
  if (this->province_border_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->province_border_thickness(), output);
  }

  // optional float planet_star_thickness = 5;
  if (this->planet_star_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->planet_star_thickness(), output);
  }

  // optional float minor_planet_scale = 6;
  if (this->minor_planet_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minor_planet_scale(), output);
  }

  // optional float major_planet_scale = 7;
  if (this->major_planet_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->major_planet_scale(), output);
  }

  // optional float star_scale = 8;
  if (this->star_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->star_scale(), output);
  }

  // optional float mb_scale = 9;
  if (this->mb_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mb_scale(), output);
  }

  // optional float bats_scale = 10;
  if (this->bats_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->bats_scale(), output);
  }

  // optional float sb_scale = 11;
  if (this->sb_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sb_scale(), output);
  }

  // optional float offmap_z = 12;
  if (this->offmap_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->offmap_z(), output);
  }

  // optional float offmap_border_thickness = 13;
  if (this->offmap_border_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->offmap_border_thickness(), output);
  }

  // optional float offmap_label_size = 14;
  if (this->offmap_label_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->offmap_label_size(), output);
  }

  // optional float offmap_left_right_thickness = 15;
  if (this->offmap_left_right_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->offmap_left_right_thickness(), output);
  }

  // optional float offmap_top_bottom_thickness = 16;
  if (this->offmap_top_bottom_thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->offmap_top_bottom_thickness(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.visual_config.hex_map_t)
}

::google::protobuf::uint8* hex_map_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.visual_config.hex_map_t)
  // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
  {
    ::google::protobuf::scoped_ptr<hex_map_t_PrimaryColorsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >::const_iterator
        it = this->primary_colors().begin();
        it != this->primary_colors().end(); ++it) {
      entry.reset(primary_colors_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.visual_config.hex_map_t.PrimaryColorsEntry.key");
    }
  }

  // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
  {
    ::google::protobuf::scoped_ptr<hex_map_t_SecondaryColorsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >::const_iterator
        it = this->secondary_colors().begin();
        it != this->secondary_colors().end(); ++it) {
      entry.reset(secondary_colors_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.visual_config.hex_map_t.SecondaryColorsEntry.key");
    }
  }

  // optional float national_border_thickness = 3;
  if (this->national_border_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->national_border_thickness(), target);
  }

  // optional float province_border_thickness = 4;
  if (this->province_border_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->province_border_thickness(), target);
  }

  // optional float planet_star_thickness = 5;
  if (this->planet_star_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->planet_star_thickness(), target);
  }

  // optional float minor_planet_scale = 6;
  if (this->minor_planet_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minor_planet_scale(), target);
  }

  // optional float major_planet_scale = 7;
  if (this->major_planet_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->major_planet_scale(), target);
  }

  // optional float star_scale = 8;
  if (this->star_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->star_scale(), target);
  }

  // optional float mb_scale = 9;
  if (this->mb_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mb_scale(), target);
  }

  // optional float bats_scale = 10;
  if (this->bats_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->bats_scale(), target);
  }

  // optional float sb_scale = 11;
  if (this->sb_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->sb_scale(), target);
  }

  // optional float offmap_z = 12;
  if (this->offmap_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->offmap_z(), target);
  }

  // optional float offmap_border_thickness = 13;
  if (this->offmap_border_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->offmap_border_thickness(), target);
  }

  // optional float offmap_label_size = 14;
  if (this->offmap_label_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->offmap_label_size(), target);
  }

  // optional float offmap_left_right_thickness = 15;
  if (this->offmap_left_right_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->offmap_left_right_thickness(), target);
  }

  // optional float offmap_top_bottom_thickness = 16;
  if (this->offmap_top_bottom_thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->offmap_top_bottom_thickness(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.visual_config.hex_map_t)
  return target;
}

int hex_map_t::ByteSize() const {
  int total_size = 0;

  // optional float national_border_thickness = 3;
  if (this->national_border_thickness() != 0) {
    total_size += 1 + 4;
  }

  // optional float province_border_thickness = 4;
  if (this->province_border_thickness() != 0) {
    total_size += 1 + 4;
  }

  // optional float planet_star_thickness = 5;
  if (this->planet_star_thickness() != 0) {
    total_size += 1 + 4;
  }

  // optional float minor_planet_scale = 6;
  if (this->minor_planet_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional float major_planet_scale = 7;
  if (this->major_planet_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional float star_scale = 8;
  if (this->star_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional float mb_scale = 9;
  if (this->mb_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional float bats_scale = 10;
  if (this->bats_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional float sb_scale = 11;
  if (this->sb_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional float offmap_z = 12;
  if (this->offmap_z() != 0) {
    total_size += 1 + 4;
  }

  // optional float offmap_border_thickness = 13;
  if (this->offmap_border_thickness() != 0) {
    total_size += 1 + 4;
  }

  // optional float offmap_label_size = 14;
  if (this->offmap_label_size() != 0) {
    total_size += 1 + 4;
  }

  // optional float offmap_left_right_thickness = 15;
  if (this->offmap_left_right_thickness() != 0) {
    total_size += 1 + 4;
  }

  // optional float offmap_top_bottom_thickness = 16;
  if (this->offmap_top_bottom_thickness() != 0) {
    total_size += 2 + 4;
  }

  // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
  total_size += 1 * this->primary_colors_size();
  {
    ::google::protobuf::scoped_ptr<hex_map_t_PrimaryColorsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >::const_iterator
        it = this->primary_colors().begin();
        it != this->primary_colors().end(); ++it) {
      entry.reset(primary_colors_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
  total_size += 1 * this->secondary_colors_size();
  {
    ::google::protobuf::scoped_ptr<hex_map_t_SecondaryColorsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >::const_iterator
        it = this->secondary_colors().begin();
        it != this->secondary_colors().end(); ++it) {
      entry.reset(secondary_colors_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hex_map_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hex_map_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hex_map_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hex_map_t::MergeFrom(const hex_map_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  primary_colors_.MergeFrom(from.primary_colors_);
  secondary_colors_.MergeFrom(from.secondary_colors_);
  if (from.national_border_thickness() != 0) {
    set_national_border_thickness(from.national_border_thickness());
  }
  if (from.province_border_thickness() != 0) {
    set_province_border_thickness(from.province_border_thickness());
  }
  if (from.planet_star_thickness() != 0) {
    set_planet_star_thickness(from.planet_star_thickness());
  }
  if (from.minor_planet_scale() != 0) {
    set_minor_planet_scale(from.minor_planet_scale());
  }
  if (from.major_planet_scale() != 0) {
    set_major_planet_scale(from.major_planet_scale());
  }
  if (from.star_scale() != 0) {
    set_star_scale(from.star_scale());
  }
  if (from.mb_scale() != 0) {
    set_mb_scale(from.mb_scale());
  }
  if (from.bats_scale() != 0) {
    set_bats_scale(from.bats_scale());
  }
  if (from.sb_scale() != 0) {
    set_sb_scale(from.sb_scale());
  }
  if (from.offmap_z() != 0) {
    set_offmap_z(from.offmap_z());
  }
  if (from.offmap_border_thickness() != 0) {
    set_offmap_border_thickness(from.offmap_border_thickness());
  }
  if (from.offmap_label_size() != 0) {
    set_offmap_label_size(from.offmap_label_size());
  }
  if (from.offmap_left_right_thickness() != 0) {
    set_offmap_left_right_thickness(from.offmap_left_right_thickness());
  }
  if (from.offmap_top_bottom_thickness() != 0) {
    set_offmap_top_bottom_thickness(from.offmap_top_bottom_thickness());
  }
}

void hex_map_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_map_t::CopyFrom(const hex_map_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_map_t::IsInitialized() const {

  return true;
}

void hex_map_t::Swap(hex_map_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hex_map_t::InternalSwap(hex_map_t* other) {
  primary_colors_.Swap(&other->primary_colors_);
  secondary_colors_.Swap(&other->secondary_colors_);
  std::swap(national_border_thickness_, other->national_border_thickness_);
  std::swap(province_border_thickness_, other->province_border_thickness_);
  std::swap(planet_star_thickness_, other->planet_star_thickness_);
  std::swap(minor_planet_scale_, other->minor_planet_scale_);
  std::swap(major_planet_scale_, other->major_planet_scale_);
  std::swap(star_scale_, other->star_scale_);
  std::swap(mb_scale_, other->mb_scale_);
  std::swap(bats_scale_, other->bats_scale_);
  std::swap(sb_scale_, other->sb_scale_);
  std::swap(offmap_z_, other->offmap_z_);
  std::swap(offmap_border_thickness_, other->offmap_border_thickness_);
  std::swap(offmap_label_size_, other->offmap_label_size_);
  std::swap(offmap_left_right_thickness_, other->offmap_left_right_thickness_);
  std::swap(offmap_top_bottom_thickness_, other->offmap_top_bottom_thickness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hex_map_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hex_map_t_descriptor_;
  metadata.reflection = hex_map_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hex_map_t

// map<string, .pb_message.visual_config.color_t> primary_colors = 1;
int hex_map_t::primary_colors_size() const {
  return primary_colors_.size();
}
void hex_map_t::clear_primary_colors() {
  primary_colors_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >&
hex_map_t::primary_colors() const {
  // @@protoc_insertion_point(field_map:pb_message.visual_config.hex_map_t.primary_colors)
  return primary_colors_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >*
hex_map_t::mutable_primary_colors() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.visual_config.hex_map_t.primary_colors)
  return primary_colors_.MutableMap();
}

// map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
int hex_map_t::secondary_colors_size() const {
  return secondary_colors_.size();
}
void hex_map_t::clear_secondary_colors() {
  secondary_colors_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >&
hex_map_t::secondary_colors() const {
  // @@protoc_insertion_point(field_map:pb_message.visual_config.hex_map_t.secondary_colors)
  return secondary_colors_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::visual_config::color_t >*
hex_map_t::mutable_secondary_colors() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.visual_config.hex_map_t.secondary_colors)
  return secondary_colors_.MutableMap();
}

// optional float national_border_thickness = 3;
void hex_map_t::clear_national_border_thickness() {
  national_border_thickness_ = 0;
}
 float hex_map_t::national_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.national_border_thickness)
  return national_border_thickness_;
}
 void hex_map_t::set_national_border_thickness(float value) {
  
  national_border_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.national_border_thickness)
}

// optional float province_border_thickness = 4;
void hex_map_t::clear_province_border_thickness() {
  province_border_thickness_ = 0;
}
 float hex_map_t::province_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.province_border_thickness)
  return province_border_thickness_;
}
 void hex_map_t::set_province_border_thickness(float value) {
  
  province_border_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.province_border_thickness)
}

// optional float planet_star_thickness = 5;
void hex_map_t::clear_planet_star_thickness() {
  planet_star_thickness_ = 0;
}
 float hex_map_t::planet_star_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.planet_star_thickness)
  return planet_star_thickness_;
}
 void hex_map_t::set_planet_star_thickness(float value) {
  
  planet_star_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.planet_star_thickness)
}

// optional float minor_planet_scale = 6;
void hex_map_t::clear_minor_planet_scale() {
  minor_planet_scale_ = 0;
}
 float hex_map_t::minor_planet_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.minor_planet_scale)
  return minor_planet_scale_;
}
 void hex_map_t::set_minor_planet_scale(float value) {
  
  minor_planet_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.minor_planet_scale)
}

// optional float major_planet_scale = 7;
void hex_map_t::clear_major_planet_scale() {
  major_planet_scale_ = 0;
}
 float hex_map_t::major_planet_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.major_planet_scale)
  return major_planet_scale_;
}
 void hex_map_t::set_major_planet_scale(float value) {
  
  major_planet_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.major_planet_scale)
}

// optional float star_scale = 8;
void hex_map_t::clear_star_scale() {
  star_scale_ = 0;
}
 float hex_map_t::star_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.star_scale)
  return star_scale_;
}
 void hex_map_t::set_star_scale(float value) {
  
  star_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.star_scale)
}

// optional float mb_scale = 9;
void hex_map_t::clear_mb_scale() {
  mb_scale_ = 0;
}
 float hex_map_t::mb_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.mb_scale)
  return mb_scale_;
}
 void hex_map_t::set_mb_scale(float value) {
  
  mb_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.mb_scale)
}

// optional float bats_scale = 10;
void hex_map_t::clear_bats_scale() {
  bats_scale_ = 0;
}
 float hex_map_t::bats_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.bats_scale)
  return bats_scale_;
}
 void hex_map_t::set_bats_scale(float value) {
  
  bats_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.bats_scale)
}

// optional float sb_scale = 11;
void hex_map_t::clear_sb_scale() {
  sb_scale_ = 0;
}
 float hex_map_t::sb_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.sb_scale)
  return sb_scale_;
}
 void hex_map_t::set_sb_scale(float value) {
  
  sb_scale_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.sb_scale)
}

// optional float offmap_z = 12;
void hex_map_t::clear_offmap_z() {
  offmap_z_ = 0;
}
 float hex_map_t::offmap_z() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_z)
  return offmap_z_;
}
 void hex_map_t::set_offmap_z(float value) {
  
  offmap_z_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_z)
}

// optional float offmap_border_thickness = 13;
void hex_map_t::clear_offmap_border_thickness() {
  offmap_border_thickness_ = 0;
}
 float hex_map_t::offmap_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_border_thickness)
  return offmap_border_thickness_;
}
 void hex_map_t::set_offmap_border_thickness(float value) {
  
  offmap_border_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_border_thickness)
}

// optional float offmap_label_size = 14;
void hex_map_t::clear_offmap_label_size() {
  offmap_label_size_ = 0;
}
 float hex_map_t::offmap_label_size() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_label_size)
  return offmap_label_size_;
}
 void hex_map_t::set_offmap_label_size(float value) {
  
  offmap_label_size_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_label_size)
}

// optional float offmap_left_right_thickness = 15;
void hex_map_t::clear_offmap_left_right_thickness() {
  offmap_left_right_thickness_ = 0;
}
 float hex_map_t::offmap_left_right_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_left_right_thickness)
  return offmap_left_right_thickness_;
}
 void hex_map_t::set_offmap_left_right_thickness(float value) {
  
  offmap_left_right_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_left_right_thickness)
}

// optional float offmap_top_bottom_thickness = 16;
void hex_map_t::clear_offmap_top_bottom_thickness() {
  offmap_top_bottom_thickness_ = 0;
}
 float hex_map_t::offmap_top_bottom_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_top_bottom_thickness)
  return offmap_top_bottom_thickness_;
}
 void hex_map_t::set_offmap_top_bottom_thickness(float value) {
  
  offmap_top_bottom_thickness_ = value;
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_top_bottom_thickness)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace visual_config
}  // namespace pb_message

// @@protoc_insertion_point(global_scope)
