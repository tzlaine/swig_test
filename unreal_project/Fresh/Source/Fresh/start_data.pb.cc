// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: start_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "start_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb_message {

namespace {

const ::google::protobuf::Descriptor* capital_hex_zone_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  capital_hex_zone_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* capital_hex_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  capital_hex_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* capital_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  capital_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* offmap_possesions_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offmap_possesions_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* nation_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nation_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* nations_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nations_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* nations_t_NationsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hex_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hex_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_hex_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_hex_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* province_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  province_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* offmap_area_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offmap_area_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* starting_national_holdings_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  starting_national_holdings_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  map_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* map_t_StartingNationalHoldingsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* model_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  model_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* oob_unit_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  oob_unit_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* production_element_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  production_element_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* starting_fleet_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  starting_fleet_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* starting_fleet_t_HexPlacementLimitsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* mothball_reserve_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mothball_reserve_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* order_of_battle_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_of_battle_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* order_of_battle_t_StartingFleetsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* orders_of_battle_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  orders_of_battle_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* orders_of_battle_t_OobsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* unit_def_side_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_def_side_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* towable_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  towable_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* production_cost_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  production_cost_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_def_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_def_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_def_t_SubstitutionsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* unit_def_t_ConversionsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* nation_unit_defs_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nation_unit_defs_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_defs_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_defs_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* unit_defs_t_NationUnitsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* team_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* scenario_condition_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scenario_condition_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* scenario_condition_t_object_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scenario_condition_t_object_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* scenario_condition_t_action_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* scenario_condition_t_object_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* fleet_release_condition_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fleet_release_condition_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* war_entry_condition_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  war_entry_condition_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* scenario_turn_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scenario_turn_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* scenario_turn_t_national_action_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scenario_turn_t_national_action_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* scenario_turn_t_national_action_t_action_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scenario_turn_t_national_action_t_action_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* scenario_turn_t_national_action_t_action_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* scenario_turn_t_NationalActionsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* scenario_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scenario_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* scenario_t_nation_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scenario_t_nation_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* scenario_t_NationsEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* feature_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_start_5fdata_2eproto() {
  protobuf_AddDesc_start_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "start_data.proto");
  GOOGLE_CHECK(file != NULL);
  capital_hex_zone_t_descriptor_ = file->message_type(0);
  static const int capital_hex_zone_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_zone_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_zone_t, features_),
  };
  capital_hex_zone_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      capital_hex_zone_t_descriptor_,
      capital_hex_zone_t::default_instance_,
      capital_hex_zone_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(capital_hex_zone_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_zone_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_zone_t, _is_default_instance_));
  capital_hex_t_descriptor_ = file->message_type(1);
  static const int capital_hex_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_t, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_t, zones_),
  };
  capital_hex_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      capital_hex_t_descriptor_,
      capital_hex_t::default_instance_,
      capital_hex_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(capital_hex_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_hex_t, _is_default_instance_));
  capital_t_descriptor_ = file->message_type(2);
  static const int capital_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_t, hexes_),
  };
  capital_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      capital_t_descriptor_,
      capital_t::default_instance_,
      capital_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(capital_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(capital_t, _is_default_instance_));
  offmap_possesions_t_descriptor_ = file->message_type(3);
  static const int offmap_possesions_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, provinces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, mins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, majs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, survey_ships_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, cannot_build_offmap_capital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, old_shipyard_),
  };
  offmap_possesions_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      offmap_possesions_t_descriptor_,
      offmap_possesions_t::default_instance_,
      offmap_possesions_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(offmap_possesions_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_possesions_t, _is_default_instance_));
  nation_t_descriptor_ = file->message_type(4);
  static const int nation_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, capital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, free_strategic_moves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, capital_star_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, offmap_possesions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, nation_id_),
  };
  nation_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nation_t_descriptor_,
      nation_t::default_instance_,
      nation_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(nation_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_t, _is_default_instance_));
  nations_t_descriptor_ = file->message_type(5);
  static const int nations_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nations_t, nations_),
  };
  nations_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nations_t_descriptor_,
      nations_t::default_instance_,
      nations_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(nations_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nations_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nations_t, _is_default_instance_));
  nations_t_NationsEntry_descriptor_ = nations_t_descriptor_->nested_type(0);
  hex_t_descriptor_ = file->message_type(6);
  static const int hex_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, feature_),
  };
  hex_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hex_t_descriptor_,
      hex_t::default_instance_,
      hex_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(hex_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hex_t, _is_default_instance_));
  province_hex_t_descriptor_ = file->message_type(7);
  static const int province_hex_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_hex_t, hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_hex_t, feature_),
  };
  province_hex_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      province_hex_t_descriptor_,
      province_hex_t::default_instance_,
      province_hex_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(province_hex_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_hex_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_hex_t, _is_default_instance_));
  province_t_descriptor_ = file->message_type(8);
  static const int province_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, hexes_),
  };
  province_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      province_t_descriptor_,
      province_t::default_instance_,
      province_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(province_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(province_t, _is_default_instance_));
  offmap_area_t_descriptor_ = file->message_type(9);
  static const int offmap_area_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, feature_hexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, adjacent_hexes_),
  };
  offmap_area_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      offmap_area_t_descriptor_,
      offmap_area_t::default_instance_,
      offmap_area_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(offmap_area_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offmap_area_t, _is_default_instance_));
  starting_national_holdings_t_descriptor_ = file->message_type(10);
  static const int starting_national_holdings_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_national_holdings_t, provinces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_national_holdings_t, offmap_area_),
  };
  starting_national_holdings_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      starting_national_holdings_t_descriptor_,
      starting_national_holdings_t::default_instance_,
      starting_national_holdings_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(starting_national_holdings_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_national_holdings_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_national_holdings_t, _is_default_instance_));
  map_t_descriptor_ = file->message_type(11);
  static const int map_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, nz_planets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, nz_hexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, starting_national_holdings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, hexes_),
  };
  map_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      map_t_descriptor_,
      map_t::default_instance_,
      map_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(map_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(map_t, _is_default_instance_));
  map_t_StartingNationalHoldingsEntry_descriptor_ = map_t_descriptor_->nested_type(0);
  model_t_descriptor_ = file->message_type(12);
  static const int model_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_t, nations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_t, map_),
  };
  model_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      model_t_descriptor_,
      model_t::default_instance_,
      model_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(model_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(model_t, _is_default_instance_));
  oob_unit_t_descriptor_ = file->message_type(13);
  static const int oob_unit_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oob_unit_t, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oob_unit_t, times_),
  };
  oob_unit_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      oob_unit_t_descriptor_,
      oob_unit_t::default_instance_,
      oob_unit_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(oob_unit_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oob_unit_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oob_unit_t, _is_default_instance_));
  production_element_t_descriptor_ = file->message_type(14);
  static const int production_element_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_element_t, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_element_t, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_element_t, units_),
  };
  production_element_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      production_element_t_descriptor_,
      production_element_t::default_instance_,
      production_element_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(production_element_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_element_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_element_t, _is_default_instance_));
  starting_fleet_t_descriptor_ = file->message_type(15);
  static const int starting_fleet_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, hexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, prewar_construction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, strategic_move_arrival_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, strategic_move_arrival_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, hex_placement_limits_),
  };
  starting_fleet_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      starting_fleet_t_descriptor_,
      starting_fleet_t::default_instance_,
      starting_fleet_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(starting_fleet_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starting_fleet_t, _is_default_instance_));
  starting_fleet_t_HexPlacementLimitsEntry_descriptor_ = starting_fleet_t_descriptor_->nested_type(0);
  mothball_reserve_t_descriptor_ = file->message_type(16);
  static const int mothball_reserve_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mothball_reserve_t, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mothball_reserve_t, war_release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mothball_reserve_t, limited_war_release_),
  };
  mothball_reserve_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      mothball_reserve_t_descriptor_,
      mothball_reserve_t::default_instance_,
      mothball_reserve_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(mothball_reserve_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mothball_reserve_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mothball_reserve_t, _is_default_instance_));
  order_of_battle_t_descriptor_ = file->message_type(17);
  static const int order_of_battle_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_of_battle_t, starting_fleets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_of_battle_t, mothball_reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_of_battle_t, production_),
  };
  order_of_battle_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      order_of_battle_t_descriptor_,
      order_of_battle_t::default_instance_,
      order_of_battle_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(order_of_battle_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_of_battle_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_of_battle_t, _is_default_instance_));
  order_of_battle_t_StartingFleetsEntry_descriptor_ = order_of_battle_t_descriptor_->nested_type(0);
  orders_of_battle_t_descriptor_ = file->message_type(18);
  static const int orders_of_battle_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(orders_of_battle_t, oobs_),
  };
  orders_of_battle_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      orders_of_battle_t_descriptor_,
      orders_of_battle_t::default_instance_,
      orders_of_battle_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(orders_of_battle_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(orders_of_battle_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(orders_of_battle_t, _is_default_instance_));
  orders_of_battle_t_OobsEntry_descriptor_ = orders_of_battle_t_descriptor_->nested_type(0);
  unit_def_side_t_descriptor_ = file->message_type(19);
  static const int unit_def_side_t_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, scout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, fighters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, heavy_fighter_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, pfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, drones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, mauler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, tug_missions_),
  };
  unit_def_side_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      unit_def_side_t_descriptor_,
      unit_def_side_t::default_instance_,
      unit_def_side_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(unit_def_side_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_side_t, _is_default_instance_));
  towable_t_descriptor_ = file->message_type(20);
  static const int towable_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(towable_t, move_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(towable_t, strat_move_limit_),
  };
  towable_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      towable_t_descriptor_,
      towable_t::default_instance_,
      towable_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(towable_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(towable_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(towable_t, _is_default_instance_));
  production_cost_t_descriptor_ = file->message_type(21);
  static const int production_cost_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_cost_t, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_cost_t, fighter_cost_),
  };
  production_cost_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      production_cost_t_descriptor_,
      production_cost_t::default_instance_,
      production_cost_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(production_cost_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_cost_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(production_cost_t, _is_default_instance_));
  unit_def_t_descriptor_ = file->message_type(22);
  static const int unit_def_t_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, uncrippled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, crippled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, escort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, pod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, max_in_service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, construction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, substitutions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, conversions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, carrier_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, not_spaceworthy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, towable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, salvage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, notes_),
  };
  unit_def_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      unit_def_t_descriptor_,
      unit_def_t::default_instance_,
      unit_def_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(unit_def_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_def_t, _is_default_instance_));
  unit_def_t_SubstitutionsEntry_descriptor_ = unit_def_t_descriptor_->nested_type(0);
  unit_def_t_ConversionsEntry_descriptor_ = unit_def_t_descriptor_->nested_type(1);
  nation_unit_defs_t_descriptor_ = file->message_type(23);
  static const int nation_unit_defs_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_unit_defs_t, units_),
  };
  nation_unit_defs_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nation_unit_defs_t_descriptor_,
      nation_unit_defs_t::default_instance_,
      nation_unit_defs_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(nation_unit_defs_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_unit_defs_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nation_unit_defs_t, _is_default_instance_));
  unit_defs_t_descriptor_ = file->message_type(24);
  static const int unit_defs_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_defs_t, nation_units_),
  };
  unit_defs_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      unit_defs_t_descriptor_,
      unit_defs_t::default_instance_,
      unit_defs_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(unit_defs_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_defs_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_defs_t, _is_default_instance_));
  unit_defs_t_NationUnitsEntry_descriptor_ = unit_defs_t_descriptor_->nested_type(0);
  team_t_descriptor_ = file->message_type(25);
  static const int team_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, nations_),
  };
  team_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      team_t_descriptor_,
      team_t::default_instance_,
      team_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(team_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_t, _is_default_instance_));
  scenario_condition_t_descriptor_ = file->message_type(26);
  static const int scenario_condition_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t, actors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t, one_of_),
  };
  scenario_condition_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      scenario_condition_t_descriptor_,
      scenario_condition_t::default_instance_,
      scenario_condition_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(scenario_condition_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t, _is_default_instance_));
  scenario_condition_t_object_t_descriptor_ = scenario_condition_t_descriptor_->nested_type(0);
  static const int scenario_condition_t_object_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t_object_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t_object_t, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t_object_t, hexes_),
  };
  scenario_condition_t_object_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      scenario_condition_t_object_t_descriptor_,
      scenario_condition_t_object_t::default_instance_,
      scenario_condition_t_object_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(scenario_condition_t_object_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t_object_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_condition_t_object_t, _is_default_instance_));
  scenario_condition_t_action_t_descriptor_ = scenario_condition_t_descriptor_->enum_type(0);
  scenario_condition_t_object_type_t_descriptor_ = scenario_condition_t_descriptor_->enum_type(1);
  fleet_release_condition_t_descriptor_ = file->message_type(27);
  static const int fleet_release_condition_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleet_release_condition_t, fleet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleet_release_condition_t, condition_),
  };
  fleet_release_condition_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      fleet_release_condition_t_descriptor_,
      fleet_release_condition_t::default_instance_,
      fleet_release_condition_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(fleet_release_condition_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleet_release_condition_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fleet_release_condition_t, _is_default_instance_));
  war_entry_condition_t_descriptor_ = file->message_type(28);
  static const int war_entry_condition_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_entry_condition_t, economy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_entry_condition_t, condition_),
  };
  war_entry_condition_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      war_entry_condition_t_descriptor_,
      war_entry_condition_t::default_instance_,
      war_entry_condition_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(war_entry_condition_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_entry_condition_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_entry_condition_t, _is_default_instance_));
  scenario_turn_t_descriptor_ = file->message_type(29);
  static const int scenario_turn_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t, national_actions_),
  };
  scenario_turn_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      scenario_turn_t_descriptor_,
      scenario_turn_t::default_instance_,
      scenario_turn_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(scenario_turn_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t, _is_default_instance_));
  scenario_turn_t_national_action_t_descriptor_ = scenario_turn_t_descriptor_->nested_type(0);
  static const int scenario_turn_t_national_action_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t_national_action_t, actions_),
  };
  scenario_turn_t_national_action_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      scenario_turn_t_national_action_t_descriptor_,
      scenario_turn_t_national_action_t::default_instance_,
      scenario_turn_t_national_action_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(scenario_turn_t_national_action_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t_national_action_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t_national_action_t, _is_default_instance_));
  scenario_turn_t_national_action_t_action_t_descriptor_ = scenario_turn_t_national_action_t_descriptor_->nested_type(0);
  static const int scenario_turn_t_national_action_t_action_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t_national_action_t_action_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t_national_action_t_action_t, names_),
  };
  scenario_turn_t_national_action_t_action_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      scenario_turn_t_national_action_t_action_t_descriptor_,
      scenario_turn_t_national_action_t_action_t::default_instance_,
      scenario_turn_t_national_action_t_action_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(scenario_turn_t_national_action_t_action_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t_national_action_t_action_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_turn_t_national_action_t_action_t, _is_default_instance_));
  scenario_turn_t_national_action_t_action_type_t_descriptor_ = scenario_turn_t_national_action_t_descriptor_->enum_type(0);
  scenario_turn_t_NationalActionsEntry_descriptor_ = scenario_turn_t_descriptor_->nested_type(1);
  scenario_t_descriptor_ = file->message_type(30);
  static const int scenario_t_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, start_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, team_turn_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, order_of_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, setup_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, nations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, turns_),
  };
  scenario_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      scenario_t_descriptor_,
      scenario_t::default_instance_,
      scenario_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(scenario_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t, _is_default_instance_));
  scenario_t_nation_t_descriptor_ = scenario_t_descriptor_->nested_type(0);
  static const int scenario_t_nation_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, at_war_with_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, future_belligerents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, economy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, exhaustion_turns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, accumulate_exhaustion_at_peace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, release_conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, war_entry_conditions_),
  };
  scenario_t_nation_t_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      scenario_t_nation_t_descriptor_,
      scenario_t_nation_t::default_instance_,
      scenario_t_nation_t_offsets_,
      -1,
      -1,
      -1,
      sizeof(scenario_t_nation_t),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scenario_t_nation_t, _is_default_instance_));
  scenario_t_NationsEntry_descriptor_ = scenario_t_descriptor_->nested_type(1);
  feature_t_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_start_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      capital_hex_zone_t_descriptor_, &capital_hex_zone_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      capital_hex_t_descriptor_, &capital_hex_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      capital_t_descriptor_, &capital_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      offmap_possesions_t_descriptor_, &offmap_possesions_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nation_t_descriptor_, &nation_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nations_t_descriptor_, &nations_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        nations_t_NationsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::nation_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                nations_t_NationsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hex_t_descriptor_, &hex_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      province_hex_t_descriptor_, &province_hex_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      province_t_descriptor_, &province_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      offmap_area_t_descriptor_, &offmap_area_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      starting_national_holdings_t_descriptor_, &starting_national_holdings_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      map_t_descriptor_, &map_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        map_t_StartingNationalHoldingsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::starting_national_holdings_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                map_t_StartingNationalHoldingsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      model_t_descriptor_, &model_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      oob_unit_t_descriptor_, &oob_unit_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      production_element_t_descriptor_, &production_element_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      starting_fleet_t_descriptor_, &starting_fleet_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        starting_fleet_t_HexPlacementLimitsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                starting_fleet_t_HexPlacementLimitsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      mothball_reserve_t_descriptor_, &mothball_reserve_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      order_of_battle_t_descriptor_, &order_of_battle_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        order_of_battle_t_StartingFleetsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::starting_fleet_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                order_of_battle_t_StartingFleetsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      orders_of_battle_t_descriptor_, &orders_of_battle_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        orders_of_battle_t_OobsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::order_of_battle_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                orders_of_battle_t_OobsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      unit_def_side_t_descriptor_, &unit_def_side_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      towable_t_descriptor_, &towable_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      production_cost_t_descriptor_, &production_cost_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      unit_def_t_descriptor_, &unit_def_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        unit_def_t_SubstitutionsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::production_cost_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                unit_def_t_SubstitutionsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        unit_def_t_ConversionsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::production_cost_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                unit_def_t_ConversionsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nation_unit_defs_t_descriptor_, &nation_unit_defs_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      unit_defs_t_descriptor_, &unit_defs_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        unit_defs_t_NationUnitsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::nation_unit_defs_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                unit_defs_t_NationUnitsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      team_t_descriptor_, &team_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      scenario_condition_t_descriptor_, &scenario_condition_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      scenario_condition_t_object_t_descriptor_, &scenario_condition_t_object_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      fleet_release_condition_t_descriptor_, &fleet_release_condition_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      war_entry_condition_t_descriptor_, &war_entry_condition_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      scenario_turn_t_descriptor_, &scenario_turn_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      scenario_turn_t_national_action_t_descriptor_, &scenario_turn_t_national_action_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      scenario_turn_t_national_action_t_action_t_descriptor_, &scenario_turn_t_national_action_t_action_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        scenario_turn_t_NationalActionsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::scenario_turn_t_national_action_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                scenario_turn_t_NationalActionsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      scenario_t_descriptor_, &scenario_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      scenario_t_nation_t_descriptor_, &scenario_t_nation_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        scenario_t_NationsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::pb_message::scenario_t_nation_t,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                scenario_t_NationsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_start_5fdata_2eproto() {
  delete capital_hex_zone_t::default_instance_;
  delete capital_hex_zone_t_reflection_;
  delete capital_hex_t::default_instance_;
  delete capital_hex_t_reflection_;
  delete capital_t::default_instance_;
  delete capital_t_reflection_;
  delete offmap_possesions_t::default_instance_;
  delete offmap_possesions_t_reflection_;
  delete nation_t::default_instance_;
  delete nation_t_reflection_;
  delete nations_t::default_instance_;
  delete nations_t_reflection_;
  delete hex_t::default_instance_;
  delete hex_t_reflection_;
  delete province_hex_t::default_instance_;
  delete province_hex_t_reflection_;
  delete province_t::default_instance_;
  delete province_t_reflection_;
  delete offmap_area_t::default_instance_;
  delete offmap_area_t_reflection_;
  delete starting_national_holdings_t::default_instance_;
  delete starting_national_holdings_t_reflection_;
  delete map_t::default_instance_;
  delete map_t_reflection_;
  delete model_t::default_instance_;
  delete model_t_reflection_;
  delete oob_unit_t::default_instance_;
  delete oob_unit_t_reflection_;
  delete production_element_t::default_instance_;
  delete production_element_t_reflection_;
  delete starting_fleet_t::default_instance_;
  delete starting_fleet_t_reflection_;
  delete mothball_reserve_t::default_instance_;
  delete mothball_reserve_t_reflection_;
  delete order_of_battle_t::default_instance_;
  delete order_of_battle_t_reflection_;
  delete orders_of_battle_t::default_instance_;
  delete orders_of_battle_t_reflection_;
  delete unit_def_side_t::default_instance_;
  delete unit_def_side_t_reflection_;
  delete towable_t::default_instance_;
  delete towable_t_reflection_;
  delete production_cost_t::default_instance_;
  delete production_cost_t_reflection_;
  delete unit_def_t::default_instance_;
  delete unit_def_t_reflection_;
  delete nation_unit_defs_t::default_instance_;
  delete nation_unit_defs_t_reflection_;
  delete unit_defs_t::default_instance_;
  delete unit_defs_t_reflection_;
  delete team_t::default_instance_;
  delete team_t_reflection_;
  delete scenario_condition_t::default_instance_;
  delete scenario_condition_t_reflection_;
  delete scenario_condition_t_object_t::default_instance_;
  delete scenario_condition_t_object_t_reflection_;
  delete fleet_release_condition_t::default_instance_;
  delete fleet_release_condition_t_reflection_;
  delete war_entry_condition_t::default_instance_;
  delete war_entry_condition_t_reflection_;
  delete scenario_turn_t::default_instance_;
  delete scenario_turn_t_reflection_;
  delete scenario_turn_t_national_action_t::default_instance_;
  delete scenario_turn_t_national_action_t_reflection_;
  delete scenario_turn_t_national_action_t_action_t::default_instance_;
  delete scenario_turn_t_national_action_t_action_t_reflection_;
  delete scenario_t::default_instance_;
  delete scenario_t_reflection_;
  delete scenario_t_nation_t::default_instance_;
  delete scenario_t_nation_t_reflection_;
}

void protobuf_AddDesc_start_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb_message::protobuf_AddDesc_base_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020start_data.proto\022\npb_message\032\020base_typ"
    "es.proto\"O\n\022capital_hex_zone_t\022\014\n\004name\030\001"
    " \001(\t\022+\n\010features\030\002 \003(\0162\025.pb_message.feat"
    "ure_tB\002\020\001\"M\n\rcapital_hex_t\022\r\n\005coord\030\001 \001("
    "\005\022-\n\005zones\030\002 \003(\0132\036.pb_message.capital_he"
    "x_zone_t\"5\n\tcapital_t\022(\n\005hexes\030\001 \003(\0132\031.p"
    "b_message.capital_hex_t\"\225\001\n\023offmap_posse"
    "sions_t\022\021\n\tprovinces\030\001 \001(\005\022\014\n\004mins\030\002 \001(\005"
    "\022\014\n\004majs\030\003 \001(\005\022\024\n\014survey_ships\030\004 \001(\005\022#\n\033"
    "cannot_build_offmap_capital\030\005 \001(\010\022\024\n\014old"
    "_shipyard\030\006 \001(\010\"\336\001\n\010nation_t\022\014\n\004name\030\001 \001"
    "(\t\022\022\n\nshort_name\030\002 \001(\t\022&\n\007capital\030\003 \001(\0132"
    "\025.pb_message.capital_t\022\034\n\024free_strategic"
    "_moves\030\004 \001(\005\022\033\n\023capital_star_points\030\005 \001("
    "\005\022:\n\021offmap_possesions\030\006 \001(\0132\037.pb_messag"
    "e.offmap_possesions_t\022\021\n\tnation_id\030\007 \001(\005"
    "\"\206\001\n\tnations_t\0223\n\007nations\030\001 \003(\0132\".pb_mes"
    "sage.nations_t.NationsEntry\032D\n\014NationsEn"
    "try\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.pb_mes"
    "sage.nation_t:\0028\001\"f\n\005hex_t\022&\n\005coord\030\001 \001("
    "\0132\027.pb_message.hex_coord_t\022\r\n\005owner\030\002 \001("
    "\005\022&\n\007feature\030\003 \001(\0162\025.pb_message.feature_"
    "t\"E\n\016province_hex_t\022\013\n\003hex\030\001 \001(\005\022&\n\007feat"
    "ure\030\002 \001(\0162\025.pb_message.feature_t\"7\n\nprov"
    "ince_t\022)\n\005hexes\030\001 \003(\0132\032.pb_message.provi"
    "nce_hex_t\"\201\001\n\roffmap_area_t\022\014\n\004name\030\001 \001("
    "\t\022+\n\010features\030\002 \003(\0162\025.pb_message.feature"
    "_tB\002\020\001\022\031\n\rfeature_hexes\030\003 \003(\005B\002\020\001\022\032\n\016adj"
    "acent_hexes\030\004 \003(\005B\002\020\001\"y\n\034starting_nation"
    "al_holdings_t\022)\n\tprovinces\030\001 \003(\0132\026.pb_me"
    "ssage.province_t\022.\n\013offmap_area\030\002 \001(\0132\031."
    "pb_message.offmap_area_t\"\266\002\n\005map_t\022\r\n\005wi"
    "dth\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\026\n\nnz_planets\030"
    "\003 \003(\005B\002\020\001\022\024\n\010nz_hexes\030\004 \003(\005B\002\020\001\022S\n\032start"
    "ing_national_holdings\030\005 \003(\0132/.pb_message"
    ".map_t.StartingNationalHoldingsEntry\022 \n\005"
    "hexes\030\006 \003(\0132\021.pb_message.hex_t\032i\n\035Starti"
    "ngNationalHoldingsEntry\022\013\n\003key\030\001 \001(\t\0227\n\005"
    "value\030\002 \001(\0132(.pb_message.starting_nation"
    "al_holdings_t:\0028\001\"Q\n\007model_t\022&\n\007nations\030"
    "\001 \001(\0132\025.pb_message.nations_t\022\036\n\003map\030\002 \001("
    "\0132\021.pb_message.map_t\")\n\noob_unit_t\022\014\n\004un"
    "it\030\001 \001(\t\022\r\n\005times\030\002 \001(\005\"q\n\024production_el"
    "ement_t\022\014\n\004year\030\001 \001(\005\022$\n\006season\030\002 \001(\0162\024."
    "pb_message.season_t\022%\n\005units\030\003 \003(\0132\026.pb_"
    "message.oob_unit_t\"\215\003\n\020starting_fleet_t\022"
    "\021\n\005hexes\030\001 \003(\005B\002\020\001\022%\n\005units\030\002 \003(\0132\026.pb_m"
    "essage.oob_unit_t\022\017\n\007reserve\030\003 \001(\010\022=\n\023pr"
    "ewar_construction\030\004 \003(\0132 .pb_message.pro"
    "duction_element_t\022#\n\033strategic_move_arri"
    "val_year\030\005 \001(\005\022;\n\035strategic_move_arrival"
    "_season\030\006 \001(\0162\024.pb_message.season_t\022R\n\024h"
    "ex_placement_limits\030\007 \003(\01324.pb_message.s"
    "tarting_fleet_t.HexPlacementLimitsEntry\032"
    "9\n\027HexPlacementLimitsEntry\022\013\n\003key\030\001 \001(\005\022"
    "\r\n\005value\030\002 \001(\005:\0028\001\"\235\001\n\022mothball_reserve_"
    "t\022%\n\005units\030\001 \003(\0132\026.pb_message.oob_unit_t"
    "\022+\n\013war_release\030\002 \003(\0132\026.pb_message.oob_u"
    "nit_t\0223\n\023limited_war_release\030\003 \003(\0132\026.pb_"
    "message.oob_unit_t\"\244\002\n\021order_of_battle_t"
    "\022J\n\017starting_fleets\030\001 \003(\01321.pb_message.o"
    "rder_of_battle_t.StartingFleetsEntry\0228\n\020"
    "mothball_reserve\030\002 \001(\0132\036.pb_message.moth"
    "ball_reserve_t\0224\n\nproduction\030\003 \003(\0132 .pb_"
    "message.production_element_t\032S\n\023Starting"
    "FleetsEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\0132"
    "\034.pb_message.starting_fleet_t:\0028\001\"\230\001\n\022or"
    "ders_of_battle_t\0226\n\004oobs\030\001 \003(\0132(.pb_mess"
    "age.orders_of_battle_t.OobsEntry\032J\n\tOobs"
    "Entry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.pb_m"
    "essage.order_of_battle_t:\0028\001\"\307\001\n\017unit_de"
    "f_side_t\022\013\n\003att\030\001 \001(\002\022\013\n\003def\030\002 \001(\002\022\r\n\005sc"
    "out\030\003 \001(\010\022\020\n\010fighters\030\004 \001(\002\022\033\n\023heavy_fig"
    "hter_bonus\030\005 \001(\002\022\013\n\003pfs\030\006 \001(\005\022\016\n\006drones\030"
    "\007 \001(\005\022\016\n\006mauler\030\010 \001(\010\022/\n\014tug_missions\030\t "
    "\003(\0162\031.pb_message.tug_mission_t\"8\n\ttowabl"
    "e_t\022\021\n\tmove_cost\030\001 \001(\005\022\030\n\020strat_move_lim"
    "it\030\002 \001(\005\"7\n\021production_cost_t\022\014\n\004cost\030\001 "
    "\001(\005\022\024\n\014fighter_cost\030\002 \001(\005\"\201\006\n\nunit_def_t"
    "\022\014\n\004name\030\001 \001(\t\022\013\n\003cmd\030\002 \001(\005\022/\n\nuncripple"
    "d\030\003 \001(\0132\033.pb_message.unit_def_side_t\022-\n\010"
    "crippled\030\004 \001(\0132\033.pb_message.unit_def_sid"
    "e_t\022.\n\013escort_type\030\005 \001(\0162\031.pb_message.es"
    "cort_type_t\022%\n\tavailable\030\006 \001(\0132\022.pb_mess"
    "age.turn_t\022\013\n\003pod\030\007 \001(\010\022\026\n\016max_in_servic"
    "e\030\010 \001(\005\0223\n\014construction\030\t \001(\0132\035.pb_messa"
    "ge.production_cost_t\022@\n\rsubstitutions\030\n "
    "\003(\0132).pb_message.unit_def_t.Substitution"
    "sEntry\022<\n\013conversions\030\013 \003(\0132\'.pb_message"
    ".unit_def_t.ConversionsEntry\022\014\n\004move\030\014 \001"
    "(\005\0220\n\014carrier_type\030\r \001(\0162\032.pb_message.ca"
    "rrier_type_t\022\027\n\017not_spaceworthy\030\016 \001(\010\022&\n"
    "\007towable\030\017 \001(\0132\025.pb_message.towable_t\022\017\n"
    "\007salvage\030\020 \001(\005\022\r\n\005notes\030\021 \001(\t\032S\n\022Substit"
    "utionsEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132"
    "\035.pb_message.production_cost_t:\0028\001\032Q\n\020Co"
    "nversionsEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001"
    "(\0132\035.pb_message.production_cost_t:\0028\001\";\n"
    "\022nation_unit_defs_t\022%\n\005units\030\001 \003(\0132\026.pb_"
    "message.unit_def_t\"\241\001\n\013unit_defs_t\022>\n\014na"
    "tion_units\030\001 \003(\0132(.pb_message.unit_defs_"
    "t.NationUnitsEntry\032R\n\020NationUnitsEntry\022\013"
    "\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.pb_message."
    "nation_unit_defs_t:\0028\001\"\'\n\006team_t\022\014\n\004name"
    "\030\001 \001(\t\022\017\n\007nations\030\002 \003(\t\"\354\002\n\024scenario_con"
    "dition_t\022\016\n\006actors\030\001 \003(\t\0229\n\006action\030\002 \001(\016"
    "2).pb_message.scenario_condition_t.actio"
    "n_t\0229\n\006one_of\030\003 \003(\0132).pb_message.scenari"
    "o_condition_t.object_t\032f\n\010object_t\022<\n\004ty"
    "pe\030\001 \001(\0162..pb_message.scenario_condition"
    "_t.object_type_t\022\r\n\005names\030\002 \003(\t\022\r\n\005hexes"
    "\030\003 \003(\005\"&\n\010action_t\022\014\n\010occupies\020\000\022\014\n\010dest"
    "roys\020\001\">\n\robject_type_t\022\t\n\005hexes\020\000\022\006\n\002sb"
    "\020\001\022\016\n\nfleet_area\020\002\022\n\n\006nation\020\003\"_\n\031fleet_"
    "release_condition_t\022\r\n\005fleet\030\001 \001(\t\0223\n\tco"
    "ndition\030\002 \001(\0132 .pb_message.scenario_cond"
    "ition_t\"x\n\025war_entry_condition_t\022*\n\007econ"
    "omy\030\003 \001(\0162\031.pb_message.war_footing_t\0223\n\t"
    "condition\030\002 \001(\0132 .pb_message.scenario_co"
    "ndition_t\"\315\003\n\017scenario_turn_t\022\014\n\004turn\030\001 "
    "\001(\005\022J\n\020national_actions\030\002 \003(\01320.pb_messa"
    "ge.scenario_turn_t.NationalActionsEntry\032"
    "\370\001\n\021national_action_t\022G\n\007actions\030\001 \003(\01326"
    ".pb_message.scenario_turn_t.national_act"
    "ion_t.action_t\032d\n\010action_t\022I\n\004type\030\001 \001(\016"
    "2;.pb_message.scenario_turn_t.national_a"
    "ction_t.action_type_t\022\r\n\005names\030\002 \003(\t\"4\n\r"
    "action_type_t\022\022\n\016release_fleets\020\000\022\017\n\013dec"
    "lare_war\020\001\032e\n\024NationalActionsEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022<\n\005value\030\002 \001(\0132-.pb_message.scen"
    "ario_turn_t.national_action_t:\0028\001\"\262\005\n\nsc"
    "enario_t\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 "
    "\001(\t\022&\n\nstart_turn\030\003 \001(\0132\022.pb_message.tur"
    "n_t\022!\n\005teams\030\004 \003(\0132\022.pb_message.team_t\022\027"
    "\n\017team_turn_order\030\005 \003(\t\022\013\n\003map\030\006 \001(\t\022\027\n\017"
    "order_of_battle\030\007 \001(\t\022\023\n\013setup_order\030\010 \003"
    "(\t\0224\n\007nations\030\t \003(\0132#.pb_message.scenari"
    "o_t.NationsEntry\022*\n\005turns\030\n \003(\0132\033.pb_mes"
    "sage.scenario_turn_t\032\256\002\n\010nation_t\022\023\n\013at_"
    "war_with\030\001 \003(\t\022\033\n\023future_belligerents\030\002 "
    "\003(\t\022*\n\007economy\030\003 \001(\0162\031.pb_message.war_fo"
    "oting_t\022\030\n\020exhaustion_turns\030\004 \001(\005\022&\n\036acc"
    "umulate_exhaustion_at_peace\030\005 \001(\010\022A\n\022rel"
    "ease_conditions\030\006 \003(\0132%.pb_message.fleet"
    "_release_condition_t\022\?\n\024war_entry_condit"
    "ions\030\007 \003(\0132!.pb_message.war_entry_condit"
    "ion_t\032O\n\014NationsEntry\022\013\n\003key\030\001 \001(\t\022.\n\005va"
    "lue\030\002 \001(\0132\037.pb_message.scenario_t.nation"
    "_t:\0028\001*L\n\tfeature_t\022\016\n\nno_feature\020\000\022\010\n\004b"
    "ats\020\001\022\006\n\002sb\020\002\022\007\n\003min\020\003\022\007\n\003maj\020\004\022\013\n\007capit"
    "al\020\005b\006proto3", 6012);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "start_data.proto", &protobuf_RegisterTypes);
  capital_hex_zone_t::default_instance_ = new capital_hex_zone_t();
  capital_hex_t::default_instance_ = new capital_hex_t();
  capital_t::default_instance_ = new capital_t();
  offmap_possesions_t::default_instance_ = new offmap_possesions_t();
  nation_t::default_instance_ = new nation_t();
  nations_t::default_instance_ = new nations_t();
  hex_t::default_instance_ = new hex_t();
  province_hex_t::default_instance_ = new province_hex_t();
  province_t::default_instance_ = new province_t();
  offmap_area_t::default_instance_ = new offmap_area_t();
  starting_national_holdings_t::default_instance_ = new starting_national_holdings_t();
  map_t::default_instance_ = new map_t();
  model_t::default_instance_ = new model_t();
  oob_unit_t::default_instance_ = new oob_unit_t();
  production_element_t::default_instance_ = new production_element_t();
  starting_fleet_t::default_instance_ = new starting_fleet_t();
  mothball_reserve_t::default_instance_ = new mothball_reserve_t();
  order_of_battle_t::default_instance_ = new order_of_battle_t();
  orders_of_battle_t::default_instance_ = new orders_of_battle_t();
  unit_def_side_t::default_instance_ = new unit_def_side_t();
  towable_t::default_instance_ = new towable_t();
  production_cost_t::default_instance_ = new production_cost_t();
  unit_def_t::default_instance_ = new unit_def_t();
  nation_unit_defs_t::default_instance_ = new nation_unit_defs_t();
  unit_defs_t::default_instance_ = new unit_defs_t();
  team_t::default_instance_ = new team_t();
  scenario_condition_t::default_instance_ = new scenario_condition_t();
  scenario_condition_t_object_t::default_instance_ = new scenario_condition_t_object_t();
  fleet_release_condition_t::default_instance_ = new fleet_release_condition_t();
  war_entry_condition_t::default_instance_ = new war_entry_condition_t();
  scenario_turn_t::default_instance_ = new scenario_turn_t();
  scenario_turn_t_national_action_t::default_instance_ = new scenario_turn_t_national_action_t();
  scenario_turn_t_national_action_t_action_t::default_instance_ = new scenario_turn_t_national_action_t_action_t();
  scenario_t::default_instance_ = new scenario_t();
  scenario_t_nation_t::default_instance_ = new scenario_t_nation_t();
  capital_hex_zone_t::default_instance_->InitAsDefaultInstance();
  capital_hex_t::default_instance_->InitAsDefaultInstance();
  capital_t::default_instance_->InitAsDefaultInstance();
  offmap_possesions_t::default_instance_->InitAsDefaultInstance();
  nation_t::default_instance_->InitAsDefaultInstance();
  nations_t::default_instance_->InitAsDefaultInstance();
  hex_t::default_instance_->InitAsDefaultInstance();
  province_hex_t::default_instance_->InitAsDefaultInstance();
  province_t::default_instance_->InitAsDefaultInstance();
  offmap_area_t::default_instance_->InitAsDefaultInstance();
  starting_national_holdings_t::default_instance_->InitAsDefaultInstance();
  map_t::default_instance_->InitAsDefaultInstance();
  model_t::default_instance_->InitAsDefaultInstance();
  oob_unit_t::default_instance_->InitAsDefaultInstance();
  production_element_t::default_instance_->InitAsDefaultInstance();
  starting_fleet_t::default_instance_->InitAsDefaultInstance();
  mothball_reserve_t::default_instance_->InitAsDefaultInstance();
  order_of_battle_t::default_instance_->InitAsDefaultInstance();
  orders_of_battle_t::default_instance_->InitAsDefaultInstance();
  unit_def_side_t::default_instance_->InitAsDefaultInstance();
  towable_t::default_instance_->InitAsDefaultInstance();
  production_cost_t::default_instance_->InitAsDefaultInstance();
  unit_def_t::default_instance_->InitAsDefaultInstance();
  nation_unit_defs_t::default_instance_->InitAsDefaultInstance();
  unit_defs_t::default_instance_->InitAsDefaultInstance();
  team_t::default_instance_->InitAsDefaultInstance();
  scenario_condition_t::default_instance_->InitAsDefaultInstance();
  scenario_condition_t_object_t::default_instance_->InitAsDefaultInstance();
  fleet_release_condition_t::default_instance_->InitAsDefaultInstance();
  war_entry_condition_t::default_instance_->InitAsDefaultInstance();
  scenario_turn_t::default_instance_->InitAsDefaultInstance();
  scenario_turn_t_national_action_t::default_instance_->InitAsDefaultInstance();
  scenario_turn_t_national_action_t_action_t::default_instance_->InitAsDefaultInstance();
  scenario_t::default_instance_->InitAsDefaultInstance();
  scenario_t_nation_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_start_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_start_5fdata_2eproto {
  StaticDescriptorInitializer_start_5fdata_2eproto() {
    protobuf_AddDesc_start_5fdata_2eproto();
  }
} static_descriptor_initializer_start_5fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* feature_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return feature_t_descriptor_;
}
bool feature_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int capital_hex_zone_t::kNameFieldNumber;
const int capital_hex_zone_t::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

capital_hex_zone_t::capital_hex_zone_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.capital_hex_zone_t)
}

void capital_hex_zone_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

capital_hex_zone_t::capital_hex_zone_t(const capital_hex_zone_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.capital_hex_zone_t)
}

void capital_hex_zone_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

capital_hex_zone_t::~capital_hex_zone_t() {
  // @@protoc_insertion_point(destructor:pb_message.capital_hex_zone_t)
  SharedDtor();
}

void capital_hex_zone_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void capital_hex_zone_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* capital_hex_zone_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return capital_hex_zone_t_descriptor_;
}

const capital_hex_zone_t& capital_hex_zone_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

capital_hex_zone_t* capital_hex_zone_t::default_instance_ = NULL;

capital_hex_zone_t* capital_hex_zone_t::New(::google::protobuf::Arena* arena) const {
  capital_hex_zone_t* n = new capital_hex_zone_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void capital_hex_zone_t::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  features_.Clear();
}

bool capital_hex_zone_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.capital_hex_zone_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.capital_hex_zone_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_features;
        break;
      }

      // repeated .pb_message.feature_t features = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_features:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_features(static_cast< ::pb_message::feature_t >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_features(static_cast< ::pb_message::feature_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.capital_hex_zone_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.capital_hex_zone_t)
  return false;
#undef DO_
}

void capital_hex_zone_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.capital_hex_zone_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.capital_hex_zone_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  if (this->features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_features_cached_byte_size_);
  }
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->features(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.capital_hex_zone_t)
}

::google::protobuf::uint8* capital_hex_zone_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.capital_hex_zone_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.capital_hex_zone_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  if (this->features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _features_cached_byte_size_, target);
  }
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->features(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.capital_hex_zone_t)
  return target;
}

int capital_hex_zone_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->features_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->features(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _features_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void capital_hex_zone_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const capital_hex_zone_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const capital_hex_zone_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void capital_hex_zone_t::MergeFrom(const capital_hex_zone_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  features_.MergeFrom(from.features_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void capital_hex_zone_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void capital_hex_zone_t::CopyFrom(const capital_hex_zone_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool capital_hex_zone_t::IsInitialized() const {

  return true;
}

void capital_hex_zone_t::Swap(capital_hex_zone_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void capital_hex_zone_t::InternalSwap(capital_hex_zone_t* other) {
  name_.Swap(&other->name_);
  features_.UnsafeArenaSwap(&other->features_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata capital_hex_zone_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = capital_hex_zone_t_descriptor_;
  metadata.reflection = capital_hex_zone_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// capital_hex_zone_t

// optional string name = 1;
void capital_hex_zone_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& capital_hex_zone_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_zone_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void capital_hex_zone_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.capital_hex_zone_t.name)
}
 void capital_hex_zone_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.capital_hex_zone_t.name)
}
 void capital_hex_zone_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.capital_hex_zone_t.name)
}
 ::std::string* capital_hex_zone_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.capital_hex_zone_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* capital_hex_zone_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void capital_hex_zone_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.capital_hex_zone_t.name)
}

// repeated .pb_message.feature_t features = 2 [packed = true];
int capital_hex_zone_t::features_size() const {
  return features_.size();
}
void capital_hex_zone_t::clear_features() {
  features_.Clear();
}
 ::pb_message::feature_t capital_hex_zone_t::features(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_zone_t.features)
  return static_cast< ::pb_message::feature_t >(features_.Get(index));
}
 void capital_hex_zone_t::set_features(int index, ::pb_message::feature_t value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.capital_hex_zone_t.features)
}
 void capital_hex_zone_t::add_features(::pb_message::feature_t value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.capital_hex_zone_t.features)
}
 const ::google::protobuf::RepeatedField<int>&
capital_hex_zone_t::features() const {
  // @@protoc_insertion_point(field_list:pb_message.capital_hex_zone_t.features)
  return features_;
}
 ::google::protobuf::RepeatedField<int>*
capital_hex_zone_t::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.capital_hex_zone_t.features)
  return &features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int capital_hex_t::kCoordFieldNumber;
const int capital_hex_t::kZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

capital_hex_t::capital_hex_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.capital_hex_t)
}

void capital_hex_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

capital_hex_t::capital_hex_t(const capital_hex_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.capital_hex_t)
}

void capital_hex_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  coord_ = 0;
}

capital_hex_t::~capital_hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.capital_hex_t)
  SharedDtor();
}

void capital_hex_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void capital_hex_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* capital_hex_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return capital_hex_t_descriptor_;
}

const capital_hex_t& capital_hex_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

capital_hex_t* capital_hex_t::default_instance_ = NULL;

capital_hex_t* capital_hex_t::New(::google::protobuf::Arena* arena) const {
  capital_hex_t* n = new capital_hex_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void capital_hex_t::Clear() {
  coord_ = 0;
  zones_.Clear();
}

bool capital_hex_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.capital_hex_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coord = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coord_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zones;
        break;
      }

      // repeated .pb_message.capital_hex_zone_t zones = 2;
      case 2: {
        if (tag == 18) {
         parse_zones:
          DO_(input->IncrementRecursionDepth());
         parse_loop_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_zones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_zones;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.capital_hex_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.capital_hex_t)
  return false;
#undef DO_
}

void capital_hex_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.capital_hex_t)
  // optional int32 coord = 1;
  if (this->coord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coord(), output);
  }

  // repeated .pb_message.capital_hex_zone_t zones = 2;
  for (unsigned int i = 0, n = this->zones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zones(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.capital_hex_t)
}

::google::protobuf::uint8* capital_hex_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.capital_hex_t)
  // optional int32 coord = 1;
  if (this->coord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coord(), target);
  }

  // repeated .pb_message.capital_hex_zone_t zones = 2;
  for (unsigned int i = 0, n = this->zones_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->zones(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.capital_hex_t)
  return target;
}

int capital_hex_t::ByteSize() const {
  int total_size = 0;

  // optional int32 coord = 1;
  if (this->coord() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->coord());
  }

  // repeated .pb_message.capital_hex_zone_t zones = 2;
  total_size += 1 * this->zones_size();
  for (int i = 0; i < this->zones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zones(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void capital_hex_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const capital_hex_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const capital_hex_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void capital_hex_t::MergeFrom(const capital_hex_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  zones_.MergeFrom(from.zones_);
  if (from.coord() != 0) {
    set_coord(from.coord());
  }
}

void capital_hex_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void capital_hex_t::CopyFrom(const capital_hex_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool capital_hex_t::IsInitialized() const {

  return true;
}

void capital_hex_t::Swap(capital_hex_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void capital_hex_t::InternalSwap(capital_hex_t* other) {
  std::swap(coord_, other->coord_);
  zones_.UnsafeArenaSwap(&other->zones_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata capital_hex_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = capital_hex_t_descriptor_;
  metadata.reflection = capital_hex_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// capital_hex_t

// optional int32 coord = 1;
void capital_hex_t::clear_coord() {
  coord_ = 0;
}
 ::google::protobuf::int32 capital_hex_t::coord() const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_t.coord)
  return coord_;
}
 void capital_hex_t::set_coord(::google::protobuf::int32 value) {
  
  coord_ = value;
  // @@protoc_insertion_point(field_set:pb_message.capital_hex_t.coord)
}

// repeated .pb_message.capital_hex_zone_t zones = 2;
int capital_hex_t::zones_size() const {
  return zones_.size();
}
void capital_hex_t::clear_zones() {
  zones_.Clear();
}
const ::pb_message::capital_hex_zone_t& capital_hex_t::zones(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_t.zones)
  return zones_.Get(index);
}
::pb_message::capital_hex_zone_t* capital_hex_t::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.capital_hex_t.zones)
  return zones_.Mutable(index);
}
::pb_message::capital_hex_zone_t* capital_hex_t::add_zones() {
  // @@protoc_insertion_point(field_add:pb_message.capital_hex_t.zones)
  return zones_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::capital_hex_zone_t >*
capital_hex_t::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.capital_hex_t.zones)
  return &zones_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::capital_hex_zone_t >&
capital_hex_t::zones() const {
  // @@protoc_insertion_point(field_list:pb_message.capital_hex_t.zones)
  return zones_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int capital_t::kHexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

capital_t::capital_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.capital_t)
}

void capital_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

capital_t::capital_t(const capital_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.capital_t)
}

void capital_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

capital_t::~capital_t() {
  // @@protoc_insertion_point(destructor:pb_message.capital_t)
  SharedDtor();
}

void capital_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void capital_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* capital_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return capital_t_descriptor_;
}

const capital_t& capital_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

capital_t* capital_t::default_instance_ = NULL;

capital_t* capital_t::New(::google::protobuf::Arena* arena) const {
  capital_t* n = new capital_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void capital_t::Clear() {
  hexes_.Clear();
}

bool capital_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.capital_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_message.capital_hex_t hexes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hexes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_hexes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.capital_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.capital_t)
  return false;
#undef DO_
}

void capital_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.capital_t)
  // repeated .pb_message.capital_hex_t hexes = 1;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hexes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.capital_t)
}

::google::protobuf::uint8* capital_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.capital_t)
  // repeated .pb_message.capital_hex_t hexes = 1;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hexes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.capital_t)
  return target;
}

int capital_t::ByteSize() const {
  int total_size = 0;

  // repeated .pb_message.capital_hex_t hexes = 1;
  total_size += 1 * this->hexes_size();
  for (int i = 0; i < this->hexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hexes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void capital_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const capital_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const capital_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void capital_t::MergeFrom(const capital_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  hexes_.MergeFrom(from.hexes_);
}

void capital_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void capital_t::CopyFrom(const capital_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool capital_t::IsInitialized() const {

  return true;
}

void capital_t::Swap(capital_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void capital_t::InternalSwap(capital_t* other) {
  hexes_.UnsafeArenaSwap(&other->hexes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata capital_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = capital_t_descriptor_;
  metadata.reflection = capital_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// capital_t

// repeated .pb_message.capital_hex_t hexes = 1;
int capital_t::hexes_size() const {
  return hexes_.size();
}
void capital_t::clear_hexes() {
  hexes_.Clear();
}
const ::pb_message::capital_hex_t& capital_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.capital_t.hexes)
  return hexes_.Get(index);
}
::pb_message::capital_hex_t* capital_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.capital_t.hexes)
  return hexes_.Mutable(index);
}
::pb_message::capital_hex_t* capital_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.capital_t.hexes)
  return hexes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::capital_hex_t >*
capital_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.capital_t.hexes)
  return &hexes_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::capital_hex_t >&
capital_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.capital_t.hexes)
  return hexes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offmap_possesions_t::kProvincesFieldNumber;
const int offmap_possesions_t::kMinsFieldNumber;
const int offmap_possesions_t::kMajsFieldNumber;
const int offmap_possesions_t::kSurveyShipsFieldNumber;
const int offmap_possesions_t::kCannotBuildOffmapCapitalFieldNumber;
const int offmap_possesions_t::kOldShipyardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offmap_possesions_t::offmap_possesions_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.offmap_possesions_t)
}

void offmap_possesions_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

offmap_possesions_t::offmap_possesions_t(const offmap_possesions_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.offmap_possesions_t)
}

void offmap_possesions_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  provinces_ = 0;
  mins_ = 0;
  majs_ = 0;
  survey_ships_ = 0;
  cannot_build_offmap_capital_ = false;
  old_shipyard_ = false;
}

offmap_possesions_t::~offmap_possesions_t() {
  // @@protoc_insertion_point(destructor:pb_message.offmap_possesions_t)
  SharedDtor();
}

void offmap_possesions_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offmap_possesions_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offmap_possesions_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offmap_possesions_t_descriptor_;
}

const offmap_possesions_t& offmap_possesions_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

offmap_possesions_t* offmap_possesions_t::default_instance_ = NULL;

offmap_possesions_t* offmap_possesions_t::New(::google::protobuf::Arena* arena) const {
  offmap_possesions_t* n = new offmap_possesions_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void offmap_possesions_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<offmap_possesions_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(provinces_, old_shipyard_);

#undef ZR_HELPER_
#undef ZR_

}

bool offmap_possesions_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.offmap_possesions_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 provinces = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provinces_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mins;
        break;
      }

      // optional int32 mins = 2;
      case 2: {
        if (tag == 16) {
         parse_mins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mins_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_majs;
        break;
      }

      // optional int32 majs = 3;
      case 3: {
        if (tag == 24) {
         parse_majs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_survey_ships;
        break;
      }

      // optional int32 survey_ships = 4;
      case 4: {
        if (tag == 32) {
         parse_survey_ships:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &survey_ships_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cannot_build_offmap_capital;
        break;
      }

      // optional bool cannot_build_offmap_capital = 5;
      case 5: {
        if (tag == 40) {
         parse_cannot_build_offmap_capital:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cannot_build_offmap_capital_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_old_shipyard;
        break;
      }

      // optional bool old_shipyard = 6;
      case 6: {
        if (tag == 48) {
         parse_old_shipyard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &old_shipyard_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.offmap_possesions_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.offmap_possesions_t)
  return false;
#undef DO_
}

void offmap_possesions_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.offmap_possesions_t)
  // optional int32 provinces = 1;
  if (this->provinces() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->provinces(), output);
  }

  // optional int32 mins = 2;
  if (this->mins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mins(), output);
  }

  // optional int32 majs = 3;
  if (this->majs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->majs(), output);
  }

  // optional int32 survey_ships = 4;
  if (this->survey_ships() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->survey_ships(), output);
  }

  // optional bool cannot_build_offmap_capital = 5;
  if (this->cannot_build_offmap_capital() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cannot_build_offmap_capital(), output);
  }

  // optional bool old_shipyard = 6;
  if (this->old_shipyard() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->old_shipyard(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.offmap_possesions_t)
}

::google::protobuf::uint8* offmap_possesions_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.offmap_possesions_t)
  // optional int32 provinces = 1;
  if (this->provinces() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->provinces(), target);
  }

  // optional int32 mins = 2;
  if (this->mins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mins(), target);
  }

  // optional int32 majs = 3;
  if (this->majs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->majs(), target);
  }

  // optional int32 survey_ships = 4;
  if (this->survey_ships() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->survey_ships(), target);
  }

  // optional bool cannot_build_offmap_capital = 5;
  if (this->cannot_build_offmap_capital() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cannot_build_offmap_capital(), target);
  }

  // optional bool old_shipyard = 6;
  if (this->old_shipyard() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->old_shipyard(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.offmap_possesions_t)
  return target;
}

int offmap_possesions_t::ByteSize() const {
  int total_size = 0;

  // optional int32 provinces = 1;
  if (this->provinces() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->provinces());
  }

  // optional int32 mins = 2;
  if (this->mins() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mins());
  }

  // optional int32 majs = 3;
  if (this->majs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->majs());
  }

  // optional int32 survey_ships = 4;
  if (this->survey_ships() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->survey_ships());
  }

  // optional bool cannot_build_offmap_capital = 5;
  if (this->cannot_build_offmap_capital() != 0) {
    total_size += 1 + 1;
  }

  // optional bool old_shipyard = 6;
  if (this->old_shipyard() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offmap_possesions_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const offmap_possesions_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const offmap_possesions_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offmap_possesions_t::MergeFrom(const offmap_possesions_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.provinces() != 0) {
    set_provinces(from.provinces());
  }
  if (from.mins() != 0) {
    set_mins(from.mins());
  }
  if (from.majs() != 0) {
    set_majs(from.majs());
  }
  if (from.survey_ships() != 0) {
    set_survey_ships(from.survey_ships());
  }
  if (from.cannot_build_offmap_capital() != 0) {
    set_cannot_build_offmap_capital(from.cannot_build_offmap_capital());
  }
  if (from.old_shipyard() != 0) {
    set_old_shipyard(from.old_shipyard());
  }
}

void offmap_possesions_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_possesions_t::CopyFrom(const offmap_possesions_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_possesions_t::IsInitialized() const {

  return true;
}

void offmap_possesions_t::Swap(offmap_possesions_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offmap_possesions_t::InternalSwap(offmap_possesions_t* other) {
  std::swap(provinces_, other->provinces_);
  std::swap(mins_, other->mins_);
  std::swap(majs_, other->majs_);
  std::swap(survey_ships_, other->survey_ships_);
  std::swap(cannot_build_offmap_capital_, other->cannot_build_offmap_capital_);
  std::swap(old_shipyard_, other->old_shipyard_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata offmap_possesions_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offmap_possesions_t_descriptor_;
  metadata.reflection = offmap_possesions_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// offmap_possesions_t

// optional int32 provinces = 1;
void offmap_possesions_t::clear_provinces() {
  provinces_ = 0;
}
 ::google::protobuf::int32 offmap_possesions_t::provinces() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.provinces)
  return provinces_;
}
 void offmap_possesions_t::set_provinces(::google::protobuf::int32 value) {
  
  provinces_ = value;
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.provinces)
}

// optional int32 mins = 2;
void offmap_possesions_t::clear_mins() {
  mins_ = 0;
}
 ::google::protobuf::int32 offmap_possesions_t::mins() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.mins)
  return mins_;
}
 void offmap_possesions_t::set_mins(::google::protobuf::int32 value) {
  
  mins_ = value;
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.mins)
}

// optional int32 majs = 3;
void offmap_possesions_t::clear_majs() {
  majs_ = 0;
}
 ::google::protobuf::int32 offmap_possesions_t::majs() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.majs)
  return majs_;
}
 void offmap_possesions_t::set_majs(::google::protobuf::int32 value) {
  
  majs_ = value;
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.majs)
}

// optional int32 survey_ships = 4;
void offmap_possesions_t::clear_survey_ships() {
  survey_ships_ = 0;
}
 ::google::protobuf::int32 offmap_possesions_t::survey_ships() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.survey_ships)
  return survey_ships_;
}
 void offmap_possesions_t::set_survey_ships(::google::protobuf::int32 value) {
  
  survey_ships_ = value;
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.survey_ships)
}

// optional bool cannot_build_offmap_capital = 5;
void offmap_possesions_t::clear_cannot_build_offmap_capital() {
  cannot_build_offmap_capital_ = false;
}
 bool offmap_possesions_t::cannot_build_offmap_capital() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.cannot_build_offmap_capital)
  return cannot_build_offmap_capital_;
}
 void offmap_possesions_t::set_cannot_build_offmap_capital(bool value) {
  
  cannot_build_offmap_capital_ = value;
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.cannot_build_offmap_capital)
}

// optional bool old_shipyard = 6;
void offmap_possesions_t::clear_old_shipyard() {
  old_shipyard_ = false;
}
 bool offmap_possesions_t::old_shipyard() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.old_shipyard)
  return old_shipyard_;
}
 void offmap_possesions_t::set_old_shipyard(bool value) {
  
  old_shipyard_ = value;
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.old_shipyard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nation_t::kNameFieldNumber;
const int nation_t::kShortNameFieldNumber;
const int nation_t::kCapitalFieldNumber;
const int nation_t::kFreeStrategicMovesFieldNumber;
const int nation_t::kCapitalStarPointsFieldNumber;
const int nation_t::kOffmapPossesionsFieldNumber;
const int nation_t::kNationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nation_t::nation_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.nation_t)
}

void nation_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  capital_ = const_cast< ::pb_message::capital_t*>(&::pb_message::capital_t::default_instance());
  offmap_possesions_ = const_cast< ::pb_message::offmap_possesions_t*>(&::pb_message::offmap_possesions_t::default_instance());
}

nation_t::nation_t(const nation_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.nation_t)
}

void nation_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capital_ = NULL;
  free_strategic_moves_ = 0;
  capital_star_points_ = 0;
  offmap_possesions_ = NULL;
  nation_id_ = 0;
}

nation_t::~nation_t() {
  // @@protoc_insertion_point(destructor:pb_message.nation_t)
  SharedDtor();
}

void nation_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete capital_;
    delete offmap_possesions_;
  }
}

void nation_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nation_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nation_t_descriptor_;
}

const nation_t& nation_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

nation_t* nation_t::default_instance_ = NULL;

nation_t* nation_t::New(::google::protobuf::Arena* arena) const {
  nation_t* n = new nation_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nation_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<nation_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(free_strategic_moves_, capital_star_points_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && capital_ != NULL) delete capital_;
  capital_ = NULL;
  if (GetArenaNoVirtual() == NULL && offmap_possesions_ != NULL) delete offmap_possesions_;
  offmap_possesions_ = NULL;
  nation_id_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool nation_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.nation_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.nation_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_short_name;
        break;
      }

      // optional string short_name = 2;
      case 2: {
        if (tag == 18) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.nation_t.short_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_capital;
        break;
      }

      // optional .pb_message.capital_t capital = 3;
      case 3: {
        if (tag == 26) {
         parse_capital:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capital()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_free_strategic_moves;
        break;
      }

      // optional int32 free_strategic_moves = 4;
      case 4: {
        if (tag == 32) {
         parse_free_strategic_moves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_strategic_moves_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_capital_star_points;
        break;
      }

      // optional int32 capital_star_points = 5;
      case 5: {
        if (tag == 40) {
         parse_capital_star_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capital_star_points_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_offmap_possesions;
        break;
      }

      // optional .pb_message.offmap_possesions_t offmap_possesions = 6;
      case 6: {
        if (tag == 50) {
         parse_offmap_possesions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offmap_possesions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nation_id;
        break;
      }

      // optional int32 nation_id = 7;
      case 7: {
        if (tag == 56) {
         parse_nation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.nation_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.nation_t)
  return false;
#undef DO_
}

void nation_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.nation_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.nation_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string short_name = 2;
  if (this->short_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.nation_t.short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->short_name(), output);
  }

  // optional .pb_message.capital_t capital = 3;
  if (this->has_capital()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->capital_, output);
  }

  // optional int32 free_strategic_moves = 4;
  if (this->free_strategic_moves() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->free_strategic_moves(), output);
  }

  // optional int32 capital_star_points = 5;
  if (this->capital_star_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->capital_star_points(), output);
  }

  // optional .pb_message.offmap_possesions_t offmap_possesions = 6;
  if (this->has_offmap_possesions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->offmap_possesions_, output);
  }

  // optional int32 nation_id = 7;
  if (this->nation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nation_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.nation_t)
}

::google::protobuf::uint8* nation_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.nation_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.nation_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string short_name = 2;
  if (this->short_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.nation_t.short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->short_name(), target);
  }

  // optional .pb_message.capital_t capital = 3;
  if (this->has_capital()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->capital_, target);
  }

  // optional int32 free_strategic_moves = 4;
  if (this->free_strategic_moves() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->free_strategic_moves(), target);
  }

  // optional int32 capital_star_points = 5;
  if (this->capital_star_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->capital_star_points(), target);
  }

  // optional .pb_message.offmap_possesions_t offmap_possesions = 6;
  if (this->has_offmap_possesions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->offmap_possesions_, target);
  }

  // optional int32 nation_id = 7;
  if (this->nation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nation_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.nation_t)
  return target;
}

int nation_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string short_name = 2;
  if (this->short_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_name());
  }

  // optional .pb_message.capital_t capital = 3;
  if (this->has_capital()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capital_);
  }

  // optional int32 free_strategic_moves = 4;
  if (this->free_strategic_moves() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->free_strategic_moves());
  }

  // optional int32 capital_star_points = 5;
  if (this->capital_star_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capital_star_points());
  }

  // optional .pb_message.offmap_possesions_t offmap_possesions = 6;
  if (this->has_offmap_possesions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offmap_possesions_);
  }

  // optional int32 nation_id = 7;
  if (this->nation_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nation_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nation_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nation_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nation_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nation_t::MergeFrom(const nation_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.short_name().size() > 0) {

    short_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_name_);
  }
  if (from.has_capital()) {
    mutable_capital()->::pb_message::capital_t::MergeFrom(from.capital());
  }
  if (from.free_strategic_moves() != 0) {
    set_free_strategic_moves(from.free_strategic_moves());
  }
  if (from.capital_star_points() != 0) {
    set_capital_star_points(from.capital_star_points());
  }
  if (from.has_offmap_possesions()) {
    mutable_offmap_possesions()->::pb_message::offmap_possesions_t::MergeFrom(from.offmap_possesions());
  }
  if (from.nation_id() != 0) {
    set_nation_id(from.nation_id());
  }
}

void nation_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nation_t::CopyFrom(const nation_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nation_t::IsInitialized() const {

  return true;
}

void nation_t::Swap(nation_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nation_t::InternalSwap(nation_t* other) {
  name_.Swap(&other->name_);
  short_name_.Swap(&other->short_name_);
  std::swap(capital_, other->capital_);
  std::swap(free_strategic_moves_, other->free_strategic_moves_);
  std::swap(capital_star_points_, other->capital_star_points_);
  std::swap(offmap_possesions_, other->offmap_possesions_);
  std::swap(nation_id_, other->nation_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nation_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nation_t_descriptor_;
  metadata.reflection = nation_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nation_t

// optional string name = 1;
void nation_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nation_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nation_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.nation_t.name)
}
 void nation_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.nation_t.name)
}
 void nation_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.nation_t.name)
}
 ::std::string* nation_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nation_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nation_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.name)
}

// optional string short_name = 2;
void nation_t::clear_short_name() {
  short_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nation_t::short_name() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.short_name)
  return short_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nation_t::set_short_name(const ::std::string& value) {
  
  short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.nation_t.short_name)
}
 void nation_t::set_short_name(const char* value) {
  
  short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.nation_t.short_name)
}
 void nation_t::set_short_name(const char* value, size_t size) {
  
  short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.nation_t.short_name)
}
 ::std::string* nation_t::mutable_short_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.short_name)
  return short_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nation_t::release_short_name() {
  
  return short_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nation_t::set_allocated_short_name(::std::string* short_name) {
  if (short_name != NULL) {
    
  } else {
    
  }
  short_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.short_name)
}

// optional .pb_message.capital_t capital = 3;
bool nation_t::has_capital() const {
  return !_is_default_instance_ && capital_ != NULL;
}
void nation_t::clear_capital() {
  if (GetArenaNoVirtual() == NULL && capital_ != NULL) delete capital_;
  capital_ = NULL;
}
const ::pb_message::capital_t& nation_t::capital() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.capital)
  return capital_ != NULL ? *capital_ : *default_instance_->capital_;
}
::pb_message::capital_t* nation_t::mutable_capital() {
  
  if (capital_ == NULL) {
    capital_ = new ::pb_message::capital_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.capital)
  return capital_;
}
::pb_message::capital_t* nation_t::release_capital() {
  
  ::pb_message::capital_t* temp = capital_;
  capital_ = NULL;
  return temp;
}
void nation_t::set_allocated_capital(::pb_message::capital_t* capital) {
  delete capital_;
  capital_ = capital;
  if (capital) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.capital)
}

// optional int32 free_strategic_moves = 4;
void nation_t::clear_free_strategic_moves() {
  free_strategic_moves_ = 0;
}
 ::google::protobuf::int32 nation_t::free_strategic_moves() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.free_strategic_moves)
  return free_strategic_moves_;
}
 void nation_t::set_free_strategic_moves(::google::protobuf::int32 value) {
  
  free_strategic_moves_ = value;
  // @@protoc_insertion_point(field_set:pb_message.nation_t.free_strategic_moves)
}

// optional int32 capital_star_points = 5;
void nation_t::clear_capital_star_points() {
  capital_star_points_ = 0;
}
 ::google::protobuf::int32 nation_t::capital_star_points() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.capital_star_points)
  return capital_star_points_;
}
 void nation_t::set_capital_star_points(::google::protobuf::int32 value) {
  
  capital_star_points_ = value;
  // @@protoc_insertion_point(field_set:pb_message.nation_t.capital_star_points)
}

// optional .pb_message.offmap_possesions_t offmap_possesions = 6;
bool nation_t::has_offmap_possesions() const {
  return !_is_default_instance_ && offmap_possesions_ != NULL;
}
void nation_t::clear_offmap_possesions() {
  if (GetArenaNoVirtual() == NULL && offmap_possesions_ != NULL) delete offmap_possesions_;
  offmap_possesions_ = NULL;
}
const ::pb_message::offmap_possesions_t& nation_t::offmap_possesions() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.offmap_possesions)
  return offmap_possesions_ != NULL ? *offmap_possesions_ : *default_instance_->offmap_possesions_;
}
::pb_message::offmap_possesions_t* nation_t::mutable_offmap_possesions() {
  
  if (offmap_possesions_ == NULL) {
    offmap_possesions_ = new ::pb_message::offmap_possesions_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.offmap_possesions)
  return offmap_possesions_;
}
::pb_message::offmap_possesions_t* nation_t::release_offmap_possesions() {
  
  ::pb_message::offmap_possesions_t* temp = offmap_possesions_;
  offmap_possesions_ = NULL;
  return temp;
}
void nation_t::set_allocated_offmap_possesions(::pb_message::offmap_possesions_t* offmap_possesions) {
  delete offmap_possesions_;
  offmap_possesions_ = offmap_possesions;
  if (offmap_possesions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.offmap_possesions)
}

// optional int32 nation_id = 7;
void nation_t::clear_nation_id() {
  nation_id_ = 0;
}
 ::google::protobuf::int32 nation_t::nation_id() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.nation_id)
  return nation_id_;
}
 void nation_t::set_nation_id(::google::protobuf::int32 value) {
  
  nation_id_ = value;
  // @@protoc_insertion_point(field_set:pb_message.nation_t.nation_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nations_t::kNationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nations_t::nations_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.nations_t)
}

void nations_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

nations_t::nations_t(const nations_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.nations_t)
}

void nations_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nations_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  nations_.SetEntryDescriptor(
      &::pb_message::nations_t_NationsEntry_descriptor_);
}

nations_t::~nations_t() {
  // @@protoc_insertion_point(destructor:pb_message.nations_t)
  SharedDtor();
}

void nations_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nations_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nations_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nations_t_descriptor_;
}

const nations_t& nations_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

nations_t* nations_t::default_instance_ = NULL;

nations_t* nations_t::New(::google::protobuf::Arena* arena) const {
  nations_t* n = new nations_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nations_t::Clear() {
  nations_.Clear();
}

bool nations_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.nations_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .pb_message.nation_t> nations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nations:
          ::google::protobuf::scoped_ptr<nations_t_NationsEntry> entry(nations_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_nations())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.nations_t.NationsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.nations_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.nations_t)
  return false;
#undef DO_
}

void nations_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.nations_t)
  // map<string, .pb_message.nation_t> nations = 1;
  {
    ::google::protobuf::scoped_ptr<nations_t_NationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::nation_t >::const_iterator
        it = this->nations().begin();
        it != this->nations().end(); ++it) {
      entry.reset(nations_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.nations_t.NationsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:pb_message.nations_t)
}

::google::protobuf::uint8* nations_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.nations_t)
  // map<string, .pb_message.nation_t> nations = 1;
  {
    ::google::protobuf::scoped_ptr<nations_t_NationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::nation_t >::const_iterator
        it = this->nations().begin();
        it != this->nations().end(); ++it) {
      entry.reset(nations_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.nations_t.NationsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.nations_t)
  return target;
}

int nations_t::ByteSize() const {
  int total_size = 0;

  // map<string, .pb_message.nation_t> nations = 1;
  total_size += 1 * this->nations_size();
  {
    ::google::protobuf::scoped_ptr<nations_t_NationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::nation_t >::const_iterator
        it = this->nations().begin();
        it != this->nations().end(); ++it) {
      entry.reset(nations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nations_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nations_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nations_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nations_t::MergeFrom(const nations_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nations_.MergeFrom(from.nations_);
}

void nations_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nations_t::CopyFrom(const nations_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nations_t::IsInitialized() const {

  return true;
}

void nations_t::Swap(nations_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nations_t::InternalSwap(nations_t* other) {
  nations_.Swap(&other->nations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nations_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nations_t_descriptor_;
  metadata.reflection = nations_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nations_t

// map<string, .pb_message.nation_t> nations = 1;
int nations_t::nations_size() const {
  return nations_.size();
}
void nations_t::clear_nations() {
  nations_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::nation_t >&
nations_t::nations() const {
  // @@protoc_insertion_point(field_map:pb_message.nations_t.nations)
  return nations_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::nation_t >*
nations_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.nations_t.nations)
  return nations_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hex_t::kCoordFieldNumber;
const int hex_t::kOwnerFieldNumber;
const int hex_t::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hex_t::hex_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.hex_t)
}

void hex_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  coord_ = const_cast< ::pb_message::hex_coord_t*>(&::pb_message::hex_coord_t::default_instance());
}

hex_t::hex_t(const hex_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.hex_t)
}

void hex_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  coord_ = NULL;
  owner_ = 0;
  feature_ = 0;
}

hex_t::~hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.hex_t)
  SharedDtor();
}

void hex_t::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
  }
}

void hex_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hex_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hex_t_descriptor_;
}

const hex_t& hex_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

hex_t* hex_t::default_instance_ = NULL;

hex_t* hex_t::New(::google::protobuf::Arena* arena) const {
  hex_t* n = new hex_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hex_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hex_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(owner_, feature_);
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool hex_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.hex_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_message.hex_coord_t coord = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional int32 owner = 2;
      case 2: {
        if (tag == 16) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_feature;
        break;
      }

      // optional .pb_message.feature_t feature = 3;
      case 3: {
        if (tag == 24) {
         parse_feature:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_feature(static_cast< ::pb_message::feature_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.hex_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.hex_t)
  return false;
#undef DO_
}

void hex_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.hex_t)
  // optional .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->coord_, output);
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->owner(), output);
  }

  // optional .pb_message.feature_t feature = 3;
  if (this->feature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.hex_t)
}

::google::protobuf::uint8* hex_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.hex_t)
  // optional .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->coord_, target);
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->owner(), target);
  }

  // optional .pb_message.feature_t feature = 3;
  if (this->feature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.hex_t)
  return target;
}

int hex_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_);
  }

  // optional int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner());
  }

  // optional .pb_message.feature_t feature = 3;
  if (this->feature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hex_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hex_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hex_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hex_t::MergeFrom(const hex_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_coord()) {
    mutable_coord()->::pb_message::hex_coord_t::MergeFrom(from.coord());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.feature() != 0) {
    set_feature(from.feature());
  }
}

void hex_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_t::CopyFrom(const hex_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_t::IsInitialized() const {

  return true;
}

void hex_t::Swap(hex_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hex_t::InternalSwap(hex_t* other) {
  std::swap(coord_, other->coord_);
  std::swap(owner_, other->owner_);
  std::swap(feature_, other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hex_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hex_t_descriptor_;
  metadata.reflection = hex_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hex_t

// optional .pb_message.hex_coord_t coord = 1;
bool hex_t::has_coord() const {
  return !_is_default_instance_ && coord_ != NULL;
}
void hex_t::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
const ::pb_message::hex_coord_t& hex_t::coord() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_t.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pb_message::hex_coord_t* hex_t::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::pb_message::hex_coord_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.hex_t.coord)
  return coord_;
}
::pb_message::hex_coord_t* hex_t::release_coord() {
  
  ::pb_message::hex_coord_t* temp = coord_;
  coord_ = NULL;
  return temp;
}
void hex_t::set_allocated_coord(::pb_message::hex_coord_t* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.hex_t.coord)
}

// optional int32 owner = 2;
void hex_t::clear_owner() {
  owner_ = 0;
}
 ::google::protobuf::int32 hex_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_t.owner)
  return owner_;
}
 void hex_t::set_owner(::google::protobuf::int32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:pb_message.hex_t.owner)
}

// optional .pb_message.feature_t feature = 3;
void hex_t::clear_feature() {
  feature_ = 0;
}
 ::pb_message::feature_t hex_t::feature() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_t.feature)
  return static_cast< ::pb_message::feature_t >(feature_);
}
 void hex_t::set_feature(::pb_message::feature_t value) {
  
  feature_ = value;
  // @@protoc_insertion_point(field_set:pb_message.hex_t.feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int province_hex_t::kHexFieldNumber;
const int province_hex_t::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

province_hex_t::province_hex_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.province_hex_t)
}

void province_hex_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

province_hex_t::province_hex_t(const province_hex_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.province_hex_t)
}

void province_hex_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  hex_ = 0;
  feature_ = 0;
}

province_hex_t::~province_hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.province_hex_t)
  SharedDtor();
}

void province_hex_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void province_hex_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_hex_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_hex_t_descriptor_;
}

const province_hex_t& province_hex_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

province_hex_t* province_hex_t::default_instance_ = NULL;

province_hex_t* province_hex_t::New(::google::protobuf::Arena* arena) const {
  province_hex_t* n = new province_hex_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void province_hex_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<province_hex_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(hex_, feature_);

#undef ZR_HELPER_
#undef ZR_

}

bool province_hex_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.province_hex_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_feature;
        break;
      }

      // optional .pb_message.feature_t feature = 2;
      case 2: {
        if (tag == 16) {
         parse_feature:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_feature(static_cast< ::pb_message::feature_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.province_hex_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.province_hex_t)
  return false;
#undef DO_
}

void province_hex_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.province_hex_t)
  // optional int32 hex = 1;
  if (this->hex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hex(), output);
  }

  // optional .pb_message.feature_t feature = 2;
  if (this->feature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.province_hex_t)
}

::google::protobuf::uint8* province_hex_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.province_hex_t)
  // optional int32 hex = 1;
  if (this->hex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hex(), target);
  }

  // optional .pb_message.feature_t feature = 2;
  if (this->feature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.province_hex_t)
  return target;
}

int province_hex_t::ByteSize() const {
  int total_size = 0;

  // optional int32 hex = 1;
  if (this->hex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hex());
  }

  // optional .pb_message.feature_t feature = 2;
  if (this->feature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_hex_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const province_hex_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const province_hex_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_hex_t::MergeFrom(const province_hex_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.hex() != 0) {
    set_hex(from.hex());
  }
  if (from.feature() != 0) {
    set_feature(from.feature());
  }
}

void province_hex_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_hex_t::CopyFrom(const province_hex_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_hex_t::IsInitialized() const {

  return true;
}

void province_hex_t::Swap(province_hex_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void province_hex_t::InternalSwap(province_hex_t* other) {
  std::swap(hex_, other->hex_);
  std::swap(feature_, other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata province_hex_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_hex_t_descriptor_;
  metadata.reflection = province_hex_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// province_hex_t

// optional int32 hex = 1;
void province_hex_t::clear_hex() {
  hex_ = 0;
}
 ::google::protobuf::int32 province_hex_t::hex() const {
  // @@protoc_insertion_point(field_get:pb_message.province_hex_t.hex)
  return hex_;
}
 void province_hex_t::set_hex(::google::protobuf::int32 value) {
  
  hex_ = value;
  // @@protoc_insertion_point(field_set:pb_message.province_hex_t.hex)
}

// optional .pb_message.feature_t feature = 2;
void province_hex_t::clear_feature() {
  feature_ = 0;
}
 ::pb_message::feature_t province_hex_t::feature() const {
  // @@protoc_insertion_point(field_get:pb_message.province_hex_t.feature)
  return static_cast< ::pb_message::feature_t >(feature_);
}
 void province_hex_t::set_feature(::pb_message::feature_t value) {
  
  feature_ = value;
  // @@protoc_insertion_point(field_set:pb_message.province_hex_t.feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int province_t::kHexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

province_t::province_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.province_t)
}

void province_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

province_t::province_t(const province_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.province_t)
}

void province_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

province_t::~province_t() {
  // @@protoc_insertion_point(destructor:pb_message.province_t)
  SharedDtor();
}

void province_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void province_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* province_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return province_t_descriptor_;
}

const province_t& province_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

province_t* province_t::default_instance_ = NULL;

province_t* province_t::New(::google::protobuf::Arena* arena) const {
  province_t* n = new province_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void province_t::Clear() {
  hexes_.Clear();
}

bool province_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.province_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_message.province_hex_t hexes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hexes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_hexes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.province_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.province_t)
  return false;
#undef DO_
}

void province_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.province_t)
  // repeated .pb_message.province_hex_t hexes = 1;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hexes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.province_t)
}

::google::protobuf::uint8* province_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.province_t)
  // repeated .pb_message.province_hex_t hexes = 1;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hexes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.province_t)
  return target;
}

int province_t::ByteSize() const {
  int total_size = 0;

  // repeated .pb_message.province_hex_t hexes = 1;
  total_size += 1 * this->hexes_size();
  for (int i = 0; i < this->hexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hexes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void province_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const province_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const province_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void province_t::MergeFrom(const province_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  hexes_.MergeFrom(from.hexes_);
}

void province_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_t::CopyFrom(const province_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_t::IsInitialized() const {

  return true;
}

void province_t::Swap(province_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void province_t::InternalSwap(province_t* other) {
  hexes_.UnsafeArenaSwap(&other->hexes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata province_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = province_t_descriptor_;
  metadata.reflection = province_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// province_t

// repeated .pb_message.province_hex_t hexes = 1;
int province_t::hexes_size() const {
  return hexes_.size();
}
void province_t::clear_hexes() {
  hexes_.Clear();
}
const ::pb_message::province_hex_t& province_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.province_t.hexes)
  return hexes_.Get(index);
}
::pb_message::province_hex_t* province_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.province_t.hexes)
  return hexes_.Mutable(index);
}
::pb_message::province_hex_t* province_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.province_t.hexes)
  return hexes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::province_hex_t >*
province_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.province_t.hexes)
  return &hexes_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::province_hex_t >&
province_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.province_t.hexes)
  return hexes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offmap_area_t::kNameFieldNumber;
const int offmap_area_t::kFeaturesFieldNumber;
const int offmap_area_t::kFeatureHexesFieldNumber;
const int offmap_area_t::kAdjacentHexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offmap_area_t::offmap_area_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.offmap_area_t)
}

void offmap_area_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

offmap_area_t::offmap_area_t(const offmap_area_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.offmap_area_t)
}

void offmap_area_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

offmap_area_t::~offmap_area_t() {
  // @@protoc_insertion_point(destructor:pb_message.offmap_area_t)
  SharedDtor();
}

void offmap_area_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void offmap_area_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offmap_area_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offmap_area_t_descriptor_;
}

const offmap_area_t& offmap_area_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

offmap_area_t* offmap_area_t::default_instance_ = NULL;

offmap_area_t* offmap_area_t::New(::google::protobuf::Arena* arena) const {
  offmap_area_t* n = new offmap_area_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void offmap_area_t::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  features_.Clear();
  feature_hexes_.Clear();
  adjacent_hexes_.Clear();
}

bool offmap_area_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.offmap_area_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.offmap_area_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_features;
        break;
      }

      // repeated .pb_message.feature_t features = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_features:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_features(static_cast< ::pb_message::feature_t >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_features(static_cast< ::pb_message::feature_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_feature_hexes;
        break;
      }

      // repeated int32 feature_hexes = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_feature_hexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feature_hexes())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_feature_hexes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adjacent_hexes;
        break;
      }

      // repeated int32 adjacent_hexes = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_adjacent_hexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_adjacent_hexes())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_adjacent_hexes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.offmap_area_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.offmap_area_t)
  return false;
#undef DO_
}

void offmap_area_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.offmap_area_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.offmap_area_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  if (this->features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_features_cached_byte_size_);
  }
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->features(i), output);
  }

  // repeated int32 feature_hexes = 3 [packed = true];
  if (this->feature_hexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_hexes_cached_byte_size_);
  }
  for (int i = 0; i < this->feature_hexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->feature_hexes(i), output);
  }

  // repeated int32 adjacent_hexes = 4 [packed = true];
  if (this->adjacent_hexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_adjacent_hexes_cached_byte_size_);
  }
  for (int i = 0; i < this->adjacent_hexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->adjacent_hexes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.offmap_area_t)
}

::google::protobuf::uint8* offmap_area_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.offmap_area_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.offmap_area_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  if (this->features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _features_cached_byte_size_, target);
  }
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->features(i), target);
  }

  // repeated int32 feature_hexes = 3 [packed = true];
  if (this->feature_hexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _feature_hexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->feature_hexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->feature_hexes(i), target);
  }

  // repeated int32 adjacent_hexes = 4 [packed = true];
  if (this->adjacent_hexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _adjacent_hexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->adjacent_hexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->adjacent_hexes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.offmap_area_t)
  return target;
}

int offmap_area_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->features_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->features(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _features_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 feature_hexes = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->feature_hexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->feature_hexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _feature_hexes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 adjacent_hexes = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->adjacent_hexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->adjacent_hexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _adjacent_hexes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offmap_area_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const offmap_area_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const offmap_area_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offmap_area_t::MergeFrom(const offmap_area_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  features_.MergeFrom(from.features_);
  feature_hexes_.MergeFrom(from.feature_hexes_);
  adjacent_hexes_.MergeFrom(from.adjacent_hexes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void offmap_area_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_area_t::CopyFrom(const offmap_area_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_area_t::IsInitialized() const {

  return true;
}

void offmap_area_t::Swap(offmap_area_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offmap_area_t::InternalSwap(offmap_area_t* other) {
  name_.Swap(&other->name_);
  features_.UnsafeArenaSwap(&other->features_);
  feature_hexes_.UnsafeArenaSwap(&other->feature_hexes_);
  adjacent_hexes_.UnsafeArenaSwap(&other->adjacent_hexes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata offmap_area_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offmap_area_t_descriptor_;
  metadata.reflection = offmap_area_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// offmap_area_t

// optional string name = 1;
void offmap_area_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& offmap_area_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void offmap_area_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.name)
}
 void offmap_area_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.offmap_area_t.name)
}
 void offmap_area_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.offmap_area_t.name)
}
 ::std::string* offmap_area_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.offmap_area_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* offmap_area_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void offmap_area_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.offmap_area_t.name)
}

// repeated .pb_message.feature_t features = 2 [packed = true];
int offmap_area_t::features_size() const {
  return features_.size();
}
void offmap_area_t::clear_features() {
  features_.Clear();
}
 ::pb_message::feature_t offmap_area_t::features(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.features)
  return static_cast< ::pb_message::feature_t >(features_.Get(index));
}
 void offmap_area_t::set_features(int index, ::pb_message::feature_t value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.features)
}
 void offmap_area_t::add_features(::pb_message::feature_t value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.offmap_area_t.features)
}
 const ::google::protobuf::RepeatedField<int>&
offmap_area_t::features() const {
  // @@protoc_insertion_point(field_list:pb_message.offmap_area_t.features)
  return features_;
}
 ::google::protobuf::RepeatedField<int>*
offmap_area_t::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.offmap_area_t.features)
  return &features_;
}

// repeated int32 feature_hexes = 3 [packed = true];
int offmap_area_t::feature_hexes_size() const {
  return feature_hexes_.size();
}
void offmap_area_t::clear_feature_hexes() {
  feature_hexes_.Clear();
}
 ::google::protobuf::int32 offmap_area_t::feature_hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.feature_hexes)
  return feature_hexes_.Get(index);
}
 void offmap_area_t::set_feature_hexes(int index, ::google::protobuf::int32 value) {
  feature_hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.feature_hexes)
}
 void offmap_area_t::add_feature_hexes(::google::protobuf::int32 value) {
  feature_hexes_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.offmap_area_t.feature_hexes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
offmap_area_t::feature_hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.offmap_area_t.feature_hexes)
  return feature_hexes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
offmap_area_t::mutable_feature_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.offmap_area_t.feature_hexes)
  return &feature_hexes_;
}

// repeated int32 adjacent_hexes = 4 [packed = true];
int offmap_area_t::adjacent_hexes_size() const {
  return adjacent_hexes_.size();
}
void offmap_area_t::clear_adjacent_hexes() {
  adjacent_hexes_.Clear();
}
 ::google::protobuf::int32 offmap_area_t::adjacent_hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.adjacent_hexes)
  return adjacent_hexes_.Get(index);
}
 void offmap_area_t::set_adjacent_hexes(int index, ::google::protobuf::int32 value) {
  adjacent_hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.adjacent_hexes)
}
 void offmap_area_t::add_adjacent_hexes(::google::protobuf::int32 value) {
  adjacent_hexes_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.offmap_area_t.adjacent_hexes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
offmap_area_t::adjacent_hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.offmap_area_t.adjacent_hexes)
  return adjacent_hexes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
offmap_area_t::mutable_adjacent_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.offmap_area_t.adjacent_hexes)
  return &adjacent_hexes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int starting_national_holdings_t::kProvincesFieldNumber;
const int starting_national_holdings_t::kOffmapAreaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

starting_national_holdings_t::starting_national_holdings_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.starting_national_holdings_t)
}

void starting_national_holdings_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  offmap_area_ = const_cast< ::pb_message::offmap_area_t*>(&::pb_message::offmap_area_t::default_instance());
}

starting_national_holdings_t::starting_national_holdings_t(const starting_national_holdings_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.starting_national_holdings_t)
}

void starting_national_holdings_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  offmap_area_ = NULL;
}

starting_national_holdings_t::~starting_national_holdings_t() {
  // @@protoc_insertion_point(destructor:pb_message.starting_national_holdings_t)
  SharedDtor();
}

void starting_national_holdings_t::SharedDtor() {
  if (this != default_instance_) {
    delete offmap_area_;
  }
}

void starting_national_holdings_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* starting_national_holdings_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return starting_national_holdings_t_descriptor_;
}

const starting_national_holdings_t& starting_national_holdings_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

starting_national_holdings_t* starting_national_holdings_t::default_instance_ = NULL;

starting_national_holdings_t* starting_national_holdings_t::New(::google::protobuf::Arena* arena) const {
  starting_national_holdings_t* n = new starting_national_holdings_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void starting_national_holdings_t::Clear() {
  if (GetArenaNoVirtual() == NULL && offmap_area_ != NULL) delete offmap_area_;
  offmap_area_ = NULL;
  provinces_.Clear();
}

bool starting_national_holdings_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.starting_national_holdings_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_message.province_t provinces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_provinces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_provinces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_provinces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_offmap_area;
        break;
      }

      // optional .pb_message.offmap_area_t offmap_area = 2;
      case 2: {
        if (tag == 18) {
         parse_offmap_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offmap_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.starting_national_holdings_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.starting_national_holdings_t)
  return false;
#undef DO_
}

void starting_national_holdings_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.starting_national_holdings_t)
  // repeated .pb_message.province_t provinces = 1;
  for (unsigned int i = 0, n = this->provinces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->provinces(i), output);
  }

  // optional .pb_message.offmap_area_t offmap_area = 2;
  if (this->has_offmap_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->offmap_area_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.starting_national_holdings_t)
}

::google::protobuf::uint8* starting_national_holdings_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.starting_national_holdings_t)
  // repeated .pb_message.province_t provinces = 1;
  for (unsigned int i = 0, n = this->provinces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->provinces(i), target);
  }

  // optional .pb_message.offmap_area_t offmap_area = 2;
  if (this->has_offmap_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->offmap_area_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.starting_national_holdings_t)
  return target;
}

int starting_national_holdings_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.offmap_area_t offmap_area = 2;
  if (this->has_offmap_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offmap_area_);
  }

  // repeated .pb_message.province_t provinces = 1;
  total_size += 1 * this->provinces_size();
  for (int i = 0; i < this->provinces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->provinces(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void starting_national_holdings_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const starting_national_holdings_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const starting_national_holdings_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void starting_national_holdings_t::MergeFrom(const starting_national_holdings_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  provinces_.MergeFrom(from.provinces_);
  if (from.has_offmap_area()) {
    mutable_offmap_area()->::pb_message::offmap_area_t::MergeFrom(from.offmap_area());
  }
}

void starting_national_holdings_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starting_national_holdings_t::CopyFrom(const starting_national_holdings_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starting_national_holdings_t::IsInitialized() const {

  return true;
}

void starting_national_holdings_t::Swap(starting_national_holdings_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void starting_national_holdings_t::InternalSwap(starting_national_holdings_t* other) {
  provinces_.UnsafeArenaSwap(&other->provinces_);
  std::swap(offmap_area_, other->offmap_area_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata starting_national_holdings_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = starting_national_holdings_t_descriptor_;
  metadata.reflection = starting_national_holdings_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// starting_national_holdings_t

// repeated .pb_message.province_t provinces = 1;
int starting_national_holdings_t::provinces_size() const {
  return provinces_.size();
}
void starting_national_holdings_t::clear_provinces() {
  provinces_.Clear();
}
const ::pb_message::province_t& starting_national_holdings_t::provinces(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_national_holdings_t.provinces)
  return provinces_.Get(index);
}
::pb_message::province_t* starting_national_holdings_t::mutable_provinces(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.starting_national_holdings_t.provinces)
  return provinces_.Mutable(index);
}
::pb_message::province_t* starting_national_holdings_t::add_provinces() {
  // @@protoc_insertion_point(field_add:pb_message.starting_national_holdings_t.provinces)
  return provinces_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::province_t >*
starting_national_holdings_t::mutable_provinces() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_national_holdings_t.provinces)
  return &provinces_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::province_t >&
starting_national_holdings_t::provinces() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_national_holdings_t.provinces)
  return provinces_;
}

// optional .pb_message.offmap_area_t offmap_area = 2;
bool starting_national_holdings_t::has_offmap_area() const {
  return !_is_default_instance_ && offmap_area_ != NULL;
}
void starting_national_holdings_t::clear_offmap_area() {
  if (GetArenaNoVirtual() == NULL && offmap_area_ != NULL) delete offmap_area_;
  offmap_area_ = NULL;
}
const ::pb_message::offmap_area_t& starting_national_holdings_t::offmap_area() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_national_holdings_t.offmap_area)
  return offmap_area_ != NULL ? *offmap_area_ : *default_instance_->offmap_area_;
}
::pb_message::offmap_area_t* starting_national_holdings_t::mutable_offmap_area() {
  
  if (offmap_area_ == NULL) {
    offmap_area_ = new ::pb_message::offmap_area_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.starting_national_holdings_t.offmap_area)
  return offmap_area_;
}
::pb_message::offmap_area_t* starting_national_holdings_t::release_offmap_area() {
  
  ::pb_message::offmap_area_t* temp = offmap_area_;
  offmap_area_ = NULL;
  return temp;
}
void starting_national_holdings_t::set_allocated_offmap_area(::pb_message::offmap_area_t* offmap_area) {
  delete offmap_area_;
  offmap_area_ = offmap_area;
  if (offmap_area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.starting_national_holdings_t.offmap_area)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int map_t::kWidthFieldNumber;
const int map_t::kHeightFieldNumber;
const int map_t::kNzPlanetsFieldNumber;
const int map_t::kNzHexesFieldNumber;
const int map_t::kStartingNationalHoldingsFieldNumber;
const int map_t::kHexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

map_t::map_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.map_t)
}

void map_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

map_t::map_t(const map_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.map_t)
}

void map_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  starting_national_holdings_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  starting_national_holdings_.SetEntryDescriptor(
      &::pb_message::map_t_StartingNationalHoldingsEntry_descriptor_);
}

map_t::~map_t() {
  // @@protoc_insertion_point(destructor:pb_message.map_t)
  SharedDtor();
}

void map_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void map_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* map_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return map_t_descriptor_;
}

const map_t& map_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

map_t* map_t::default_instance_ = NULL;

map_t* map_t::New(::google::protobuf::Arena* arena) const {
  map_t* n = new map_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void map_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<map_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  nz_planets_.Clear();
  nz_hexes_.Clear();
  starting_national_holdings_.Clear();
  hexes_.Clear();
}

bool map_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.map_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nz_planets;
        break;
      }

      // repeated int32 nz_planets = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_nz_planets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nz_planets())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_nz_planets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nz_hexes;
        break;
      }

      // repeated int32 nz_hexes = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_nz_hexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nz_hexes())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_nz_hexes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_starting_national_holdings;
        break;
      }

      // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
      case 5: {
        if (tag == 42) {
         parse_starting_national_holdings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_starting_national_holdings:
          ::google::protobuf::scoped_ptr<map_t_StartingNationalHoldingsEntry> entry(starting_national_holdings_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_starting_national_holdings())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.map_t.StartingNationalHoldingsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_starting_national_holdings;
        if (input->ExpectTag(50)) goto parse_loop_hexes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb_message.hex_t hexes = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_hexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hexes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_hexes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.map_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.map_t)
  return false;
#undef DO_
}

void map_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.map_t)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // repeated int32 nz_planets = 3 [packed = true];
  if (this->nz_planets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nz_planets_cached_byte_size_);
  }
  for (int i = 0; i < this->nz_planets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->nz_planets(i), output);
  }

  // repeated int32 nz_hexes = 4 [packed = true];
  if (this->nz_hexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nz_hexes_cached_byte_size_);
  }
  for (int i = 0; i < this->nz_hexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->nz_hexes(i), output);
  }

  // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
  {
    ::google::protobuf::scoped_ptr<map_t_StartingNationalHoldingsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::starting_national_holdings_t >::const_iterator
        it = this->starting_national_holdings().begin();
        it != this->starting_national_holdings().end(); ++it) {
      entry.reset(starting_national_holdings_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          5, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.map_t.StartingNationalHoldingsEntry.key");
    }
  }

  // repeated .pb_message.hex_t hexes = 6;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hexes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.map_t)
}

::google::protobuf::uint8* map_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.map_t)
  // optional int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // repeated int32 nz_planets = 3 [packed = true];
  if (this->nz_planets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nz_planets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nz_planets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->nz_planets(i), target);
  }

  // repeated int32 nz_hexes = 4 [packed = true];
  if (this->nz_hexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nz_hexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nz_hexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->nz_hexes(i), target);
  }

  // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
  {
    ::google::protobuf::scoped_ptr<map_t_StartingNationalHoldingsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::starting_national_holdings_t >::const_iterator
        it = this->starting_national_holdings().begin();
        it != this->starting_national_holdings().end(); ++it) {
      entry.reset(starting_national_holdings_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              5, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.map_t.StartingNationalHoldingsEntry.key");
    }
  }

  // repeated .pb_message.hex_t hexes = 6;
  for (unsigned int i = 0, n = this->hexes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hexes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.map_t)
  return target;
}

int map_t::ByteSize() const {
  int total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // repeated int32 nz_planets = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nz_planets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nz_planets(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nz_planets_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 nz_hexes = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nz_hexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nz_hexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nz_hexes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
  total_size += 1 * this->starting_national_holdings_size();
  {
    ::google::protobuf::scoped_ptr<map_t_StartingNationalHoldingsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::starting_national_holdings_t >::const_iterator
        it = this->starting_national_holdings().begin();
        it != this->starting_national_holdings().end(); ++it) {
      entry.reset(starting_national_holdings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .pb_message.hex_t hexes = 6;
  total_size += 1 * this->hexes_size();
  for (int i = 0; i < this->hexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hexes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void map_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const map_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const map_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void map_t::MergeFrom(const map_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nz_planets_.MergeFrom(from.nz_planets_);
  nz_hexes_.MergeFrom(from.nz_hexes_);
  starting_national_holdings_.MergeFrom(from.starting_national_holdings_);
  hexes_.MergeFrom(from.hexes_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void map_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_t::CopyFrom(const map_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_t::IsInitialized() const {

  return true;
}

void map_t::Swap(map_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void map_t::InternalSwap(map_t* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  nz_planets_.UnsafeArenaSwap(&other->nz_planets_);
  nz_hexes_.UnsafeArenaSwap(&other->nz_hexes_);
  starting_national_holdings_.Swap(&other->starting_national_holdings_);
  hexes_.UnsafeArenaSwap(&other->hexes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata map_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = map_t_descriptor_;
  metadata.reflection = map_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// map_t

// optional int32 width = 1;
void map_t::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 map_t::width() const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.width)
  return width_;
}
 void map_t::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:pb_message.map_t.width)
}

// optional int32 height = 2;
void map_t::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 map_t::height() const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.height)
  return height_;
}
 void map_t::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:pb_message.map_t.height)
}

// repeated int32 nz_planets = 3 [packed = true];
int map_t::nz_planets_size() const {
  return nz_planets_.size();
}
void map_t::clear_nz_planets() {
  nz_planets_.Clear();
}
 ::google::protobuf::int32 map_t::nz_planets(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.nz_planets)
  return nz_planets_.Get(index);
}
 void map_t::set_nz_planets(int index, ::google::protobuf::int32 value) {
  nz_planets_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.map_t.nz_planets)
}
 void map_t::add_nz_planets(::google::protobuf::int32 value) {
  nz_planets_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.map_t.nz_planets)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
map_t::nz_planets() const {
  // @@protoc_insertion_point(field_list:pb_message.map_t.nz_planets)
  return nz_planets_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
map_t::mutable_nz_planets() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.map_t.nz_planets)
  return &nz_planets_;
}

// repeated int32 nz_hexes = 4 [packed = true];
int map_t::nz_hexes_size() const {
  return nz_hexes_.size();
}
void map_t::clear_nz_hexes() {
  nz_hexes_.Clear();
}
 ::google::protobuf::int32 map_t::nz_hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.nz_hexes)
  return nz_hexes_.Get(index);
}
 void map_t::set_nz_hexes(int index, ::google::protobuf::int32 value) {
  nz_hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.map_t.nz_hexes)
}
 void map_t::add_nz_hexes(::google::protobuf::int32 value) {
  nz_hexes_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.map_t.nz_hexes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
map_t::nz_hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.map_t.nz_hexes)
  return nz_hexes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
map_t::mutable_nz_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.map_t.nz_hexes)
  return &nz_hexes_;
}

// map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
int map_t::starting_national_holdings_size() const {
  return starting_national_holdings_.size();
}
void map_t::clear_starting_national_holdings() {
  starting_national_holdings_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::starting_national_holdings_t >&
map_t::starting_national_holdings() const {
  // @@protoc_insertion_point(field_map:pb_message.map_t.starting_national_holdings)
  return starting_national_holdings_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::starting_national_holdings_t >*
map_t::mutable_starting_national_holdings() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.map_t.starting_national_holdings)
  return starting_national_holdings_.MutableMap();
}

// repeated .pb_message.hex_t hexes = 6;
int map_t::hexes_size() const {
  return hexes_.size();
}
void map_t::clear_hexes() {
  hexes_.Clear();
}
const ::pb_message::hex_t& map_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.hexes)
  return hexes_.Get(index);
}
::pb_message::hex_t* map_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.map_t.hexes)
  return hexes_.Mutable(index);
}
::pb_message::hex_t* map_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.map_t.hexes)
  return hexes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::hex_t >*
map_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.map_t.hexes)
  return &hexes_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::hex_t >&
map_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.map_t.hexes)
  return hexes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int model_t::kNationsFieldNumber;
const int model_t::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

model_t::model_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.model_t)
}

void model_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  nations_ = const_cast< ::pb_message::nations_t*>(&::pb_message::nations_t::default_instance());
  map_ = const_cast< ::pb_message::map_t*>(&::pb_message::map_t::default_instance());
}

model_t::model_t(const model_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.model_t)
}

void model_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nations_ = NULL;
  map_ = NULL;
}

model_t::~model_t() {
  // @@protoc_insertion_point(destructor:pb_message.model_t)
  SharedDtor();
}

void model_t::SharedDtor() {
  if (this != default_instance_) {
    delete nations_;
    delete map_;
  }
}

void model_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* model_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return model_t_descriptor_;
}

const model_t& model_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

model_t* model_t::default_instance_ = NULL;

model_t* model_t::New(::google::protobuf::Arena* arena) const {
  model_t* n = new model_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void model_t::Clear() {
  if (GetArenaNoVirtual() == NULL && nations_ != NULL) delete nations_;
  nations_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}

bool model_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.model_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_message.nations_t nations = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }

      // optional .pb_message.map_t map = 2;
      case 2: {
        if (tag == 18) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.model_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.model_t)
  return false;
#undef DO_
}

void model_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.model_t)
  // optional .pb_message.nations_t nations = 1;
  if (this->has_nations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nations_, output);
  }

  // optional .pb_message.map_t map = 2;
  if (this->has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->map_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.model_t)
}

::google::protobuf::uint8* model_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.model_t)
  // optional .pb_message.nations_t nations = 1;
  if (this->has_nations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->nations_, target);
  }

  // optional .pb_message.map_t map = 2;
  if (this->has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->map_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.model_t)
  return target;
}

int model_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.nations_t nations = 1;
  if (this->has_nations()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nations_);
  }

  // optional .pb_message.map_t map = 2;
  if (this->has_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void model_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const model_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const model_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void model_t::MergeFrom(const model_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_nations()) {
    mutable_nations()->::pb_message::nations_t::MergeFrom(from.nations());
  }
  if (from.has_map()) {
    mutable_map()->::pb_message::map_t::MergeFrom(from.map());
  }
}

void model_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_t::CopyFrom(const model_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_t::IsInitialized() const {

  return true;
}

void model_t::Swap(model_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void model_t::InternalSwap(model_t* other) {
  std::swap(nations_, other->nations_);
  std::swap(map_, other->map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata model_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = model_t_descriptor_;
  metadata.reflection = model_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// model_t

// optional .pb_message.nations_t nations = 1;
bool model_t::has_nations() const {
  return !_is_default_instance_ && nations_ != NULL;
}
void model_t::clear_nations() {
  if (GetArenaNoVirtual() == NULL && nations_ != NULL) delete nations_;
  nations_ = NULL;
}
const ::pb_message::nations_t& model_t::nations() const {
  // @@protoc_insertion_point(field_get:pb_message.model_t.nations)
  return nations_ != NULL ? *nations_ : *default_instance_->nations_;
}
::pb_message::nations_t* model_t::mutable_nations() {
  
  if (nations_ == NULL) {
    nations_ = new ::pb_message::nations_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.model_t.nations)
  return nations_;
}
::pb_message::nations_t* model_t::release_nations() {
  
  ::pb_message::nations_t* temp = nations_;
  nations_ = NULL;
  return temp;
}
void model_t::set_allocated_nations(::pb_message::nations_t* nations) {
  delete nations_;
  nations_ = nations;
  if (nations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.model_t.nations)
}

// optional .pb_message.map_t map = 2;
bool model_t::has_map() const {
  return !_is_default_instance_ && map_ != NULL;
}
void model_t::clear_map() {
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}
const ::pb_message::map_t& model_t::map() const {
  // @@protoc_insertion_point(field_get:pb_message.model_t.map)
  return map_ != NULL ? *map_ : *default_instance_->map_;
}
::pb_message::map_t* model_t::mutable_map() {
  
  if (map_ == NULL) {
    map_ = new ::pb_message::map_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.model_t.map)
  return map_;
}
::pb_message::map_t* model_t::release_map() {
  
  ::pb_message::map_t* temp = map_;
  map_ = NULL;
  return temp;
}
void model_t::set_allocated_map(::pb_message::map_t* map) {
  delete map_;
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.model_t.map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oob_unit_t::kUnitFieldNumber;
const int oob_unit_t::kTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oob_unit_t::oob_unit_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.oob_unit_t)
}

void oob_unit_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

oob_unit_t::oob_unit_t(const oob_unit_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.oob_unit_t)
}

void oob_unit_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  times_ = 0;
}

oob_unit_t::~oob_unit_t() {
  // @@protoc_insertion_point(destructor:pb_message.oob_unit_t)
  SharedDtor();
}

void oob_unit_t::SharedDtor() {
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void oob_unit_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oob_unit_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return oob_unit_t_descriptor_;
}

const oob_unit_t& oob_unit_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

oob_unit_t* oob_unit_t::default_instance_ = NULL;

oob_unit_t* oob_unit_t::New(::google::protobuf::Arena* arena) const {
  oob_unit_t* n = new oob_unit_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oob_unit_t::Clear() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  times_ = 0;
}

bool oob_unit_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.oob_unit_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.oob_unit_t.unit"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (tag == 16) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.oob_unit_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.oob_unit_t)
  return false;
#undef DO_
}

void oob_unit_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.oob_unit_t)
  // optional string unit = 1;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.oob_unit_t.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit(), output);
  }

  // optional int32 times = 2;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.oob_unit_t)
}

::google::protobuf::uint8* oob_unit_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.oob_unit_t)
  // optional string unit = 1;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.oob_unit_t.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit(), target);
  }

  // optional int32 times = 2;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.oob_unit_t)
  return target;
}

int oob_unit_t::ByteSize() const {
  int total_size = 0;

  // optional string unit = 1;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // optional int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oob_unit_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const oob_unit_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const oob_unit_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void oob_unit_t::MergeFrom(const oob_unit_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
}

void oob_unit_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oob_unit_t::CopyFrom(const oob_unit_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oob_unit_t::IsInitialized() const {

  return true;
}

void oob_unit_t::Swap(oob_unit_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oob_unit_t::InternalSwap(oob_unit_t* other) {
  unit_.Swap(&other->unit_);
  std::swap(times_, other->times_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oob_unit_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = oob_unit_t_descriptor_;
  metadata.reflection = oob_unit_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oob_unit_t

// optional string unit = 1;
void oob_unit_t::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& oob_unit_t::unit() const {
  // @@protoc_insertion_point(field_get:pb_message.oob_unit_t.unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void oob_unit_t::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.oob_unit_t.unit)
}
 void oob_unit_t::set_unit(const char* value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.oob_unit_t.unit)
}
 void oob_unit_t::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.oob_unit_t.unit)
}
 ::std::string* oob_unit_t::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.oob_unit_t.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* oob_unit_t::release_unit() {
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void oob_unit_t::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:pb_message.oob_unit_t.unit)
}

// optional int32 times = 2;
void oob_unit_t::clear_times() {
  times_ = 0;
}
 ::google::protobuf::int32 oob_unit_t::times() const {
  // @@protoc_insertion_point(field_get:pb_message.oob_unit_t.times)
  return times_;
}
 void oob_unit_t::set_times(::google::protobuf::int32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:pb_message.oob_unit_t.times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int production_element_t::kYearFieldNumber;
const int production_element_t::kSeasonFieldNumber;
const int production_element_t::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

production_element_t::production_element_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.production_element_t)
}

void production_element_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

production_element_t::production_element_t(const production_element_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.production_element_t)
}

void production_element_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  year_ = 0;
  season_ = 0;
}

production_element_t::~production_element_t() {
  // @@protoc_insertion_point(destructor:pb_message.production_element_t)
  SharedDtor();
}

void production_element_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void production_element_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* production_element_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return production_element_t_descriptor_;
}

const production_element_t& production_element_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

production_element_t* production_element_t::default_instance_ = NULL;

production_element_t* production_element_t::New(::google::protobuf::Arena* arena) const {
  production_element_t* n = new production_element_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void production_element_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<production_element_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(year_, season_);

#undef ZR_HELPER_
#undef ZR_

  units_.Clear();
}

bool production_element_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.production_element_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_season;
        break;
      }

      // optional .pb_message.season_t season = 2;
      case 2: {
        if (tag == 16) {
         parse_season:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_season(static_cast< ::pb_message::season_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_units;
        break;
      }

      // repeated .pb_message.oob_unit_t units = 3;
      case 3: {
        if (tag == 26) {
         parse_units:
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_units;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.production_element_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.production_element_t)
  return false;
#undef DO_
}

void production_element_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.production_element_t)
  // optional int32 year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional .pb_message.season_t season = 2;
  if (this->season() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->season(), output);
  }

  // repeated .pb_message.oob_unit_t units = 3;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->units(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.production_element_t)
}

::google::protobuf::uint8* production_element_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.production_element_t)
  // optional int32 year = 1;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional .pb_message.season_t season = 2;
  if (this->season() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->season(), target);
  }

  // repeated .pb_message.oob_unit_t units = 3;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->units(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.production_element_t)
  return target;
}

int production_element_t::ByteSize() const {
  int total_size = 0;

  // optional int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year());
  }

  // optional .pb_message.season_t season = 2;
  if (this->season() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->season());
  }

  // repeated .pb_message.oob_unit_t units = 3;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void production_element_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const production_element_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const production_element_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void production_element_t::MergeFrom(const production_element_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  units_.MergeFrom(from.units_);
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.season() != 0) {
    set_season(from.season());
  }
}

void production_element_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void production_element_t::CopyFrom(const production_element_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool production_element_t::IsInitialized() const {

  return true;
}

void production_element_t::Swap(production_element_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void production_element_t::InternalSwap(production_element_t* other) {
  std::swap(year_, other->year_);
  std::swap(season_, other->season_);
  units_.UnsafeArenaSwap(&other->units_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata production_element_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = production_element_t_descriptor_;
  metadata.reflection = production_element_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// production_element_t

// optional int32 year = 1;
void production_element_t::clear_year() {
  year_ = 0;
}
 ::google::protobuf::int32 production_element_t::year() const {
  // @@protoc_insertion_point(field_get:pb_message.production_element_t.year)
  return year_;
}
 void production_element_t::set_year(::google::protobuf::int32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:pb_message.production_element_t.year)
}

// optional .pb_message.season_t season = 2;
void production_element_t::clear_season() {
  season_ = 0;
}
 ::pb_message::season_t production_element_t::season() const {
  // @@protoc_insertion_point(field_get:pb_message.production_element_t.season)
  return static_cast< ::pb_message::season_t >(season_);
}
 void production_element_t::set_season(::pb_message::season_t value) {
  
  season_ = value;
  // @@protoc_insertion_point(field_set:pb_message.production_element_t.season)
}

// repeated .pb_message.oob_unit_t units = 3;
int production_element_t::units_size() const {
  return units_.size();
}
void production_element_t::clear_units() {
  units_.Clear();
}
const ::pb_message::oob_unit_t& production_element_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.production_element_t.units)
  return units_.Get(index);
}
::pb_message::oob_unit_t* production_element_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.production_element_t.units)
  return units_.Mutable(index);
}
::pb_message::oob_unit_t* production_element_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.production_element_t.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >*
production_element_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.production_element_t.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >&
production_element_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.production_element_t.units)
  return units_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int starting_fleet_t::kHexesFieldNumber;
const int starting_fleet_t::kUnitsFieldNumber;
const int starting_fleet_t::kReserveFieldNumber;
const int starting_fleet_t::kPrewarConstructionFieldNumber;
const int starting_fleet_t::kStrategicMoveArrivalYearFieldNumber;
const int starting_fleet_t::kStrategicMoveArrivalSeasonFieldNumber;
const int starting_fleet_t::kHexPlacementLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

starting_fleet_t::starting_fleet_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.starting_fleet_t)
}

void starting_fleet_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

starting_fleet_t::starting_fleet_t(const starting_fleet_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.starting_fleet_t)
}

void starting_fleet_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  reserve_ = false;
  strategic_move_arrival_year_ = 0;
  strategic_move_arrival_season_ = 0;
  hex_placement_limits_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  hex_placement_limits_.SetEntryDescriptor(
      &::pb_message::starting_fleet_t_HexPlacementLimitsEntry_descriptor_);
}

starting_fleet_t::~starting_fleet_t() {
  // @@protoc_insertion_point(destructor:pb_message.starting_fleet_t)
  SharedDtor();
}

void starting_fleet_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void starting_fleet_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* starting_fleet_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return starting_fleet_t_descriptor_;
}

const starting_fleet_t& starting_fleet_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

starting_fleet_t* starting_fleet_t::default_instance_ = NULL;

starting_fleet_t* starting_fleet_t::New(::google::protobuf::Arena* arena) const {
  starting_fleet_t* n = new starting_fleet_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void starting_fleet_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<starting_fleet_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reserve_, strategic_move_arrival_year_);
  strategic_move_arrival_season_ = 0;

#undef ZR_HELPER_
#undef ZR_

  hexes_.Clear();
  units_.Clear();
  prewar_construction_.Clear();
  hex_placement_limits_.Clear();
}

bool starting_fleet_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.starting_fleet_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 hexes = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hexes())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_hexes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_units;
        break;
      }

      // repeated .pb_message.oob_unit_t units = 2;
      case 2: {
        if (tag == 18) {
         parse_units:
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_units;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_reserve;
        break;
      }

      // optional bool reserve = 3;
      case 3: {
        if (tag == 24) {
         parse_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserve_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_prewar_construction;
        break;
      }

      // repeated .pb_message.production_element_t prewar_construction = 4;
      case 4: {
        if (tag == 34) {
         parse_prewar_construction:
          DO_(input->IncrementRecursionDepth());
         parse_loop_prewar_construction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prewar_construction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_prewar_construction;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_strategic_move_arrival_year;
        break;
      }

      // optional int32 strategic_move_arrival_year = 5;
      case 5: {
        if (tag == 40) {
         parse_strategic_move_arrival_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strategic_move_arrival_year_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_strategic_move_arrival_season;
        break;
      }

      // optional .pb_message.season_t strategic_move_arrival_season = 6;
      case 6: {
        if (tag == 48) {
         parse_strategic_move_arrival_season:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_strategic_move_arrival_season(static_cast< ::pb_message::season_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hex_placement_limits;
        break;
      }

      // map<int32, int32> hex_placement_limits = 7;
      case 7: {
        if (tag == 58) {
         parse_hex_placement_limits:
          DO_(input->IncrementRecursionDepth());
         parse_loop_hex_placement_limits:
          ::google::protobuf::scoped_ptr<starting_fleet_t_HexPlacementLimitsEntry> entry(hex_placement_limits_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_hex_placement_limits())[entry->key()] = *entry->mutable_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_hex_placement_limits;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.starting_fleet_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.starting_fleet_t)
  return false;
#undef DO_
}

void starting_fleet_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.starting_fleet_t)
  // repeated int32 hexes = 1 [packed = true];
  if (this->hexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hexes_cached_byte_size_);
  }
  for (int i = 0; i < this->hexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->hexes(i), output);
  }

  // repeated .pb_message.oob_unit_t units = 2;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->units(i), output);
  }

  // optional bool reserve = 3;
  if (this->reserve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reserve(), output);
  }

  // repeated .pb_message.production_element_t prewar_construction = 4;
  for (unsigned int i = 0, n = this->prewar_construction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prewar_construction(i), output);
  }

  // optional int32 strategic_move_arrival_year = 5;
  if (this->strategic_move_arrival_year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strategic_move_arrival_year(), output);
  }

  // optional .pb_message.season_t strategic_move_arrival_season = 6;
  if (this->strategic_move_arrival_season() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->strategic_move_arrival_season(), output);
  }

  // map<int32, int32> hex_placement_limits = 7;
  {
    ::google::protobuf::scoped_ptr<starting_fleet_t_HexPlacementLimitsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->hex_placement_limits().begin();
        it != this->hex_placement_limits().end(); ++it) {
      entry.reset(hex_placement_limits_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          7, *entry, output);
    }
  }

  // @@protoc_insertion_point(serialize_end:pb_message.starting_fleet_t)
}

::google::protobuf::uint8* starting_fleet_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.starting_fleet_t)
  // repeated int32 hexes = 1 [packed = true];
  if (this->hexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->hexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->hexes(i), target);
  }

  // repeated .pb_message.oob_unit_t units = 2;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units(i), target);
  }

  // optional bool reserve = 3;
  if (this->reserve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reserve(), target);
  }

  // repeated .pb_message.production_element_t prewar_construction = 4;
  for (unsigned int i = 0, n = this->prewar_construction_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prewar_construction(i), target);
  }

  // optional int32 strategic_move_arrival_year = 5;
  if (this->strategic_move_arrival_year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strategic_move_arrival_year(), target);
  }

  // optional .pb_message.season_t strategic_move_arrival_season = 6;
  if (this->strategic_move_arrival_season() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->strategic_move_arrival_season(), target);
  }

  // map<int32, int32> hex_placement_limits = 7;
  {
    ::google::protobuf::scoped_ptr<starting_fleet_t_HexPlacementLimitsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->hex_placement_limits().begin();
        it != this->hex_placement_limits().end(); ++it) {
      entry.reset(hex_placement_limits_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              7, *entry, target);
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.starting_fleet_t)
  return target;
}

int starting_fleet_t::ByteSize() const {
  int total_size = 0;

  // optional bool reserve = 3;
  if (this->reserve() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 strategic_move_arrival_year = 5;
  if (this->strategic_move_arrival_year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->strategic_move_arrival_year());
  }

  // optional .pb_message.season_t strategic_move_arrival_season = 6;
  if (this->strategic_move_arrival_season() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->strategic_move_arrival_season());
  }

  // repeated int32 hexes = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->hexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hexes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .pb_message.oob_unit_t units = 2;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  // repeated .pb_message.production_element_t prewar_construction = 4;
  total_size += 1 * this->prewar_construction_size();
  for (int i = 0; i < this->prewar_construction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prewar_construction(i));
  }

  // map<int32, int32> hex_placement_limits = 7;
  total_size += 1 * this->hex_placement_limits_size();
  {
    ::google::protobuf::scoped_ptr<starting_fleet_t_HexPlacementLimitsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = this->hex_placement_limits().begin();
        it != this->hex_placement_limits().end(); ++it) {
      entry.reset(hex_placement_limits_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void starting_fleet_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const starting_fleet_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const starting_fleet_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void starting_fleet_t::MergeFrom(const starting_fleet_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  hexes_.MergeFrom(from.hexes_);
  units_.MergeFrom(from.units_);
  prewar_construction_.MergeFrom(from.prewar_construction_);
  hex_placement_limits_.MergeFrom(from.hex_placement_limits_);
  if (from.reserve() != 0) {
    set_reserve(from.reserve());
  }
  if (from.strategic_move_arrival_year() != 0) {
    set_strategic_move_arrival_year(from.strategic_move_arrival_year());
  }
  if (from.strategic_move_arrival_season() != 0) {
    set_strategic_move_arrival_season(from.strategic_move_arrival_season());
  }
}

void starting_fleet_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starting_fleet_t::CopyFrom(const starting_fleet_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starting_fleet_t::IsInitialized() const {

  return true;
}

void starting_fleet_t::Swap(starting_fleet_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void starting_fleet_t::InternalSwap(starting_fleet_t* other) {
  hexes_.UnsafeArenaSwap(&other->hexes_);
  units_.UnsafeArenaSwap(&other->units_);
  std::swap(reserve_, other->reserve_);
  prewar_construction_.UnsafeArenaSwap(&other->prewar_construction_);
  std::swap(strategic_move_arrival_year_, other->strategic_move_arrival_year_);
  std::swap(strategic_move_arrival_season_, other->strategic_move_arrival_season_);
  hex_placement_limits_.Swap(&other->hex_placement_limits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata starting_fleet_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = starting_fleet_t_descriptor_;
  metadata.reflection = starting_fleet_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// starting_fleet_t

// repeated int32 hexes = 1 [packed = true];
int starting_fleet_t::hexes_size() const {
  return hexes_.size();
}
void starting_fleet_t::clear_hexes() {
  hexes_.Clear();
}
 ::google::protobuf::int32 starting_fleet_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.hexes)
  return hexes_.Get(index);
}
 void starting_fleet_t::set_hexes(int index, ::google::protobuf::int32 value) {
  hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.hexes)
}
 void starting_fleet_t::add_hexes(::google::protobuf::int32 value) {
  hexes_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.starting_fleet_t.hexes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
starting_fleet_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_fleet_t.hexes)
  return hexes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
starting_fleet_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_fleet_t.hexes)
  return &hexes_;
}

// repeated .pb_message.oob_unit_t units = 2;
int starting_fleet_t::units_size() const {
  return units_.size();
}
void starting_fleet_t::clear_units() {
  units_.Clear();
}
const ::pb_message::oob_unit_t& starting_fleet_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.units)
  return units_.Get(index);
}
::pb_message::oob_unit_t* starting_fleet_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.starting_fleet_t.units)
  return units_.Mutable(index);
}
::pb_message::oob_unit_t* starting_fleet_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.starting_fleet_t.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >*
starting_fleet_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_fleet_t.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >&
starting_fleet_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_fleet_t.units)
  return units_;
}

// optional bool reserve = 3;
void starting_fleet_t::clear_reserve() {
  reserve_ = false;
}
 bool starting_fleet_t::reserve() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.reserve)
  return reserve_;
}
 void starting_fleet_t::set_reserve(bool value) {
  
  reserve_ = value;
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.reserve)
}

// repeated .pb_message.production_element_t prewar_construction = 4;
int starting_fleet_t::prewar_construction_size() const {
  return prewar_construction_.size();
}
void starting_fleet_t::clear_prewar_construction() {
  prewar_construction_.Clear();
}
const ::pb_message::production_element_t& starting_fleet_t::prewar_construction(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.prewar_construction)
  return prewar_construction_.Get(index);
}
::pb_message::production_element_t* starting_fleet_t::mutable_prewar_construction(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.starting_fleet_t.prewar_construction)
  return prewar_construction_.Mutable(index);
}
::pb_message::production_element_t* starting_fleet_t::add_prewar_construction() {
  // @@protoc_insertion_point(field_add:pb_message.starting_fleet_t.prewar_construction)
  return prewar_construction_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::production_element_t >*
starting_fleet_t::mutable_prewar_construction() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_fleet_t.prewar_construction)
  return &prewar_construction_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::production_element_t >&
starting_fleet_t::prewar_construction() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_fleet_t.prewar_construction)
  return prewar_construction_;
}

// optional int32 strategic_move_arrival_year = 5;
void starting_fleet_t::clear_strategic_move_arrival_year() {
  strategic_move_arrival_year_ = 0;
}
 ::google::protobuf::int32 starting_fleet_t::strategic_move_arrival_year() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.strategic_move_arrival_year)
  return strategic_move_arrival_year_;
}
 void starting_fleet_t::set_strategic_move_arrival_year(::google::protobuf::int32 value) {
  
  strategic_move_arrival_year_ = value;
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.strategic_move_arrival_year)
}

// optional .pb_message.season_t strategic_move_arrival_season = 6;
void starting_fleet_t::clear_strategic_move_arrival_season() {
  strategic_move_arrival_season_ = 0;
}
 ::pb_message::season_t starting_fleet_t::strategic_move_arrival_season() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.strategic_move_arrival_season)
  return static_cast< ::pb_message::season_t >(strategic_move_arrival_season_);
}
 void starting_fleet_t::set_strategic_move_arrival_season(::pb_message::season_t value) {
  
  strategic_move_arrival_season_ = value;
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.strategic_move_arrival_season)
}

// map<int32, int32> hex_placement_limits = 7;
int starting_fleet_t::hex_placement_limits_size() const {
  return hex_placement_limits_.size();
}
void starting_fleet_t::clear_hex_placement_limits() {
  hex_placement_limits_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
starting_fleet_t::hex_placement_limits() const {
  // @@protoc_insertion_point(field_map:pb_message.starting_fleet_t.hex_placement_limits)
  return hex_placement_limits_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
starting_fleet_t::mutable_hex_placement_limits() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.starting_fleet_t.hex_placement_limits)
  return hex_placement_limits_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mothball_reserve_t::kUnitsFieldNumber;
const int mothball_reserve_t::kWarReleaseFieldNumber;
const int mothball_reserve_t::kLimitedWarReleaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mothball_reserve_t::mothball_reserve_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.mothball_reserve_t)
}

void mothball_reserve_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

mothball_reserve_t::mothball_reserve_t(const mothball_reserve_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.mothball_reserve_t)
}

void mothball_reserve_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

mothball_reserve_t::~mothball_reserve_t() {
  // @@protoc_insertion_point(destructor:pb_message.mothball_reserve_t)
  SharedDtor();
}

void mothball_reserve_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mothball_reserve_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mothball_reserve_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mothball_reserve_t_descriptor_;
}

const mothball_reserve_t& mothball_reserve_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

mothball_reserve_t* mothball_reserve_t::default_instance_ = NULL;

mothball_reserve_t* mothball_reserve_t::New(::google::protobuf::Arena* arena) const {
  mothball_reserve_t* n = new mothball_reserve_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mothball_reserve_t::Clear() {
  units_.Clear();
  war_release_.Clear();
  limited_war_release_.Clear();
}

bool mothball_reserve_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.mothball_reserve_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_message.oob_unit_t units = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_units;
        if (input->ExpectTag(18)) goto parse_loop_war_release;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb_message.oob_unit_t war_release = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_war_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_war_release()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_war_release;
        if (input->ExpectTag(26)) goto parse_loop_limited_war_release;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb_message.oob_unit_t limited_war_release = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_limited_war_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_limited_war_release()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_limited_war_release;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.mothball_reserve_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.mothball_reserve_t)
  return false;
#undef DO_
}

void mothball_reserve_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.mothball_reserve_t)
  // repeated .pb_message.oob_unit_t units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(i), output);
  }

  // repeated .pb_message.oob_unit_t war_release = 2;
  for (unsigned int i = 0, n = this->war_release_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->war_release(i), output);
  }

  // repeated .pb_message.oob_unit_t limited_war_release = 3;
  for (unsigned int i = 0, n = this->limited_war_release_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limited_war_release(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.mothball_reserve_t)
}

::google::protobuf::uint8* mothball_reserve_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.mothball_reserve_t)
  // repeated .pb_message.oob_unit_t units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->units(i), target);
  }

  // repeated .pb_message.oob_unit_t war_release = 2;
  for (unsigned int i = 0, n = this->war_release_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->war_release(i), target);
  }

  // repeated .pb_message.oob_unit_t limited_war_release = 3;
  for (unsigned int i = 0, n = this->limited_war_release_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->limited_war_release(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.mothball_reserve_t)
  return target;
}

int mothball_reserve_t::ByteSize() const {
  int total_size = 0;

  // repeated .pb_message.oob_unit_t units = 1;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  // repeated .pb_message.oob_unit_t war_release = 2;
  total_size += 1 * this->war_release_size();
  for (int i = 0; i < this->war_release_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->war_release(i));
  }

  // repeated .pb_message.oob_unit_t limited_war_release = 3;
  total_size += 1 * this->limited_war_release_size();
  for (int i = 0; i < this->limited_war_release_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limited_war_release(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mothball_reserve_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const mothball_reserve_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const mothball_reserve_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mothball_reserve_t::MergeFrom(const mothball_reserve_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  units_.MergeFrom(from.units_);
  war_release_.MergeFrom(from.war_release_);
  limited_war_release_.MergeFrom(from.limited_war_release_);
}

void mothball_reserve_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mothball_reserve_t::CopyFrom(const mothball_reserve_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mothball_reserve_t::IsInitialized() const {

  return true;
}

void mothball_reserve_t::Swap(mothball_reserve_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mothball_reserve_t::InternalSwap(mothball_reserve_t* other) {
  units_.UnsafeArenaSwap(&other->units_);
  war_release_.UnsafeArenaSwap(&other->war_release_);
  limited_war_release_.UnsafeArenaSwap(&other->limited_war_release_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mothball_reserve_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mothball_reserve_t_descriptor_;
  metadata.reflection = mothball_reserve_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mothball_reserve_t

// repeated .pb_message.oob_unit_t units = 1;
int mothball_reserve_t::units_size() const {
  return units_.size();
}
void mothball_reserve_t::clear_units() {
  units_.Clear();
}
const ::pb_message::oob_unit_t& mothball_reserve_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.mothball_reserve_t.units)
  return units_.Get(index);
}
::pb_message::oob_unit_t* mothball_reserve_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.mothball_reserve_t.units)
  return units_.Mutable(index);
}
::pb_message::oob_unit_t* mothball_reserve_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.mothball_reserve_t.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >*
mothball_reserve_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.mothball_reserve_t.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >&
mothball_reserve_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.mothball_reserve_t.units)
  return units_;
}

// repeated .pb_message.oob_unit_t war_release = 2;
int mothball_reserve_t::war_release_size() const {
  return war_release_.size();
}
void mothball_reserve_t::clear_war_release() {
  war_release_.Clear();
}
const ::pb_message::oob_unit_t& mothball_reserve_t::war_release(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.mothball_reserve_t.war_release)
  return war_release_.Get(index);
}
::pb_message::oob_unit_t* mothball_reserve_t::mutable_war_release(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.mothball_reserve_t.war_release)
  return war_release_.Mutable(index);
}
::pb_message::oob_unit_t* mothball_reserve_t::add_war_release() {
  // @@protoc_insertion_point(field_add:pb_message.mothball_reserve_t.war_release)
  return war_release_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >*
mothball_reserve_t::mutable_war_release() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.mothball_reserve_t.war_release)
  return &war_release_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >&
mothball_reserve_t::war_release() const {
  // @@protoc_insertion_point(field_list:pb_message.mothball_reserve_t.war_release)
  return war_release_;
}

// repeated .pb_message.oob_unit_t limited_war_release = 3;
int mothball_reserve_t::limited_war_release_size() const {
  return limited_war_release_.size();
}
void mothball_reserve_t::clear_limited_war_release() {
  limited_war_release_.Clear();
}
const ::pb_message::oob_unit_t& mothball_reserve_t::limited_war_release(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.mothball_reserve_t.limited_war_release)
  return limited_war_release_.Get(index);
}
::pb_message::oob_unit_t* mothball_reserve_t::mutable_limited_war_release(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.mothball_reserve_t.limited_war_release)
  return limited_war_release_.Mutable(index);
}
::pb_message::oob_unit_t* mothball_reserve_t::add_limited_war_release() {
  // @@protoc_insertion_point(field_add:pb_message.mothball_reserve_t.limited_war_release)
  return limited_war_release_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >*
mothball_reserve_t::mutable_limited_war_release() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.mothball_reserve_t.limited_war_release)
  return &limited_war_release_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::oob_unit_t >&
mothball_reserve_t::limited_war_release() const {
  // @@protoc_insertion_point(field_list:pb_message.mothball_reserve_t.limited_war_release)
  return limited_war_release_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int order_of_battle_t::kStartingFleetsFieldNumber;
const int order_of_battle_t::kMothballReserveFieldNumber;
const int order_of_battle_t::kProductionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

order_of_battle_t::order_of_battle_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.order_of_battle_t)
}

void order_of_battle_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  mothball_reserve_ = const_cast< ::pb_message::mothball_reserve_t*>(&::pb_message::mothball_reserve_t::default_instance());
}

order_of_battle_t::order_of_battle_t(const order_of_battle_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.order_of_battle_t)
}

void order_of_battle_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  starting_fleets_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  starting_fleets_.SetEntryDescriptor(
      &::pb_message::order_of_battle_t_StartingFleetsEntry_descriptor_);
  mothball_reserve_ = NULL;
}

order_of_battle_t::~order_of_battle_t() {
  // @@protoc_insertion_point(destructor:pb_message.order_of_battle_t)
  SharedDtor();
}

void order_of_battle_t::SharedDtor() {
  if (this != default_instance_) {
    delete mothball_reserve_;
  }
}

void order_of_battle_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_of_battle_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_of_battle_t_descriptor_;
}

const order_of_battle_t& order_of_battle_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

order_of_battle_t* order_of_battle_t::default_instance_ = NULL;

order_of_battle_t* order_of_battle_t::New(::google::protobuf::Arena* arena) const {
  order_of_battle_t* n = new order_of_battle_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void order_of_battle_t::Clear() {
  if (GetArenaNoVirtual() == NULL && mothball_reserve_ != NULL) delete mothball_reserve_;
  mothball_reserve_ = NULL;
  starting_fleets_.Clear();
  production_.Clear();
}

bool order_of_battle_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.order_of_battle_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_starting_fleets:
          ::google::protobuf::scoped_ptr<order_of_battle_t_StartingFleetsEntry> entry(starting_fleets_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_starting_fleets())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.order_of_battle_t.StartingFleetsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_starting_fleets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_mothball_reserve;
        break;
      }

      // optional .pb_message.mothball_reserve_t mothball_reserve = 2;
      case 2: {
        if (tag == 18) {
         parse_mothball_reserve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mothball_reserve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_production;
        break;
      }

      // repeated .pb_message.production_element_t production = 3;
      case 3: {
        if (tag == 26) {
         parse_production:
          DO_(input->IncrementRecursionDepth());
         parse_loop_production:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_production()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_production;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.order_of_battle_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.order_of_battle_t)
  return false;
#undef DO_
}

void order_of_battle_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.order_of_battle_t)
  // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
  {
    ::google::protobuf::scoped_ptr<order_of_battle_t_StartingFleetsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::starting_fleet_t >::const_iterator
        it = this->starting_fleets().begin();
        it != this->starting_fleets().end(); ++it) {
      entry.reset(starting_fleets_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.order_of_battle_t.StartingFleetsEntry.key");
    }
  }

  // optional .pb_message.mothball_reserve_t mothball_reserve = 2;
  if (this->has_mothball_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mothball_reserve_, output);
  }

  // repeated .pb_message.production_element_t production = 3;
  for (unsigned int i = 0, n = this->production_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->production(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.order_of_battle_t)
}

::google::protobuf::uint8* order_of_battle_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.order_of_battle_t)
  // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
  {
    ::google::protobuf::scoped_ptr<order_of_battle_t_StartingFleetsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::starting_fleet_t >::const_iterator
        it = this->starting_fleets().begin();
        it != this->starting_fleets().end(); ++it) {
      entry.reset(starting_fleets_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.order_of_battle_t.StartingFleetsEntry.key");
    }
  }

  // optional .pb_message.mothball_reserve_t mothball_reserve = 2;
  if (this->has_mothball_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->mothball_reserve_, target);
  }

  // repeated .pb_message.production_element_t production = 3;
  for (unsigned int i = 0, n = this->production_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->production(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.order_of_battle_t)
  return target;
}

int order_of_battle_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.mothball_reserve_t mothball_reserve = 2;
  if (this->has_mothball_reserve()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mothball_reserve_);
  }

  // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
  total_size += 1 * this->starting_fleets_size();
  {
    ::google::protobuf::scoped_ptr<order_of_battle_t_StartingFleetsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::starting_fleet_t >::const_iterator
        it = this->starting_fleets().begin();
        it != this->starting_fleets().end(); ++it) {
      entry.reset(starting_fleets_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .pb_message.production_element_t production = 3;
  total_size += 1 * this->production_size();
  for (int i = 0; i < this->production_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->production(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_of_battle_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const order_of_battle_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const order_of_battle_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_of_battle_t::MergeFrom(const order_of_battle_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  starting_fleets_.MergeFrom(from.starting_fleets_);
  production_.MergeFrom(from.production_);
  if (from.has_mothball_reserve()) {
    mutable_mothball_reserve()->::pb_message::mothball_reserve_t::MergeFrom(from.mothball_reserve());
  }
}

void order_of_battle_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_of_battle_t::CopyFrom(const order_of_battle_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_of_battle_t::IsInitialized() const {

  return true;
}

void order_of_battle_t::Swap(order_of_battle_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void order_of_battle_t::InternalSwap(order_of_battle_t* other) {
  starting_fleets_.Swap(&other->starting_fleets_);
  std::swap(mothball_reserve_, other->mothball_reserve_);
  production_.UnsafeArenaSwap(&other->production_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata order_of_battle_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_of_battle_t_descriptor_;
  metadata.reflection = order_of_battle_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// order_of_battle_t

// map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
int order_of_battle_t::starting_fleets_size() const {
  return starting_fleets_.size();
}
void order_of_battle_t::clear_starting_fleets() {
  starting_fleets_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::starting_fleet_t >&
order_of_battle_t::starting_fleets() const {
  // @@protoc_insertion_point(field_map:pb_message.order_of_battle_t.starting_fleets)
  return starting_fleets_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::starting_fleet_t >*
order_of_battle_t::mutable_starting_fleets() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.order_of_battle_t.starting_fleets)
  return starting_fleets_.MutableMap();
}

// optional .pb_message.mothball_reserve_t mothball_reserve = 2;
bool order_of_battle_t::has_mothball_reserve() const {
  return !_is_default_instance_ && mothball_reserve_ != NULL;
}
void order_of_battle_t::clear_mothball_reserve() {
  if (GetArenaNoVirtual() == NULL && mothball_reserve_ != NULL) delete mothball_reserve_;
  mothball_reserve_ = NULL;
}
const ::pb_message::mothball_reserve_t& order_of_battle_t::mothball_reserve() const {
  // @@protoc_insertion_point(field_get:pb_message.order_of_battle_t.mothball_reserve)
  return mothball_reserve_ != NULL ? *mothball_reserve_ : *default_instance_->mothball_reserve_;
}
::pb_message::mothball_reserve_t* order_of_battle_t::mutable_mothball_reserve() {
  
  if (mothball_reserve_ == NULL) {
    mothball_reserve_ = new ::pb_message::mothball_reserve_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.order_of_battle_t.mothball_reserve)
  return mothball_reserve_;
}
::pb_message::mothball_reserve_t* order_of_battle_t::release_mothball_reserve() {
  
  ::pb_message::mothball_reserve_t* temp = mothball_reserve_;
  mothball_reserve_ = NULL;
  return temp;
}
void order_of_battle_t::set_allocated_mothball_reserve(::pb_message::mothball_reserve_t* mothball_reserve) {
  delete mothball_reserve_;
  mothball_reserve_ = mothball_reserve;
  if (mothball_reserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.order_of_battle_t.mothball_reserve)
}

// repeated .pb_message.production_element_t production = 3;
int order_of_battle_t::production_size() const {
  return production_.size();
}
void order_of_battle_t::clear_production() {
  production_.Clear();
}
const ::pb_message::production_element_t& order_of_battle_t::production(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.order_of_battle_t.production)
  return production_.Get(index);
}
::pb_message::production_element_t* order_of_battle_t::mutable_production(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.order_of_battle_t.production)
  return production_.Mutable(index);
}
::pb_message::production_element_t* order_of_battle_t::add_production() {
  // @@protoc_insertion_point(field_add:pb_message.order_of_battle_t.production)
  return production_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::production_element_t >*
order_of_battle_t::mutable_production() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.order_of_battle_t.production)
  return &production_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::production_element_t >&
order_of_battle_t::production() const {
  // @@protoc_insertion_point(field_list:pb_message.order_of_battle_t.production)
  return production_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int orders_of_battle_t::kOobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

orders_of_battle_t::orders_of_battle_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.orders_of_battle_t)
}

void orders_of_battle_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

orders_of_battle_t::orders_of_battle_t(const orders_of_battle_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.orders_of_battle_t)
}

void orders_of_battle_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  oobs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  oobs_.SetEntryDescriptor(
      &::pb_message::orders_of_battle_t_OobsEntry_descriptor_);
}

orders_of_battle_t::~orders_of_battle_t() {
  // @@protoc_insertion_point(destructor:pb_message.orders_of_battle_t)
  SharedDtor();
}

void orders_of_battle_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void orders_of_battle_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* orders_of_battle_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return orders_of_battle_t_descriptor_;
}

const orders_of_battle_t& orders_of_battle_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

orders_of_battle_t* orders_of_battle_t::default_instance_ = NULL;

orders_of_battle_t* orders_of_battle_t::New(::google::protobuf::Arena* arena) const {
  orders_of_battle_t* n = new orders_of_battle_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void orders_of_battle_t::Clear() {
  oobs_.Clear();
}

bool orders_of_battle_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.orders_of_battle_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .pb_message.order_of_battle_t> oobs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_oobs:
          ::google::protobuf::scoped_ptr<orders_of_battle_t_OobsEntry> entry(oobs_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_oobs())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.orders_of_battle_t.OobsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_oobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.orders_of_battle_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.orders_of_battle_t)
  return false;
#undef DO_
}

void orders_of_battle_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.orders_of_battle_t)
  // map<string, .pb_message.order_of_battle_t> oobs = 1;
  {
    ::google::protobuf::scoped_ptr<orders_of_battle_t_OobsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::order_of_battle_t >::const_iterator
        it = this->oobs().begin();
        it != this->oobs().end(); ++it) {
      entry.reset(oobs_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.orders_of_battle_t.OobsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:pb_message.orders_of_battle_t)
}

::google::protobuf::uint8* orders_of_battle_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.orders_of_battle_t)
  // map<string, .pb_message.order_of_battle_t> oobs = 1;
  {
    ::google::protobuf::scoped_ptr<orders_of_battle_t_OobsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::order_of_battle_t >::const_iterator
        it = this->oobs().begin();
        it != this->oobs().end(); ++it) {
      entry.reset(oobs_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.orders_of_battle_t.OobsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.orders_of_battle_t)
  return target;
}

int orders_of_battle_t::ByteSize() const {
  int total_size = 0;

  // map<string, .pb_message.order_of_battle_t> oobs = 1;
  total_size += 1 * this->oobs_size();
  {
    ::google::protobuf::scoped_ptr<orders_of_battle_t_OobsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::order_of_battle_t >::const_iterator
        it = this->oobs().begin();
        it != this->oobs().end(); ++it) {
      entry.reset(oobs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void orders_of_battle_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const orders_of_battle_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const orders_of_battle_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void orders_of_battle_t::MergeFrom(const orders_of_battle_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  oobs_.MergeFrom(from.oobs_);
}

void orders_of_battle_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void orders_of_battle_t::CopyFrom(const orders_of_battle_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool orders_of_battle_t::IsInitialized() const {

  return true;
}

void orders_of_battle_t::Swap(orders_of_battle_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void orders_of_battle_t::InternalSwap(orders_of_battle_t* other) {
  oobs_.Swap(&other->oobs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata orders_of_battle_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = orders_of_battle_t_descriptor_;
  metadata.reflection = orders_of_battle_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// orders_of_battle_t

// map<string, .pb_message.order_of_battle_t> oobs = 1;
int orders_of_battle_t::oobs_size() const {
  return oobs_.size();
}
void orders_of_battle_t::clear_oobs() {
  oobs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::order_of_battle_t >&
orders_of_battle_t::oobs() const {
  // @@protoc_insertion_point(field_map:pb_message.orders_of_battle_t.oobs)
  return oobs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::order_of_battle_t >*
orders_of_battle_t::mutable_oobs() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.orders_of_battle_t.oobs)
  return oobs_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unit_def_side_t::kAttFieldNumber;
const int unit_def_side_t::kDefFieldNumber;
const int unit_def_side_t::kScoutFieldNumber;
const int unit_def_side_t::kFightersFieldNumber;
const int unit_def_side_t::kHeavyFighterBonusFieldNumber;
const int unit_def_side_t::kPfsFieldNumber;
const int unit_def_side_t::kDronesFieldNumber;
const int unit_def_side_t::kMaulerFieldNumber;
const int unit_def_side_t::kTugMissionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unit_def_side_t::unit_def_side_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.unit_def_side_t)
}

void unit_def_side_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

unit_def_side_t::unit_def_side_t(const unit_def_side_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.unit_def_side_t)
}

void unit_def_side_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  att_ = 0;
  def_ = 0;
  scout_ = false;
  fighters_ = 0;
  heavy_fighter_bonus_ = 0;
  pfs_ = 0;
  drones_ = 0;
  mauler_ = false;
}

unit_def_side_t::~unit_def_side_t() {
  // @@protoc_insertion_point(destructor:pb_message.unit_def_side_t)
  SharedDtor();
}

void unit_def_side_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_def_side_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_def_side_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_def_side_t_descriptor_;
}

const unit_def_side_t& unit_def_side_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

unit_def_side_t* unit_def_side_t::default_instance_ = NULL;

unit_def_side_t* unit_def_side_t::New(::google::protobuf::Arena* arena) const {
  unit_def_side_t* n = new unit_def_side_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unit_def_side_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<unit_def_side_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(att_, pfs_);
  drones_ = 0;

#undef ZR_HELPER_
#undef ZR_

  tug_missions_.Clear();
}

bool unit_def_side_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.unit_def_side_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float att = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &att_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_def;
        break;
      }

      // optional float def = 2;
      case 2: {
        if (tag == 21) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &def_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_scout;
        break;
      }

      // optional bool scout = 3;
      case 3: {
        if (tag == 24) {
         parse_scout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scout_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_fighters;
        break;
      }

      // optional float fighters = 4;
      case 4: {
        if (tag == 37) {
         parse_fighters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fighters_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_heavy_fighter_bonus;
        break;
      }

      // optional float heavy_fighter_bonus = 5;
      case 5: {
        if (tag == 45) {
         parse_heavy_fighter_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heavy_fighter_bonus_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pfs;
        break;
      }

      // optional int32 pfs = 6;
      case 6: {
        if (tag == 48) {
         parse_pfs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pfs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_drones;
        break;
      }

      // optional int32 drones = 7;
      case 7: {
        if (tag == 56) {
         parse_drones:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drones_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mauler;
        break;
      }

      // optional bool mauler = 8;
      case 8: {
        if (tag == 64) {
         parse_mauler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mauler_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_tug_missions;
        break;
      }

      // repeated .pb_message.tug_mission_t tug_missions = 9;
      case 9: {
        if (tag == 74) {
         parse_tug_missions:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_tug_missions(static_cast< ::pb_message::tug_mission_t >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 72) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_tug_missions(static_cast< ::pb_message::tug_mission_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.unit_def_side_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.unit_def_side_t)
  return false;
#undef DO_
}

void unit_def_side_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.unit_def_side_t)
  // optional float att = 1;
  if (this->att() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->att(), output);
  }

  // optional float def = 2;
  if (this->def() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->def(), output);
  }

  // optional bool scout = 3;
  if (this->scout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->scout(), output);
  }

  // optional float fighters = 4;
  if (this->fighters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fighters(), output);
  }

  // optional float heavy_fighter_bonus = 5;
  if (this->heavy_fighter_bonus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->heavy_fighter_bonus(), output);
  }

  // optional int32 pfs = 6;
  if (this->pfs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pfs(), output);
  }

  // optional int32 drones = 7;
  if (this->drones() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->drones(), output);
  }

  // optional bool mauler = 8;
  if (this->mauler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->mauler(), output);
  }

  // repeated .pb_message.tug_mission_t tug_missions = 9;
  if (this->tug_missions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_tug_missions_cached_byte_size_);
  }
  for (int i = 0; i < this->tug_missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->tug_missions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.unit_def_side_t)
}

::google::protobuf::uint8* unit_def_side_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.unit_def_side_t)
  // optional float att = 1;
  if (this->att() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->att(), target);
  }

  // optional float def = 2;
  if (this->def() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->def(), target);
  }

  // optional bool scout = 3;
  if (this->scout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->scout(), target);
  }

  // optional float fighters = 4;
  if (this->fighters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fighters(), target);
  }

  // optional float heavy_fighter_bonus = 5;
  if (this->heavy_fighter_bonus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->heavy_fighter_bonus(), target);
  }

  // optional int32 pfs = 6;
  if (this->pfs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pfs(), target);
  }

  // optional int32 drones = 7;
  if (this->drones() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->drones(), target);
  }

  // optional bool mauler = 8;
  if (this->mauler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->mauler(), target);
  }

  // repeated .pb_message.tug_mission_t tug_missions = 9;
  if (this->tug_missions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _tug_missions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tug_missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->tug_missions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.unit_def_side_t)
  return target;
}

int unit_def_side_t::ByteSize() const {
  int total_size = 0;

  // optional float att = 1;
  if (this->att() != 0) {
    total_size += 1 + 4;
  }

  // optional float def = 2;
  if (this->def() != 0) {
    total_size += 1 + 4;
  }

  // optional bool scout = 3;
  if (this->scout() != 0) {
    total_size += 1 + 1;
  }

  // optional float fighters = 4;
  if (this->fighters() != 0) {
    total_size += 1 + 4;
  }

  // optional float heavy_fighter_bonus = 5;
  if (this->heavy_fighter_bonus() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 pfs = 6;
  if (this->pfs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pfs());
  }

  // optional int32 drones = 7;
  if (this->drones() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->drones());
  }

  // optional bool mauler = 8;
  if (this->mauler() != 0) {
    total_size += 1 + 1;
  }

  // repeated .pb_message.tug_mission_t tug_missions = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->tug_missions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->tug_missions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tug_missions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_def_side_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const unit_def_side_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const unit_def_side_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_def_side_t::MergeFrom(const unit_def_side_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tug_missions_.MergeFrom(from.tug_missions_);
  if (from.att() != 0) {
    set_att(from.att());
  }
  if (from.def() != 0) {
    set_def(from.def());
  }
  if (from.scout() != 0) {
    set_scout(from.scout());
  }
  if (from.fighters() != 0) {
    set_fighters(from.fighters());
  }
  if (from.heavy_fighter_bonus() != 0) {
    set_heavy_fighter_bonus(from.heavy_fighter_bonus());
  }
  if (from.pfs() != 0) {
    set_pfs(from.pfs());
  }
  if (from.drones() != 0) {
    set_drones(from.drones());
  }
  if (from.mauler() != 0) {
    set_mauler(from.mauler());
  }
}

void unit_def_side_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_def_side_t::CopyFrom(const unit_def_side_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_def_side_t::IsInitialized() const {

  return true;
}

void unit_def_side_t::Swap(unit_def_side_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unit_def_side_t::InternalSwap(unit_def_side_t* other) {
  std::swap(att_, other->att_);
  std::swap(def_, other->def_);
  std::swap(scout_, other->scout_);
  std::swap(fighters_, other->fighters_);
  std::swap(heavy_fighter_bonus_, other->heavy_fighter_bonus_);
  std::swap(pfs_, other->pfs_);
  std::swap(drones_, other->drones_);
  std::swap(mauler_, other->mauler_);
  tug_missions_.UnsafeArenaSwap(&other->tug_missions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unit_def_side_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_def_side_t_descriptor_;
  metadata.reflection = unit_def_side_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unit_def_side_t

// optional float att = 1;
void unit_def_side_t::clear_att() {
  att_ = 0;
}
 float unit_def_side_t::att() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.att)
  return att_;
}
 void unit_def_side_t::set_att(float value) {
  
  att_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.att)
}

// optional float def = 2;
void unit_def_side_t::clear_def() {
  def_ = 0;
}
 float unit_def_side_t::def() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.def)
  return def_;
}
 void unit_def_side_t::set_def(float value) {
  
  def_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.def)
}

// optional bool scout = 3;
void unit_def_side_t::clear_scout() {
  scout_ = false;
}
 bool unit_def_side_t::scout() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.scout)
  return scout_;
}
 void unit_def_side_t::set_scout(bool value) {
  
  scout_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.scout)
}

// optional float fighters = 4;
void unit_def_side_t::clear_fighters() {
  fighters_ = 0;
}
 float unit_def_side_t::fighters() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.fighters)
  return fighters_;
}
 void unit_def_side_t::set_fighters(float value) {
  
  fighters_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.fighters)
}

// optional float heavy_fighter_bonus = 5;
void unit_def_side_t::clear_heavy_fighter_bonus() {
  heavy_fighter_bonus_ = 0;
}
 float unit_def_side_t::heavy_fighter_bonus() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.heavy_fighter_bonus)
  return heavy_fighter_bonus_;
}
 void unit_def_side_t::set_heavy_fighter_bonus(float value) {
  
  heavy_fighter_bonus_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.heavy_fighter_bonus)
}

// optional int32 pfs = 6;
void unit_def_side_t::clear_pfs() {
  pfs_ = 0;
}
 ::google::protobuf::int32 unit_def_side_t::pfs() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.pfs)
  return pfs_;
}
 void unit_def_side_t::set_pfs(::google::protobuf::int32 value) {
  
  pfs_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.pfs)
}

// optional int32 drones = 7;
void unit_def_side_t::clear_drones() {
  drones_ = 0;
}
 ::google::protobuf::int32 unit_def_side_t::drones() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.drones)
  return drones_;
}
 void unit_def_side_t::set_drones(::google::protobuf::int32 value) {
  
  drones_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.drones)
}

// optional bool mauler = 8;
void unit_def_side_t::clear_mauler() {
  mauler_ = false;
}
 bool unit_def_side_t::mauler() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.mauler)
  return mauler_;
}
 void unit_def_side_t::set_mauler(bool value) {
  
  mauler_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.mauler)
}

// repeated .pb_message.tug_mission_t tug_missions = 9;
int unit_def_side_t::tug_missions_size() const {
  return tug_missions_.size();
}
void unit_def_side_t::clear_tug_missions() {
  tug_missions_.Clear();
}
 ::pb_message::tug_mission_t unit_def_side_t::tug_missions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.tug_missions)
  return static_cast< ::pb_message::tug_mission_t >(tug_missions_.Get(index));
}
 void unit_def_side_t::set_tug_missions(int index, ::pb_message::tug_mission_t value) {
  tug_missions_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.tug_missions)
}
 void unit_def_side_t::add_tug_missions(::pb_message::tug_mission_t value) {
  tug_missions_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.unit_def_side_t.tug_missions)
}
 const ::google::protobuf::RepeatedField<int>&
unit_def_side_t::tug_missions() const {
  // @@protoc_insertion_point(field_list:pb_message.unit_def_side_t.tug_missions)
  return tug_missions_;
}
 ::google::protobuf::RepeatedField<int>*
unit_def_side_t::mutable_tug_missions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.unit_def_side_t.tug_missions)
  return &tug_missions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int towable_t::kMoveCostFieldNumber;
const int towable_t::kStratMoveLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

towable_t::towable_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.towable_t)
}

void towable_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

towable_t::towable_t(const towable_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.towable_t)
}

void towable_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  move_cost_ = 0;
  strat_move_limit_ = 0;
}

towable_t::~towable_t() {
  // @@protoc_insertion_point(destructor:pb_message.towable_t)
  SharedDtor();
}

void towable_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void towable_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* towable_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return towable_t_descriptor_;
}

const towable_t& towable_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

towable_t* towable_t::default_instance_ = NULL;

towable_t* towable_t::New(::google::protobuf::Arena* arena) const {
  towable_t* n = new towable_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void towable_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<towable_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(move_cost_, strat_move_limit_);

#undef ZR_HELPER_
#undef ZR_

}

bool towable_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.towable_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 move_cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_strat_move_limit;
        break;
      }

      // optional int32 strat_move_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_strat_move_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strat_move_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.towable_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.towable_t)
  return false;
#undef DO_
}

void towable_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.towable_t)
  // optional int32 move_cost = 1;
  if (this->move_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->move_cost(), output);
  }

  // optional int32 strat_move_limit = 2;
  if (this->strat_move_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strat_move_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.towable_t)
}

::google::protobuf::uint8* towable_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.towable_t)
  // optional int32 move_cost = 1;
  if (this->move_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->move_cost(), target);
  }

  // optional int32 strat_move_limit = 2;
  if (this->strat_move_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strat_move_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.towable_t)
  return target;
}

int towable_t::ByteSize() const {
  int total_size = 0;

  // optional int32 move_cost = 1;
  if (this->move_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_cost());
  }

  // optional int32 strat_move_limit = 2;
  if (this->strat_move_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->strat_move_limit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void towable_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const towable_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const towable_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void towable_t::MergeFrom(const towable_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.move_cost() != 0) {
    set_move_cost(from.move_cost());
  }
  if (from.strat_move_limit() != 0) {
    set_strat_move_limit(from.strat_move_limit());
  }
}

void towable_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void towable_t::CopyFrom(const towable_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool towable_t::IsInitialized() const {

  return true;
}

void towable_t::Swap(towable_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void towable_t::InternalSwap(towable_t* other) {
  std::swap(move_cost_, other->move_cost_);
  std::swap(strat_move_limit_, other->strat_move_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata towable_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = towable_t_descriptor_;
  metadata.reflection = towable_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// towable_t

// optional int32 move_cost = 1;
void towable_t::clear_move_cost() {
  move_cost_ = 0;
}
 ::google::protobuf::int32 towable_t::move_cost() const {
  // @@protoc_insertion_point(field_get:pb_message.towable_t.move_cost)
  return move_cost_;
}
 void towable_t::set_move_cost(::google::protobuf::int32 value) {
  
  move_cost_ = value;
  // @@protoc_insertion_point(field_set:pb_message.towable_t.move_cost)
}

// optional int32 strat_move_limit = 2;
void towable_t::clear_strat_move_limit() {
  strat_move_limit_ = 0;
}
 ::google::protobuf::int32 towable_t::strat_move_limit() const {
  // @@protoc_insertion_point(field_get:pb_message.towable_t.strat_move_limit)
  return strat_move_limit_;
}
 void towable_t::set_strat_move_limit(::google::protobuf::int32 value) {
  
  strat_move_limit_ = value;
  // @@protoc_insertion_point(field_set:pb_message.towable_t.strat_move_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int production_cost_t::kCostFieldNumber;
const int production_cost_t::kFighterCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

production_cost_t::production_cost_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.production_cost_t)
}

void production_cost_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

production_cost_t::production_cost_t(const production_cost_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.production_cost_t)
}

void production_cost_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cost_ = 0;
  fighter_cost_ = 0;
}

production_cost_t::~production_cost_t() {
  // @@protoc_insertion_point(destructor:pb_message.production_cost_t)
  SharedDtor();
}

void production_cost_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void production_cost_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* production_cost_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return production_cost_t_descriptor_;
}

const production_cost_t& production_cost_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

production_cost_t* production_cost_t::default_instance_ = NULL;

production_cost_t* production_cost_t::New(::google::protobuf::Arena* arena) const {
  production_cost_t* n = new production_cost_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void production_cost_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<production_cost_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cost_, fighter_cost_);

#undef ZR_HELPER_
#undef ZR_

}

bool production_cost_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.production_cost_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fighter_cost;
        break;
      }

      // optional int32 fighter_cost = 2;
      case 2: {
        if (tag == 16) {
         parse_fighter_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighter_cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.production_cost_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.production_cost_t)
  return false;
#undef DO_
}

void production_cost_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.production_cost_t)
  // optional int32 cost = 1;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cost(), output);
  }

  // optional int32 fighter_cost = 2;
  if (this->fighter_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fighter_cost(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.production_cost_t)
}

::google::protobuf::uint8* production_cost_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.production_cost_t)
  // optional int32 cost = 1;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cost(), target);
  }

  // optional int32 fighter_cost = 2;
  if (this->fighter_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fighter_cost(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.production_cost_t)
  return target;
}

int production_cost_t::ByteSize() const {
  int total_size = 0;

  // optional int32 cost = 1;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost());
  }

  // optional int32 fighter_cost = 2;
  if (this->fighter_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fighter_cost());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void production_cost_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const production_cost_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const production_cost_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void production_cost_t::MergeFrom(const production_cost_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.fighter_cost() != 0) {
    set_fighter_cost(from.fighter_cost());
  }
}

void production_cost_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void production_cost_t::CopyFrom(const production_cost_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool production_cost_t::IsInitialized() const {

  return true;
}

void production_cost_t::Swap(production_cost_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void production_cost_t::InternalSwap(production_cost_t* other) {
  std::swap(cost_, other->cost_);
  std::swap(fighter_cost_, other->fighter_cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata production_cost_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = production_cost_t_descriptor_;
  metadata.reflection = production_cost_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// production_cost_t

// optional int32 cost = 1;
void production_cost_t::clear_cost() {
  cost_ = 0;
}
 ::google::protobuf::int32 production_cost_t::cost() const {
  // @@protoc_insertion_point(field_get:pb_message.production_cost_t.cost)
  return cost_;
}
 void production_cost_t::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:pb_message.production_cost_t.cost)
}

// optional int32 fighter_cost = 2;
void production_cost_t::clear_fighter_cost() {
  fighter_cost_ = 0;
}
 ::google::protobuf::int32 production_cost_t::fighter_cost() const {
  // @@protoc_insertion_point(field_get:pb_message.production_cost_t.fighter_cost)
  return fighter_cost_;
}
 void production_cost_t::set_fighter_cost(::google::protobuf::int32 value) {
  
  fighter_cost_ = value;
  // @@protoc_insertion_point(field_set:pb_message.production_cost_t.fighter_cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unit_def_t::kNameFieldNumber;
const int unit_def_t::kCmdFieldNumber;
const int unit_def_t::kUncrippledFieldNumber;
const int unit_def_t::kCrippledFieldNumber;
const int unit_def_t::kEscortTypeFieldNumber;
const int unit_def_t::kAvailableFieldNumber;
const int unit_def_t::kPodFieldNumber;
const int unit_def_t::kMaxInServiceFieldNumber;
const int unit_def_t::kConstructionFieldNumber;
const int unit_def_t::kSubstitutionsFieldNumber;
const int unit_def_t::kConversionsFieldNumber;
const int unit_def_t::kMoveFieldNumber;
const int unit_def_t::kCarrierTypeFieldNumber;
const int unit_def_t::kNotSpaceworthyFieldNumber;
const int unit_def_t::kTowableFieldNumber;
const int unit_def_t::kSalvageFieldNumber;
const int unit_def_t::kNotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unit_def_t::unit_def_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.unit_def_t)
}

void unit_def_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  uncrippled_ = const_cast< ::pb_message::unit_def_side_t*>(&::pb_message::unit_def_side_t::default_instance());
  crippled_ = const_cast< ::pb_message::unit_def_side_t*>(&::pb_message::unit_def_side_t::default_instance());
  available_ = const_cast< ::pb_message::turn_t*>(&::pb_message::turn_t::default_instance());
  construction_ = const_cast< ::pb_message::production_cost_t*>(&::pb_message::production_cost_t::default_instance());
  towable_ = const_cast< ::pb_message::towable_t*>(&::pb_message::towable_t::default_instance());
}

unit_def_t::unit_def_t(const unit_def_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.unit_def_t)
}

void unit_def_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0;
  uncrippled_ = NULL;
  crippled_ = NULL;
  escort_type_ = 0;
  available_ = NULL;
  pod_ = false;
  max_in_service_ = 0;
  construction_ = NULL;
  substitutions_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  substitutions_.SetEntryDescriptor(
      &::pb_message::unit_def_t_SubstitutionsEntry_descriptor_);
  conversions_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  conversions_.SetEntryDescriptor(
      &::pb_message::unit_def_t_ConversionsEntry_descriptor_);
  move_ = 0;
  carrier_type_ = 0;
  not_spaceworthy_ = false;
  towable_ = NULL;
  salvage_ = 0;
  notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

unit_def_t::~unit_def_t() {
  // @@protoc_insertion_point(destructor:pb_message.unit_def_t)
  SharedDtor();
}

void unit_def_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete uncrippled_;
    delete crippled_;
    delete available_;
    delete construction_;
    delete towable_;
  }
}

void unit_def_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_def_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_def_t_descriptor_;
}

const unit_def_t& unit_def_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

unit_def_t* unit_def_t::default_instance_ = NULL;

unit_def_t* unit_def_t::New(::google::protobuf::Arena* arena) const {
  unit_def_t* n = new unit_def_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unit_def_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<unit_def_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cmd_, escort_type_);
  ZR_(max_in_service_, pod_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && uncrippled_ != NULL) delete uncrippled_;
  uncrippled_ = NULL;
  if (GetArenaNoVirtual() == NULL && crippled_ != NULL) delete crippled_;
  crippled_ = NULL;
  if (GetArenaNoVirtual() == NULL && available_ != NULL) delete available_;
  available_ = NULL;
  ZR_(move_, carrier_type_);
  if (GetArenaNoVirtual() == NULL && construction_ != NULL) delete construction_;
  construction_ = NULL;
  not_spaceworthy_ = false;
  if (GetArenaNoVirtual() == NULL && towable_ != NULL) delete towable_;
  towable_ = NULL;
  salvage_ = 0;
  notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  substitutions_.Clear();
  conversions_.Clear();
}

bool unit_def_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.unit_def_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.unit_def_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // optional int32 cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uncrippled;
        break;
      }

      // optional .pb_message.unit_def_side_t uncrippled = 3;
      case 3: {
        if (tag == 26) {
         parse_uncrippled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncrippled()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_crippled;
        break;
      }

      // optional .pb_message.unit_def_side_t crippled = 4;
      case 4: {
        if (tag == 34) {
         parse_crippled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crippled()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_escort_type;
        break;
      }

      // optional .pb_message.escort_type_t escort_type = 5;
      case 5: {
        if (tag == 40) {
         parse_escort_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_escort_type(static_cast< ::pb_message::escort_type_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_available;
        break;
      }

      // optional .pb_message.turn_t available = 6;
      case 6: {
        if (tag == 50) {
         parse_available:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_available()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pod;
        break;
      }

      // optional bool pod = 7;
      case 7: {
        if (tag == 56) {
         parse_pod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pod_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_in_service;
        break;
      }

      // optional int32 max_in_service = 8;
      case 8: {
        if (tag == 64) {
         parse_max_in_service:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_in_service_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_construction;
        break;
      }

      // optional .pb_message.production_cost_t construction = 9;
      case 9: {
        if (tag == 74) {
         parse_construction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_construction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_substitutions;
        break;
      }

      // map<string, .pb_message.production_cost_t> substitutions = 10;
      case 10: {
        if (tag == 82) {
         parse_substitutions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_substitutions:
          ::google::protobuf::scoped_ptr<unit_def_t_SubstitutionsEntry> entry(substitutions_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_substitutions())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.unit_def_t.SubstitutionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_substitutions;
        if (input->ExpectTag(90)) goto parse_loop_conversions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .pb_message.production_cost_t> conversions = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_conversions:
          ::google::protobuf::scoped_ptr<unit_def_t_ConversionsEntry> entry(conversions_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_conversions())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.unit_def_t.ConversionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_conversions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_move;
        break;
      }

      // optional int32 move = 12;
      case 12: {
        if (tag == 96) {
         parse_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_carrier_type;
        break;
      }

      // optional .pb_message.carrier_type_t carrier_type = 13;
      case 13: {
        if (tag == 104) {
         parse_carrier_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_carrier_type(static_cast< ::pb_message::carrier_type_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_not_spaceworthy;
        break;
      }

      // optional bool not_spaceworthy = 14;
      case 14: {
        if (tag == 112) {
         parse_not_spaceworthy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_spaceworthy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_towable;
        break;
      }

      // optional .pb_message.towable_t towable = 15;
      case 15: {
        if (tag == 122) {
         parse_towable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_towable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_salvage;
        break;
      }

      // optional int32 salvage = 16;
      case 16: {
        if (tag == 128) {
         parse_salvage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salvage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_notes;
        break;
      }

      // optional string notes = 17;
      case 17: {
        if (tag == 138) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.unit_def_t.notes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.unit_def_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.unit_def_t)
  return false;
#undef DO_
}

void unit_def_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.unit_def_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.unit_def_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 cmd = 2;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // optional .pb_message.unit_def_side_t uncrippled = 3;
  if (this->has_uncrippled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->uncrippled_, output);
  }

  // optional .pb_message.unit_def_side_t crippled = 4;
  if (this->has_crippled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->crippled_, output);
  }

  // optional .pb_message.escort_type_t escort_type = 5;
  if (this->escort_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->escort_type(), output);
  }

  // optional .pb_message.turn_t available = 6;
  if (this->has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->available_, output);
  }

  // optional bool pod = 7;
  if (this->pod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->pod(), output);
  }

  // optional int32 max_in_service = 8;
  if (this->max_in_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_in_service(), output);
  }

  // optional .pb_message.production_cost_t construction = 9;
  if (this->has_construction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->construction_, output);
  }

  // map<string, .pb_message.production_cost_t> substitutions = 10;
  {
    ::google::protobuf::scoped_ptr<unit_def_t_SubstitutionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >::const_iterator
        it = this->substitutions().begin();
        it != this->substitutions().end(); ++it) {
      entry.reset(substitutions_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          10, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.unit_def_t.SubstitutionsEntry.key");
    }
  }

  // map<string, .pb_message.production_cost_t> conversions = 11;
  {
    ::google::protobuf::scoped_ptr<unit_def_t_ConversionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >::const_iterator
        it = this->conversions().begin();
        it != this->conversions().end(); ++it) {
      entry.reset(conversions_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          11, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.unit_def_t.ConversionsEntry.key");
    }
  }

  // optional int32 move = 12;
  if (this->move() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->move(), output);
  }

  // optional .pb_message.carrier_type_t carrier_type = 13;
  if (this->carrier_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->carrier_type(), output);
  }

  // optional bool not_spaceworthy = 14;
  if (this->not_spaceworthy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->not_spaceworthy(), output);
  }

  // optional .pb_message.towable_t towable = 15;
  if (this->has_towable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->towable_, output);
  }

  // optional int32 salvage = 16;
  if (this->salvage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->salvage(), output);
  }

  // optional string notes = 17;
  if (this->notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.unit_def_t.notes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->notes(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.unit_def_t)
}

::google::protobuf::uint8* unit_def_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.unit_def_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.unit_def_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 cmd = 2;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // optional .pb_message.unit_def_side_t uncrippled = 3;
  if (this->has_uncrippled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->uncrippled_, target);
  }

  // optional .pb_message.unit_def_side_t crippled = 4;
  if (this->has_crippled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->crippled_, target);
  }

  // optional .pb_message.escort_type_t escort_type = 5;
  if (this->escort_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->escort_type(), target);
  }

  // optional .pb_message.turn_t available = 6;
  if (this->has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->available_, target);
  }

  // optional bool pod = 7;
  if (this->pod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->pod(), target);
  }

  // optional int32 max_in_service = 8;
  if (this->max_in_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_in_service(), target);
  }

  // optional .pb_message.production_cost_t construction = 9;
  if (this->has_construction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->construction_, target);
  }

  // map<string, .pb_message.production_cost_t> substitutions = 10;
  {
    ::google::protobuf::scoped_ptr<unit_def_t_SubstitutionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >::const_iterator
        it = this->substitutions().begin();
        it != this->substitutions().end(); ++it) {
      entry.reset(substitutions_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              10, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.unit_def_t.SubstitutionsEntry.key");
    }
  }

  // map<string, .pb_message.production_cost_t> conversions = 11;
  {
    ::google::protobuf::scoped_ptr<unit_def_t_ConversionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >::const_iterator
        it = this->conversions().begin();
        it != this->conversions().end(); ++it) {
      entry.reset(conversions_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              11, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.unit_def_t.ConversionsEntry.key");
    }
  }

  // optional int32 move = 12;
  if (this->move() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->move(), target);
  }

  // optional .pb_message.carrier_type_t carrier_type = 13;
  if (this->carrier_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->carrier_type(), target);
  }

  // optional bool not_spaceworthy = 14;
  if (this->not_spaceworthy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->not_spaceworthy(), target);
  }

  // optional .pb_message.towable_t towable = 15;
  if (this->has_towable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->towable_, target);
  }

  // optional int32 salvage = 16;
  if (this->salvage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->salvage(), target);
  }

  // optional string notes = 17;
  if (this->notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.unit_def_t.notes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->notes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.unit_def_t)
  return target;
}

int unit_def_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 cmd = 2;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  // optional .pb_message.unit_def_side_t uncrippled = 3;
  if (this->has_uncrippled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uncrippled_);
  }

  // optional .pb_message.unit_def_side_t crippled = 4;
  if (this->has_crippled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->crippled_);
  }

  // optional .pb_message.escort_type_t escort_type = 5;
  if (this->escort_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->escort_type());
  }

  // optional .pb_message.turn_t available = 6;
  if (this->has_available()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->available_);
  }

  // optional bool pod = 7;
  if (this->pod() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 max_in_service = 8;
  if (this->max_in_service() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_in_service());
  }

  // optional .pb_message.production_cost_t construction = 9;
  if (this->has_construction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->construction_);
  }

  // optional int32 move = 12;
  if (this->move() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move());
  }

  // optional .pb_message.carrier_type_t carrier_type = 13;
  if (this->carrier_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->carrier_type());
  }

  // optional bool not_spaceworthy = 14;
  if (this->not_spaceworthy() != 0) {
    total_size += 1 + 1;
  }

  // optional .pb_message.towable_t towable = 15;
  if (this->has_towable()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->towable_);
  }

  // optional int32 salvage = 16;
  if (this->salvage() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->salvage());
  }

  // optional string notes = 17;
  if (this->notes().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notes());
  }

  // map<string, .pb_message.production_cost_t> substitutions = 10;
  total_size += 1 * this->substitutions_size();
  {
    ::google::protobuf::scoped_ptr<unit_def_t_SubstitutionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >::const_iterator
        it = this->substitutions().begin();
        it != this->substitutions().end(); ++it) {
      entry.reset(substitutions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .pb_message.production_cost_t> conversions = 11;
  total_size += 1 * this->conversions_size();
  {
    ::google::protobuf::scoped_ptr<unit_def_t_ConversionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >::const_iterator
        it = this->conversions().begin();
        it != this->conversions().end(); ++it) {
      entry.reset(conversions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_def_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const unit_def_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const unit_def_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_def_t::MergeFrom(const unit_def_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  substitutions_.MergeFrom(from.substitutions_);
  conversions_.MergeFrom(from.conversions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.has_uncrippled()) {
    mutable_uncrippled()->::pb_message::unit_def_side_t::MergeFrom(from.uncrippled());
  }
  if (from.has_crippled()) {
    mutable_crippled()->::pb_message::unit_def_side_t::MergeFrom(from.crippled());
  }
  if (from.escort_type() != 0) {
    set_escort_type(from.escort_type());
  }
  if (from.has_available()) {
    mutable_available()->::pb_message::turn_t::MergeFrom(from.available());
  }
  if (from.pod() != 0) {
    set_pod(from.pod());
  }
  if (from.max_in_service() != 0) {
    set_max_in_service(from.max_in_service());
  }
  if (from.has_construction()) {
    mutable_construction()->::pb_message::production_cost_t::MergeFrom(from.construction());
  }
  if (from.move() != 0) {
    set_move(from.move());
  }
  if (from.carrier_type() != 0) {
    set_carrier_type(from.carrier_type());
  }
  if (from.not_spaceworthy() != 0) {
    set_not_spaceworthy(from.not_spaceworthy());
  }
  if (from.has_towable()) {
    mutable_towable()->::pb_message::towable_t::MergeFrom(from.towable());
  }
  if (from.salvage() != 0) {
    set_salvage(from.salvage());
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
}

void unit_def_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_def_t::CopyFrom(const unit_def_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_def_t::IsInitialized() const {

  return true;
}

void unit_def_t::Swap(unit_def_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unit_def_t::InternalSwap(unit_def_t* other) {
  name_.Swap(&other->name_);
  std::swap(cmd_, other->cmd_);
  std::swap(uncrippled_, other->uncrippled_);
  std::swap(crippled_, other->crippled_);
  std::swap(escort_type_, other->escort_type_);
  std::swap(available_, other->available_);
  std::swap(pod_, other->pod_);
  std::swap(max_in_service_, other->max_in_service_);
  std::swap(construction_, other->construction_);
  substitutions_.Swap(&other->substitutions_);
  conversions_.Swap(&other->conversions_);
  std::swap(move_, other->move_);
  std::swap(carrier_type_, other->carrier_type_);
  std::swap(not_spaceworthy_, other->not_spaceworthy_);
  std::swap(towable_, other->towable_);
  std::swap(salvage_, other->salvage_);
  notes_.Swap(&other->notes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unit_def_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_def_t_descriptor_;
  metadata.reflection = unit_def_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unit_def_t

// optional string name = 1;
void unit_def_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& unit_def_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void unit_def_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.name)
}
 void unit_def_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.unit_def_t.name)
}
 void unit_def_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.unit_def_t.name)
}
 ::std::string* unit_def_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* unit_def_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void unit_def_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.name)
}

// optional int32 cmd = 2;
void unit_def_t::clear_cmd() {
  cmd_ = 0;
}
 ::google::protobuf::int32 unit_def_t::cmd() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.cmd)
  return cmd_;
}
 void unit_def_t::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.cmd)
}

// optional .pb_message.unit_def_side_t uncrippled = 3;
bool unit_def_t::has_uncrippled() const {
  return !_is_default_instance_ && uncrippled_ != NULL;
}
void unit_def_t::clear_uncrippled() {
  if (GetArenaNoVirtual() == NULL && uncrippled_ != NULL) delete uncrippled_;
  uncrippled_ = NULL;
}
const ::pb_message::unit_def_side_t& unit_def_t::uncrippled() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.uncrippled)
  return uncrippled_ != NULL ? *uncrippled_ : *default_instance_->uncrippled_;
}
::pb_message::unit_def_side_t* unit_def_t::mutable_uncrippled() {
  
  if (uncrippled_ == NULL) {
    uncrippled_ = new ::pb_message::unit_def_side_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.uncrippled)
  return uncrippled_;
}
::pb_message::unit_def_side_t* unit_def_t::release_uncrippled() {
  
  ::pb_message::unit_def_side_t* temp = uncrippled_;
  uncrippled_ = NULL;
  return temp;
}
void unit_def_t::set_allocated_uncrippled(::pb_message::unit_def_side_t* uncrippled) {
  delete uncrippled_;
  uncrippled_ = uncrippled;
  if (uncrippled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.uncrippled)
}

// optional .pb_message.unit_def_side_t crippled = 4;
bool unit_def_t::has_crippled() const {
  return !_is_default_instance_ && crippled_ != NULL;
}
void unit_def_t::clear_crippled() {
  if (GetArenaNoVirtual() == NULL && crippled_ != NULL) delete crippled_;
  crippled_ = NULL;
}
const ::pb_message::unit_def_side_t& unit_def_t::crippled() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.crippled)
  return crippled_ != NULL ? *crippled_ : *default_instance_->crippled_;
}
::pb_message::unit_def_side_t* unit_def_t::mutable_crippled() {
  
  if (crippled_ == NULL) {
    crippled_ = new ::pb_message::unit_def_side_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.crippled)
  return crippled_;
}
::pb_message::unit_def_side_t* unit_def_t::release_crippled() {
  
  ::pb_message::unit_def_side_t* temp = crippled_;
  crippled_ = NULL;
  return temp;
}
void unit_def_t::set_allocated_crippled(::pb_message::unit_def_side_t* crippled) {
  delete crippled_;
  crippled_ = crippled;
  if (crippled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.crippled)
}

// optional .pb_message.escort_type_t escort_type = 5;
void unit_def_t::clear_escort_type() {
  escort_type_ = 0;
}
 ::pb_message::escort_type_t unit_def_t::escort_type() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.escort_type)
  return static_cast< ::pb_message::escort_type_t >(escort_type_);
}
 void unit_def_t::set_escort_type(::pb_message::escort_type_t value) {
  
  escort_type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.escort_type)
}

// optional .pb_message.turn_t available = 6;
bool unit_def_t::has_available() const {
  return !_is_default_instance_ && available_ != NULL;
}
void unit_def_t::clear_available() {
  if (GetArenaNoVirtual() == NULL && available_ != NULL) delete available_;
  available_ = NULL;
}
const ::pb_message::turn_t& unit_def_t::available() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.available)
  return available_ != NULL ? *available_ : *default_instance_->available_;
}
::pb_message::turn_t* unit_def_t::mutable_available() {
  
  if (available_ == NULL) {
    available_ = new ::pb_message::turn_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.available)
  return available_;
}
::pb_message::turn_t* unit_def_t::release_available() {
  
  ::pb_message::turn_t* temp = available_;
  available_ = NULL;
  return temp;
}
void unit_def_t::set_allocated_available(::pb_message::turn_t* available) {
  delete available_;
  available_ = available;
  if (available) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.available)
}

// optional bool pod = 7;
void unit_def_t::clear_pod() {
  pod_ = false;
}
 bool unit_def_t::pod() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.pod)
  return pod_;
}
 void unit_def_t::set_pod(bool value) {
  
  pod_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.pod)
}

// optional int32 max_in_service = 8;
void unit_def_t::clear_max_in_service() {
  max_in_service_ = 0;
}
 ::google::protobuf::int32 unit_def_t::max_in_service() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.max_in_service)
  return max_in_service_;
}
 void unit_def_t::set_max_in_service(::google::protobuf::int32 value) {
  
  max_in_service_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.max_in_service)
}

// optional .pb_message.production_cost_t construction = 9;
bool unit_def_t::has_construction() const {
  return !_is_default_instance_ && construction_ != NULL;
}
void unit_def_t::clear_construction() {
  if (GetArenaNoVirtual() == NULL && construction_ != NULL) delete construction_;
  construction_ = NULL;
}
const ::pb_message::production_cost_t& unit_def_t::construction() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.construction)
  return construction_ != NULL ? *construction_ : *default_instance_->construction_;
}
::pb_message::production_cost_t* unit_def_t::mutable_construction() {
  
  if (construction_ == NULL) {
    construction_ = new ::pb_message::production_cost_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.construction)
  return construction_;
}
::pb_message::production_cost_t* unit_def_t::release_construction() {
  
  ::pb_message::production_cost_t* temp = construction_;
  construction_ = NULL;
  return temp;
}
void unit_def_t::set_allocated_construction(::pb_message::production_cost_t* construction) {
  delete construction_;
  construction_ = construction;
  if (construction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.construction)
}

// map<string, .pb_message.production_cost_t> substitutions = 10;
int unit_def_t::substitutions_size() const {
  return substitutions_.size();
}
void unit_def_t::clear_substitutions() {
  substitutions_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >&
unit_def_t::substitutions() const {
  // @@protoc_insertion_point(field_map:pb_message.unit_def_t.substitutions)
  return substitutions_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >*
unit_def_t::mutable_substitutions() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.unit_def_t.substitutions)
  return substitutions_.MutableMap();
}

// map<string, .pb_message.production_cost_t> conversions = 11;
int unit_def_t::conversions_size() const {
  return conversions_.size();
}
void unit_def_t::clear_conversions() {
  conversions_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >&
unit_def_t::conversions() const {
  // @@protoc_insertion_point(field_map:pb_message.unit_def_t.conversions)
  return conversions_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::production_cost_t >*
unit_def_t::mutable_conversions() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.unit_def_t.conversions)
  return conversions_.MutableMap();
}

// optional int32 move = 12;
void unit_def_t::clear_move() {
  move_ = 0;
}
 ::google::protobuf::int32 unit_def_t::move() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.move)
  return move_;
}
 void unit_def_t::set_move(::google::protobuf::int32 value) {
  
  move_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.move)
}

// optional .pb_message.carrier_type_t carrier_type = 13;
void unit_def_t::clear_carrier_type() {
  carrier_type_ = 0;
}
 ::pb_message::carrier_type_t unit_def_t::carrier_type() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.carrier_type)
  return static_cast< ::pb_message::carrier_type_t >(carrier_type_);
}
 void unit_def_t::set_carrier_type(::pb_message::carrier_type_t value) {
  
  carrier_type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.carrier_type)
}

// optional bool not_spaceworthy = 14;
void unit_def_t::clear_not_spaceworthy() {
  not_spaceworthy_ = false;
}
 bool unit_def_t::not_spaceworthy() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.not_spaceworthy)
  return not_spaceworthy_;
}
 void unit_def_t::set_not_spaceworthy(bool value) {
  
  not_spaceworthy_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.not_spaceworthy)
}

// optional .pb_message.towable_t towable = 15;
bool unit_def_t::has_towable() const {
  return !_is_default_instance_ && towable_ != NULL;
}
void unit_def_t::clear_towable() {
  if (GetArenaNoVirtual() == NULL && towable_ != NULL) delete towable_;
  towable_ = NULL;
}
const ::pb_message::towable_t& unit_def_t::towable() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.towable)
  return towable_ != NULL ? *towable_ : *default_instance_->towable_;
}
::pb_message::towable_t* unit_def_t::mutable_towable() {
  
  if (towable_ == NULL) {
    towable_ = new ::pb_message::towable_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.towable)
  return towable_;
}
::pb_message::towable_t* unit_def_t::release_towable() {
  
  ::pb_message::towable_t* temp = towable_;
  towable_ = NULL;
  return temp;
}
void unit_def_t::set_allocated_towable(::pb_message::towable_t* towable) {
  delete towable_;
  towable_ = towable;
  if (towable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.towable)
}

// optional int32 salvage = 16;
void unit_def_t::clear_salvage() {
  salvage_ = 0;
}
 ::google::protobuf::int32 unit_def_t::salvage() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.salvage)
  return salvage_;
}
 void unit_def_t::set_salvage(::google::protobuf::int32 value) {
  
  salvage_ = value;
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.salvage)
}

// optional string notes = 17;
void unit_def_t::clear_notes() {
  notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& unit_def_t::notes() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.notes)
  return notes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void unit_def_t::set_notes(const ::std::string& value) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.notes)
}
 void unit_def_t::set_notes(const char* value) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.unit_def_t.notes)
}
 void unit_def_t::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.unit_def_t.notes)
}
 ::std::string* unit_def_t::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.notes)
  return notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* unit_def_t::release_notes() {
  
  return notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void unit_def_t::set_allocated_notes(::std::string* notes) {
  if (notes != NULL) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.notes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nation_unit_defs_t::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nation_unit_defs_t::nation_unit_defs_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.nation_unit_defs_t)
}

void nation_unit_defs_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

nation_unit_defs_t::nation_unit_defs_t(const nation_unit_defs_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.nation_unit_defs_t)
}

void nation_unit_defs_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

nation_unit_defs_t::~nation_unit_defs_t() {
  // @@protoc_insertion_point(destructor:pb_message.nation_unit_defs_t)
  SharedDtor();
}

void nation_unit_defs_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nation_unit_defs_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nation_unit_defs_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nation_unit_defs_t_descriptor_;
}

const nation_unit_defs_t& nation_unit_defs_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

nation_unit_defs_t* nation_unit_defs_t::default_instance_ = NULL;

nation_unit_defs_t* nation_unit_defs_t::New(::google::protobuf::Arena* arena) const {
  nation_unit_defs_t* n = new nation_unit_defs_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nation_unit_defs_t::Clear() {
  units_.Clear();
}

bool nation_unit_defs_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.nation_unit_defs_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_message.unit_def_t units = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_units;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.nation_unit_defs_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.nation_unit_defs_t)
  return false;
#undef DO_
}

void nation_unit_defs_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.nation_unit_defs_t)
  // repeated .pb_message.unit_def_t units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.nation_unit_defs_t)
}

::google::protobuf::uint8* nation_unit_defs_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.nation_unit_defs_t)
  // repeated .pb_message.unit_def_t units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->units(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.nation_unit_defs_t)
  return target;
}

int nation_unit_defs_t::ByteSize() const {
  int total_size = 0;

  // repeated .pb_message.unit_def_t units = 1;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nation_unit_defs_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nation_unit_defs_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nation_unit_defs_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nation_unit_defs_t::MergeFrom(const nation_unit_defs_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  units_.MergeFrom(from.units_);
}

void nation_unit_defs_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nation_unit_defs_t::CopyFrom(const nation_unit_defs_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nation_unit_defs_t::IsInitialized() const {

  return true;
}

void nation_unit_defs_t::Swap(nation_unit_defs_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nation_unit_defs_t::InternalSwap(nation_unit_defs_t* other) {
  units_.UnsafeArenaSwap(&other->units_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nation_unit_defs_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nation_unit_defs_t_descriptor_;
  metadata.reflection = nation_unit_defs_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nation_unit_defs_t

// repeated .pb_message.unit_def_t units = 1;
int nation_unit_defs_t::units_size() const {
  return units_.size();
}
void nation_unit_defs_t::clear_units() {
  units_.Clear();
}
const ::pb_message::unit_def_t& nation_unit_defs_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.nation_unit_defs_t.units)
  return units_.Get(index);
}
::pb_message::unit_def_t* nation_unit_defs_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.nation_unit_defs_t.units)
  return units_.Mutable(index);
}
::pb_message::unit_def_t* nation_unit_defs_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.nation_unit_defs_t.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::unit_def_t >*
nation_unit_defs_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.nation_unit_defs_t.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::unit_def_t >&
nation_unit_defs_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.nation_unit_defs_t.units)
  return units_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int unit_defs_t::kNationUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

unit_defs_t::unit_defs_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.unit_defs_t)
}

void unit_defs_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

unit_defs_t::unit_defs_t(const unit_defs_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.unit_defs_t)
}

void unit_defs_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nation_units_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  nation_units_.SetEntryDescriptor(
      &::pb_message::unit_defs_t_NationUnitsEntry_descriptor_);
}

unit_defs_t::~unit_defs_t() {
  // @@protoc_insertion_point(destructor:pb_message.unit_defs_t)
  SharedDtor();
}

void unit_defs_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void unit_defs_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_defs_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_defs_t_descriptor_;
}

const unit_defs_t& unit_defs_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

unit_defs_t* unit_defs_t::default_instance_ = NULL;

unit_defs_t* unit_defs_t::New(::google::protobuf::Arena* arena) const {
  unit_defs_t* n = new unit_defs_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void unit_defs_t::Clear() {
  nation_units_.Clear();
}

bool unit_defs_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.unit_defs_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nation_units:
          ::google::protobuf::scoped_ptr<unit_defs_t_NationUnitsEntry> entry(nation_units_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_nation_units())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.unit_defs_t.NationUnitsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nation_units;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.unit_defs_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.unit_defs_t)
  return false;
#undef DO_
}

void unit_defs_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.unit_defs_t)
  // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
  {
    ::google::protobuf::scoped_ptr<unit_defs_t_NationUnitsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::nation_unit_defs_t >::const_iterator
        it = this->nation_units().begin();
        it != this->nation_units().end(); ++it) {
      entry.reset(nation_units_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.unit_defs_t.NationUnitsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:pb_message.unit_defs_t)
}

::google::protobuf::uint8* unit_defs_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.unit_defs_t)
  // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
  {
    ::google::protobuf::scoped_ptr<unit_defs_t_NationUnitsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::nation_unit_defs_t >::const_iterator
        it = this->nation_units().begin();
        it != this->nation_units().end(); ++it) {
      entry.reset(nation_units_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.unit_defs_t.NationUnitsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.unit_defs_t)
  return target;
}

int unit_defs_t::ByteSize() const {
  int total_size = 0;

  // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
  total_size += 1 * this->nation_units_size();
  {
    ::google::protobuf::scoped_ptr<unit_defs_t_NationUnitsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::nation_unit_defs_t >::const_iterator
        it = this->nation_units().begin();
        it != this->nation_units().end(); ++it) {
      entry.reset(nation_units_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_defs_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const unit_defs_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const unit_defs_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_defs_t::MergeFrom(const unit_defs_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nation_units_.MergeFrom(from.nation_units_);
}

void unit_defs_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_defs_t::CopyFrom(const unit_defs_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_defs_t::IsInitialized() const {

  return true;
}

void unit_defs_t::Swap(unit_defs_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void unit_defs_t::InternalSwap(unit_defs_t* other) {
  nation_units_.Swap(&other->nation_units_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata unit_defs_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_defs_t_descriptor_;
  metadata.reflection = unit_defs_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// unit_defs_t

// map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
int unit_defs_t::nation_units_size() const {
  return nation_units_.size();
}
void unit_defs_t::clear_nation_units() {
  nation_units_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::nation_unit_defs_t >&
unit_defs_t::nation_units() const {
  // @@protoc_insertion_point(field_map:pb_message.unit_defs_t.nation_units)
  return nation_units_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::nation_unit_defs_t >*
unit_defs_t::mutable_nation_units() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.unit_defs_t.nation_units)
  return nation_units_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int team_t::kNameFieldNumber;
const int team_t::kNationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

team_t::team_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.team_t)
}

void team_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

team_t::team_t(const team_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.team_t)
}

void team_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

team_t::~team_t() {
  // @@protoc_insertion_point(destructor:pb_message.team_t)
  SharedDtor();
}

void team_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void team_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_t_descriptor_;
}

const team_t& team_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

team_t* team_t::default_instance_ = NULL;

team_t* team_t::New(::google::protobuf::Arena* arena) const {
  team_t* n = new team_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void team_t::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nations_.Clear();
}

bool team_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.team_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.team_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nations;
        break;
      }

      // repeated string nations = 2;
      case 2: {
        if (tag == 18) {
         parse_nations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nations(this->nations_size() - 1).data(),
            this->nations(this->nations_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.team_t.nations"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.team_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.team_t)
  return false;
#undef DO_
}

void team_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.team_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.team_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string nations = 2;
  for (int i = 0; i < this->nations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nations(i).data(), this->nations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.team_t.nations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.team_t)
}

::google::protobuf::uint8* team_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.team_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.team_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string nations = 2;
  for (int i = 0; i < this->nations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nations(i).data(), this->nations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.team_t.nations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.team_t)
  return target;
}

int team_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated string nations = 2;
  total_size += 1 * this->nations_size();
  for (int i = 0; i < this->nations_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const team_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const team_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_t::MergeFrom(const team_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nations_.MergeFrom(from.nations_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void team_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_t::CopyFrom(const team_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_t::IsInitialized() const {

  return true;
}

void team_t::Swap(team_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void team_t::InternalSwap(team_t* other) {
  name_.Swap(&other->name_);
  nations_.UnsafeArenaSwap(&other->nations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata team_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_t_descriptor_;
  metadata.reflection = team_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// team_t

// optional string name = 1;
void team_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& team_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.team_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void team_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.team_t.name)
}
 void team_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.team_t.name)
}
 void team_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.team_t.name)
}
 ::std::string* team_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.team_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* team_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void team_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.team_t.name)
}

// repeated string nations = 2;
int team_t::nations_size() const {
  return nations_.size();
}
void team_t::clear_nations() {
  nations_.Clear();
}
 const ::std::string& team_t::nations(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.team_t.nations)
  return nations_.Get(index);
}
 ::std::string* team_t::mutable_nations(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.team_t.nations)
  return nations_.Mutable(index);
}
 void team_t::set_nations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.team_t.nations)
  nations_.Mutable(index)->assign(value);
}
 void team_t::set_nations(int index, const char* value) {
  nations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.team_t.nations)
}
 void team_t::set_nations(int index, const char* value, size_t size) {
  nations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.team_t.nations)
}
 ::std::string* team_t::add_nations() {
  return nations_.Add();
}
 void team_t::add_nations(const ::std::string& value) {
  nations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.team_t.nations)
}
 void team_t::add_nations(const char* value) {
  nations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.team_t.nations)
}
 void team_t::add_nations(const char* value, size_t size) {
  nations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.team_t.nations)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
team_t::nations() const {
  // @@protoc_insertion_point(field_list:pb_message.team_t.nations)
  return nations_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
team_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.team_t.nations)
  return &nations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* scenario_condition_t_action_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_condition_t_action_t_descriptor_;
}
bool scenario_condition_t_action_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const scenario_condition_t_action_t scenario_condition_t::occupies;
const scenario_condition_t_action_t scenario_condition_t::destroys;
const scenario_condition_t_action_t scenario_condition_t::action_t_MIN;
const scenario_condition_t_action_t scenario_condition_t::action_t_MAX;
const int scenario_condition_t::action_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* scenario_condition_t_object_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_condition_t_object_type_t_descriptor_;
}
bool scenario_condition_t_object_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const scenario_condition_t_object_type_t scenario_condition_t::hexes;
const scenario_condition_t_object_type_t scenario_condition_t::sb;
const scenario_condition_t_object_type_t scenario_condition_t::fleet_area;
const scenario_condition_t_object_type_t scenario_condition_t::nation;
const scenario_condition_t_object_type_t scenario_condition_t::object_type_t_MIN;
const scenario_condition_t_object_type_t scenario_condition_t::object_type_t_MAX;
const int scenario_condition_t::object_type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scenario_condition_t_object_t::kTypeFieldNumber;
const int scenario_condition_t_object_t::kNamesFieldNumber;
const int scenario_condition_t_object_t::kHexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scenario_condition_t_object_t::scenario_condition_t_object_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.scenario_condition_t.object_t)
}

void scenario_condition_t_object_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

scenario_condition_t_object_t::scenario_condition_t_object_t(const scenario_condition_t_object_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_condition_t.object_t)
}

void scenario_condition_t_object_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
}

scenario_condition_t_object_t::~scenario_condition_t_object_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_condition_t.object_t)
  SharedDtor();
}

void scenario_condition_t_object_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scenario_condition_t_object_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scenario_condition_t_object_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_condition_t_object_t_descriptor_;
}

const scenario_condition_t_object_t& scenario_condition_t_object_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

scenario_condition_t_object_t* scenario_condition_t_object_t::default_instance_ = NULL;

scenario_condition_t_object_t* scenario_condition_t_object_t::New(::google::protobuf::Arena* arena) const {
  scenario_condition_t_object_t* n = new scenario_condition_t_object_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void scenario_condition_t_object_t::Clear() {
  type_ = 0;
  names_.Clear();
  hexes_.Clear();
}

bool scenario_condition_t_object_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.scenario_condition_t.object_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_message.scenario_condition_t.object_type_t type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb_message::scenario_condition_t_object_type_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_names;
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (tag == 18) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_condition_t.object_t.names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_names;
        if (input->ExpectTag(26)) goto parse_hexes;
        break;
      }

      // repeated int32 hexes = 3;
      case 3: {
        if (tag == 26) {
         parse_hexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hexes())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_hexes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.scenario_condition_t.object_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.scenario_condition_t.object_t)
  return false;
#undef DO_
}

void scenario_condition_t_object_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.scenario_condition_t.object_t)
  // optional .pb_message.scenario_condition_t.object_type_t type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_condition_t.object_t.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  // repeated int32 hexes = 3;
  if (this->hexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hexes_cached_byte_size_);
  }
  for (int i = 0; i < this->hexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->hexes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.scenario_condition_t.object_t)
}

::google::protobuf::uint8* scenario_condition_t_object_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_condition_t.object_t)
  // optional .pb_message.scenario_condition_t.object_type_t type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_condition_t.object_t.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  // repeated int32 hexes = 3;
  if (this->hexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hexes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->hexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->hexes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_condition_t.object_t)
  return target;
}

int scenario_condition_t_object_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.scenario_condition_t.object_type_t type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated string names = 2;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // repeated int32 hexes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hexes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hexes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scenario_condition_t_object_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const scenario_condition_t_object_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const scenario_condition_t_object_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scenario_condition_t_object_t::MergeFrom(const scenario_condition_t_object_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  names_.MergeFrom(from.names_);
  hexes_.MergeFrom(from.hexes_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void scenario_condition_t_object_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_condition_t_object_t::CopyFrom(const scenario_condition_t_object_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_condition_t_object_t::IsInitialized() const {

  return true;
}

void scenario_condition_t_object_t::Swap(scenario_condition_t_object_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scenario_condition_t_object_t::InternalSwap(scenario_condition_t_object_t* other) {
  std::swap(type_, other->type_);
  names_.UnsafeArenaSwap(&other->names_);
  hexes_.UnsafeArenaSwap(&other->hexes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata scenario_condition_t_object_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scenario_condition_t_object_t_descriptor_;
  metadata.reflection = scenario_condition_t_object_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scenario_condition_t::kActorsFieldNumber;
const int scenario_condition_t::kActionFieldNumber;
const int scenario_condition_t::kOneOfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scenario_condition_t::scenario_condition_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.scenario_condition_t)
}

void scenario_condition_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

scenario_condition_t::scenario_condition_t(const scenario_condition_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_condition_t)
}

void scenario_condition_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  action_ = 0;
}

scenario_condition_t::~scenario_condition_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_condition_t)
  SharedDtor();
}

void scenario_condition_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scenario_condition_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scenario_condition_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_condition_t_descriptor_;
}

const scenario_condition_t& scenario_condition_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

scenario_condition_t* scenario_condition_t::default_instance_ = NULL;

scenario_condition_t* scenario_condition_t::New(::google::protobuf::Arena* arena) const {
  scenario_condition_t* n = new scenario_condition_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void scenario_condition_t::Clear() {
  action_ = 0;
  actors_.Clear();
  one_of_.Clear();
}

bool scenario_condition_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.scenario_condition_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string actors = 1;
      case 1: {
        if (tag == 10) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_actors()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actors(this->actors_size() - 1).data(),
            this->actors(this->actors_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_condition_t.actors"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_actors;
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional .pb_message.scenario_condition_t.action_t action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::pb_message::scenario_condition_t_action_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_one_of;
        break;
      }

      // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
      case 3: {
        if (tag == 26) {
         parse_one_of:
          DO_(input->IncrementRecursionDepth());
         parse_loop_one_of:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_one_of()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_one_of;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.scenario_condition_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.scenario_condition_t)
  return false;
#undef DO_
}

void scenario_condition_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.scenario_condition_t)
  // repeated string actors = 1;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actors(i).data(), this->actors(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_condition_t.actors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->actors(i), output);
  }

  // optional .pb_message.scenario_condition_t.action_t action = 2;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
  for (unsigned int i = 0, n = this->one_of_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->one_of(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.scenario_condition_t)
}

::google::protobuf::uint8* scenario_condition_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_condition_t)
  // repeated string actors = 1;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actors(i).data(), this->actors(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_condition_t.actors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->actors(i), target);
  }

  // optional .pb_message.scenario_condition_t.action_t action = 2;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
  for (unsigned int i = 0, n = this->one_of_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->one_of(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_condition_t)
  return target;
}

int scenario_condition_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.scenario_condition_t.action_t action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // repeated string actors = 1;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->actors(i));
  }

  // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
  total_size += 1 * this->one_of_size();
  for (int i = 0; i < this->one_of_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->one_of(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scenario_condition_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const scenario_condition_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const scenario_condition_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scenario_condition_t::MergeFrom(const scenario_condition_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  actors_.MergeFrom(from.actors_);
  one_of_.MergeFrom(from.one_of_);
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void scenario_condition_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_condition_t::CopyFrom(const scenario_condition_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_condition_t::IsInitialized() const {

  return true;
}

void scenario_condition_t::Swap(scenario_condition_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scenario_condition_t::InternalSwap(scenario_condition_t* other) {
  actors_.UnsafeArenaSwap(&other->actors_);
  std::swap(action_, other->action_);
  one_of_.UnsafeArenaSwap(&other->one_of_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata scenario_condition_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scenario_condition_t_descriptor_;
  metadata.reflection = scenario_condition_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// scenario_condition_t_object_t

// optional .pb_message.scenario_condition_t.object_type_t type = 1;
void scenario_condition_t_object_t::clear_type() {
  type_ = 0;
}
 ::pb_message::scenario_condition_t_object_type_t scenario_condition_t_object_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.object_t.type)
  return static_cast< ::pb_message::scenario_condition_t_object_type_t >(type_);
}
 void scenario_condition_t_object_t::set_type(::pb_message::scenario_condition_t_object_type_t value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.object_t.type)
}

// repeated string names = 2;
int scenario_condition_t_object_t::names_size() const {
  return names_.size();
}
void scenario_condition_t_object_t::clear_names() {
  names_.Clear();
}
 const ::std::string& scenario_condition_t_object_t::names(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.object_t.names)
  return names_.Get(index);
}
 ::std::string* scenario_condition_t_object_t::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_condition_t.object_t.names)
  return names_.Mutable(index);
}
 void scenario_condition_t_object_t::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.object_t.names)
  names_.Mutable(index)->assign(value);
}
 void scenario_condition_t_object_t::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_condition_t.object_t.names)
}
 void scenario_condition_t_object_t::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_condition_t.object_t.names)
}
 ::std::string* scenario_condition_t_object_t::add_names() {
  return names_.Add();
}
 void scenario_condition_t_object_t::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.object_t.names)
}
 void scenario_condition_t_object_t::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_condition_t.object_t.names)
}
 void scenario_condition_t_object_t::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_condition_t.object_t.names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
scenario_condition_t_object_t::names() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.object_t.names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
scenario_condition_t_object_t::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.object_t.names)
  return &names_;
}

// repeated int32 hexes = 3;
int scenario_condition_t_object_t::hexes_size() const {
  return hexes_.size();
}
void scenario_condition_t_object_t::clear_hexes() {
  hexes_.Clear();
}
 ::google::protobuf::int32 scenario_condition_t_object_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.object_t.hexes)
  return hexes_.Get(index);
}
 void scenario_condition_t_object_t::set_hexes(int index, ::google::protobuf::int32 value) {
  hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.object_t.hexes)
}
 void scenario_condition_t_object_t::add_hexes(::google::protobuf::int32 value) {
  hexes_.Add(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.object_t.hexes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
scenario_condition_t_object_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.object_t.hexes)
  return hexes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
scenario_condition_t_object_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.object_t.hexes)
  return &hexes_;
}

// -------------------------------------------------------------------

// scenario_condition_t

// repeated string actors = 1;
int scenario_condition_t::actors_size() const {
  return actors_.size();
}
void scenario_condition_t::clear_actors() {
  actors_.Clear();
}
 const ::std::string& scenario_condition_t::actors(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.actors)
  return actors_.Get(index);
}
 ::std::string* scenario_condition_t::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_condition_t.actors)
  return actors_.Mutable(index);
}
 void scenario_condition_t::set_actors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.actors)
  actors_.Mutable(index)->assign(value);
}
 void scenario_condition_t::set_actors(int index, const char* value) {
  actors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_condition_t.actors)
}
 void scenario_condition_t::set_actors(int index, const char* value, size_t size) {
  actors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_condition_t.actors)
}
 ::std::string* scenario_condition_t::add_actors() {
  return actors_.Add();
}
 void scenario_condition_t::add_actors(const ::std::string& value) {
  actors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.actors)
}
 void scenario_condition_t::add_actors(const char* value) {
  actors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_condition_t.actors)
}
 void scenario_condition_t::add_actors(const char* value, size_t size) {
  actors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_condition_t.actors)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
scenario_condition_t::actors() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.actors)
  return actors_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
scenario_condition_t::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.actors)
  return &actors_;
}

// optional .pb_message.scenario_condition_t.action_t action = 2;
void scenario_condition_t::clear_action() {
  action_ = 0;
}
 ::pb_message::scenario_condition_t_action_t scenario_condition_t::action() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.action)
  return static_cast< ::pb_message::scenario_condition_t_action_t >(action_);
}
 void scenario_condition_t::set_action(::pb_message::scenario_condition_t_action_t value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.action)
}

// repeated .pb_message.scenario_condition_t.object_t one_of = 3;
int scenario_condition_t::one_of_size() const {
  return one_of_.size();
}
void scenario_condition_t::clear_one_of() {
  one_of_.Clear();
}
const ::pb_message::scenario_condition_t_object_t& scenario_condition_t::one_of(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.one_of)
  return one_of_.Get(index);
}
::pb_message::scenario_condition_t_object_t* scenario_condition_t::mutable_one_of(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_condition_t.one_of)
  return one_of_.Mutable(index);
}
::pb_message::scenario_condition_t_object_t* scenario_condition_t::add_one_of() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.one_of)
  return one_of_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::scenario_condition_t_object_t >*
scenario_condition_t::mutable_one_of() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.one_of)
  return &one_of_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::scenario_condition_t_object_t >&
scenario_condition_t::one_of() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.one_of)
  return one_of_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fleet_release_condition_t::kFleetFieldNumber;
const int fleet_release_condition_t::kConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fleet_release_condition_t::fleet_release_condition_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.fleet_release_condition_t)
}

void fleet_release_condition_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  condition_ = const_cast< ::pb_message::scenario_condition_t*>(&::pb_message::scenario_condition_t::default_instance());
}

fleet_release_condition_t::fleet_release_condition_t(const fleet_release_condition_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.fleet_release_condition_t)
}

void fleet_release_condition_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fleet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  condition_ = NULL;
}

fleet_release_condition_t::~fleet_release_condition_t() {
  // @@protoc_insertion_point(destructor:pb_message.fleet_release_condition_t)
  SharedDtor();
}

void fleet_release_condition_t::SharedDtor() {
  fleet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete condition_;
  }
}

void fleet_release_condition_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fleet_release_condition_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fleet_release_condition_t_descriptor_;
}

const fleet_release_condition_t& fleet_release_condition_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

fleet_release_condition_t* fleet_release_condition_t::default_instance_ = NULL;

fleet_release_condition_t* fleet_release_condition_t::New(::google::protobuf::Arena* arena) const {
  fleet_release_condition_t* n = new fleet_release_condition_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fleet_release_condition_t::Clear() {
  fleet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) delete condition_;
  condition_ = NULL;
}

bool fleet_release_condition_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.fleet_release_condition_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fleet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fleet().data(), this->fleet().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.fleet_release_condition_t.fleet"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        break;
      }

      // optional .pb_message.scenario_condition_t condition = 2;
      case 2: {
        if (tag == 18) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.fleet_release_condition_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.fleet_release_condition_t)
  return false;
#undef DO_
}

void fleet_release_condition_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.fleet_release_condition_t)
  // optional string fleet = 1;
  if (this->fleet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleet().data(), this->fleet().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.fleet_release_condition_t.fleet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fleet(), output);
  }

  // optional .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->condition_, output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.fleet_release_condition_t)
}

::google::protobuf::uint8* fleet_release_condition_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.fleet_release_condition_t)
  // optional string fleet = 1;
  if (this->fleet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleet().data(), this->fleet().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.fleet_release_condition_t.fleet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fleet(), target);
  }

  // optional .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->condition_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.fleet_release_condition_t)
  return target;
}

int fleet_release_condition_t::ByteSize() const {
  int total_size = 0;

  // optional string fleet = 1;
  if (this->fleet().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fleet());
  }

  // optional .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->condition_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fleet_release_condition_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const fleet_release_condition_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const fleet_release_condition_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fleet_release_condition_t::MergeFrom(const fleet_release_condition_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.fleet().size() > 0) {

    fleet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleet_);
  }
  if (from.has_condition()) {
    mutable_condition()->::pb_message::scenario_condition_t::MergeFrom(from.condition());
  }
}

void fleet_release_condition_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fleet_release_condition_t::CopyFrom(const fleet_release_condition_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fleet_release_condition_t::IsInitialized() const {

  return true;
}

void fleet_release_condition_t::Swap(fleet_release_condition_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fleet_release_condition_t::InternalSwap(fleet_release_condition_t* other) {
  fleet_.Swap(&other->fleet_);
  std::swap(condition_, other->condition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fleet_release_condition_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fleet_release_condition_t_descriptor_;
  metadata.reflection = fleet_release_condition_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fleet_release_condition_t

// optional string fleet = 1;
void fleet_release_condition_t::clear_fleet() {
  fleet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& fleet_release_condition_t::fleet() const {
  // @@protoc_insertion_point(field_get:pb_message.fleet_release_condition_t.fleet)
  return fleet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void fleet_release_condition_t::set_fleet(const ::std::string& value) {
  
  fleet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.fleet_release_condition_t.fleet)
}
 void fleet_release_condition_t::set_fleet(const char* value) {
  
  fleet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.fleet_release_condition_t.fleet)
}
 void fleet_release_condition_t::set_fleet(const char* value, size_t size) {
  
  fleet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.fleet_release_condition_t.fleet)
}
 ::std::string* fleet_release_condition_t::mutable_fleet() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.fleet_release_condition_t.fleet)
  return fleet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* fleet_release_condition_t::release_fleet() {
  
  return fleet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void fleet_release_condition_t::set_allocated_fleet(::std::string* fleet) {
  if (fleet != NULL) {
    
  } else {
    
  }
  fleet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet);
  // @@protoc_insertion_point(field_set_allocated:pb_message.fleet_release_condition_t.fleet)
}

// optional .pb_message.scenario_condition_t condition = 2;
bool fleet_release_condition_t::has_condition() const {
  return !_is_default_instance_ && condition_ != NULL;
}
void fleet_release_condition_t::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) delete condition_;
  condition_ = NULL;
}
const ::pb_message::scenario_condition_t& fleet_release_condition_t::condition() const {
  // @@protoc_insertion_point(field_get:pb_message.fleet_release_condition_t.condition)
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
::pb_message::scenario_condition_t* fleet_release_condition_t::mutable_condition() {
  
  if (condition_ == NULL) {
    condition_ = new ::pb_message::scenario_condition_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.fleet_release_condition_t.condition)
  return condition_;
}
::pb_message::scenario_condition_t* fleet_release_condition_t::release_condition() {
  
  ::pb_message::scenario_condition_t* temp = condition_;
  condition_ = NULL;
  return temp;
}
void fleet_release_condition_t::set_allocated_condition(::pb_message::scenario_condition_t* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.fleet_release_condition_t.condition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int war_entry_condition_t::kEconomyFieldNumber;
const int war_entry_condition_t::kConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

war_entry_condition_t::war_entry_condition_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.war_entry_condition_t)
}

void war_entry_condition_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  condition_ = const_cast< ::pb_message::scenario_condition_t*>(&::pb_message::scenario_condition_t::default_instance());
}

war_entry_condition_t::war_entry_condition_t(const war_entry_condition_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.war_entry_condition_t)
}

void war_entry_condition_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  economy_ = 0;
  condition_ = NULL;
}

war_entry_condition_t::~war_entry_condition_t() {
  // @@protoc_insertion_point(destructor:pb_message.war_entry_condition_t)
  SharedDtor();
}

void war_entry_condition_t::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
  }
}

void war_entry_condition_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* war_entry_condition_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return war_entry_condition_t_descriptor_;
}

const war_entry_condition_t& war_entry_condition_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

war_entry_condition_t* war_entry_condition_t::default_instance_ = NULL;

war_entry_condition_t* war_entry_condition_t::New(::google::protobuf::Arena* arena) const {
  war_entry_condition_t* n = new war_entry_condition_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void war_entry_condition_t::Clear() {
  economy_ = 0;
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) delete condition_;
  condition_ = NULL;
}

bool war_entry_condition_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.war_entry_condition_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_message.scenario_condition_t condition = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_economy;
        break;
      }

      // optional .pb_message.war_footing_t economy = 3;
      case 3: {
        if (tag == 24) {
         parse_economy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_economy(static_cast< ::pb_message::war_footing_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.war_entry_condition_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.war_entry_condition_t)
  return false;
#undef DO_
}

void war_entry_condition_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.war_entry_condition_t)
  // optional .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->condition_, output);
  }

  // optional .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->economy(), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.war_entry_condition_t)
}

::google::protobuf::uint8* war_entry_condition_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.war_entry_condition_t)
  // optional .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->condition_, target);
  }

  // optional .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->economy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.war_entry_condition_t)
  return target;
}

int war_entry_condition_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->economy());
  }

  // optional .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->condition_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void war_entry_condition_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const war_entry_condition_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const war_entry_condition_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void war_entry_condition_t::MergeFrom(const war_entry_condition_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.economy() != 0) {
    set_economy(from.economy());
  }
  if (from.has_condition()) {
    mutable_condition()->::pb_message::scenario_condition_t::MergeFrom(from.condition());
  }
}

void war_entry_condition_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void war_entry_condition_t::CopyFrom(const war_entry_condition_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool war_entry_condition_t::IsInitialized() const {

  return true;
}

void war_entry_condition_t::Swap(war_entry_condition_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void war_entry_condition_t::InternalSwap(war_entry_condition_t* other) {
  std::swap(economy_, other->economy_);
  std::swap(condition_, other->condition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata war_entry_condition_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = war_entry_condition_t_descriptor_;
  metadata.reflection = war_entry_condition_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// war_entry_condition_t

// optional .pb_message.war_footing_t economy = 3;
void war_entry_condition_t::clear_economy() {
  economy_ = 0;
}
 ::pb_message::war_footing_t war_entry_condition_t::economy() const {
  // @@protoc_insertion_point(field_get:pb_message.war_entry_condition_t.economy)
  return static_cast< ::pb_message::war_footing_t >(economy_);
}
 void war_entry_condition_t::set_economy(::pb_message::war_footing_t value) {
  
  economy_ = value;
  // @@protoc_insertion_point(field_set:pb_message.war_entry_condition_t.economy)
}

// optional .pb_message.scenario_condition_t condition = 2;
bool war_entry_condition_t::has_condition() const {
  return !_is_default_instance_ && condition_ != NULL;
}
void war_entry_condition_t::clear_condition() {
  if (GetArenaNoVirtual() == NULL && condition_ != NULL) delete condition_;
  condition_ = NULL;
}
const ::pb_message::scenario_condition_t& war_entry_condition_t::condition() const {
  // @@protoc_insertion_point(field_get:pb_message.war_entry_condition_t.condition)
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
::pb_message::scenario_condition_t* war_entry_condition_t::mutable_condition() {
  
  if (condition_ == NULL) {
    condition_ = new ::pb_message::scenario_condition_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.war_entry_condition_t.condition)
  return condition_;
}
::pb_message::scenario_condition_t* war_entry_condition_t::release_condition() {
  
  ::pb_message::scenario_condition_t* temp = condition_;
  condition_ = NULL;
  return temp;
}
void war_entry_condition_t::set_allocated_condition(::pb_message::scenario_condition_t* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.war_entry_condition_t.condition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* scenario_turn_t_national_action_t_action_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_turn_t_national_action_t_action_type_t_descriptor_;
}
bool scenario_turn_t_national_action_t_action_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::release_fleets;
const scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::declare_war;
const scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::action_type_t_MIN;
const scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::action_type_t_MAX;
const int scenario_turn_t_national_action_t::action_type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scenario_turn_t_national_action_t_action_t::kTypeFieldNumber;
const int scenario_turn_t_national_action_t_action_t::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scenario_turn_t_national_action_t_action_t::scenario_turn_t_national_action_t_action_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.scenario_turn_t.national_action_t.action_t)
}

void scenario_turn_t_national_action_t_action_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

scenario_turn_t_national_action_t_action_t::scenario_turn_t_national_action_t_action_t(const scenario_turn_t_national_action_t_action_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_turn_t.national_action_t.action_t)
}

void scenario_turn_t_national_action_t_action_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
}

scenario_turn_t_national_action_t_action_t::~scenario_turn_t_national_action_t_action_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_turn_t.national_action_t.action_t)
  SharedDtor();
}

void scenario_turn_t_national_action_t_action_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scenario_turn_t_national_action_t_action_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scenario_turn_t_national_action_t_action_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_turn_t_national_action_t_action_t_descriptor_;
}

const scenario_turn_t_national_action_t_action_t& scenario_turn_t_national_action_t_action_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

scenario_turn_t_national_action_t_action_t* scenario_turn_t_national_action_t_action_t::default_instance_ = NULL;

scenario_turn_t_national_action_t_action_t* scenario_turn_t_national_action_t_action_t::New(::google::protobuf::Arena* arena) const {
  scenario_turn_t_national_action_t_action_t* n = new scenario_turn_t_national_action_t_action_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void scenario_turn_t_national_action_t_action_t::Clear() {
  type_ = 0;
  names_.Clear();
}

bool scenario_turn_t_national_action_t_action_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.scenario_turn_t.national_action_t.action_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb_message::scenario_turn_t_national_action_t_action_type_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_names;
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (tag == 18) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_turn_t.national_action_t.action_t.names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.scenario_turn_t.national_action_t.action_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.scenario_turn_t.national_action_t.action_t)
  return false;
#undef DO_
}

void scenario_turn_t_national_action_t_action_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.scenario_turn_t.national_action_t.action_t)
  // optional .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_turn_t.national_action_t.action_t.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.scenario_turn_t.national_action_t.action_t)
}

::google::protobuf::uint8* scenario_turn_t_national_action_t_action_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_turn_t.national_action_t.action_t)
  // optional .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string names = 2;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_turn_t.national_action_t.action_t.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_turn_t.national_action_t.action_t)
  return target;
}

int scenario_turn_t_national_action_t_action_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated string names = 2;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scenario_turn_t_national_action_t_action_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const scenario_turn_t_national_action_t_action_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const scenario_turn_t_national_action_t_action_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scenario_turn_t_national_action_t_action_t::MergeFrom(const scenario_turn_t_national_action_t_action_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  names_.MergeFrom(from.names_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void scenario_turn_t_national_action_t_action_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_turn_t_national_action_t_action_t::CopyFrom(const scenario_turn_t_national_action_t_action_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_turn_t_national_action_t_action_t::IsInitialized() const {

  return true;
}

void scenario_turn_t_national_action_t_action_t::Swap(scenario_turn_t_national_action_t_action_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scenario_turn_t_national_action_t_action_t::InternalSwap(scenario_turn_t_national_action_t_action_t* other) {
  std::swap(type_, other->type_);
  names_.UnsafeArenaSwap(&other->names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata scenario_turn_t_national_action_t_action_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scenario_turn_t_national_action_t_action_t_descriptor_;
  metadata.reflection = scenario_turn_t_national_action_t_action_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scenario_turn_t_national_action_t::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scenario_turn_t_national_action_t::scenario_turn_t_national_action_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.scenario_turn_t.national_action_t)
}

void scenario_turn_t_national_action_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

scenario_turn_t_national_action_t::scenario_turn_t_national_action_t(const scenario_turn_t_national_action_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_turn_t.national_action_t)
}

void scenario_turn_t_national_action_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

scenario_turn_t_national_action_t::~scenario_turn_t_national_action_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_turn_t.national_action_t)
  SharedDtor();
}

void scenario_turn_t_national_action_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scenario_turn_t_national_action_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scenario_turn_t_national_action_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_turn_t_national_action_t_descriptor_;
}

const scenario_turn_t_national_action_t& scenario_turn_t_national_action_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

scenario_turn_t_national_action_t* scenario_turn_t_national_action_t::default_instance_ = NULL;

scenario_turn_t_national_action_t* scenario_turn_t_national_action_t::New(::google::protobuf::Arena* arena) const {
  scenario_turn_t_national_action_t* n = new scenario_turn_t_national_action_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void scenario_turn_t_national_action_t::Clear() {
  actions_.Clear();
}

bool scenario_turn_t_national_action_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.scenario_turn_t.national_action_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.scenario_turn_t.national_action_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.scenario_turn_t.national_action_t)
  return false;
#undef DO_
}

void scenario_turn_t_national_action_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.scenario_turn_t.national_action_t)
  // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.scenario_turn_t.national_action_t)
}

::google::protobuf::uint8* scenario_turn_t_national_action_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_turn_t.national_action_t)
  // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_turn_t.national_action_t)
  return target;
}

int scenario_turn_t_national_action_t::ByteSize() const {
  int total_size = 0;

  // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scenario_turn_t_national_action_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const scenario_turn_t_national_action_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const scenario_turn_t_national_action_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scenario_turn_t_national_action_t::MergeFrom(const scenario_turn_t_national_action_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  actions_.MergeFrom(from.actions_);
}

void scenario_turn_t_national_action_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_turn_t_national_action_t::CopyFrom(const scenario_turn_t_national_action_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_turn_t_national_action_t::IsInitialized() const {

  return true;
}

void scenario_turn_t_national_action_t::Swap(scenario_turn_t_national_action_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scenario_turn_t_national_action_t::InternalSwap(scenario_turn_t_national_action_t* other) {
  actions_.UnsafeArenaSwap(&other->actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata scenario_turn_t_national_action_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scenario_turn_t_national_action_t_descriptor_;
  metadata.reflection = scenario_turn_t_national_action_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scenario_turn_t::kTurnFieldNumber;
const int scenario_turn_t::kNationalActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scenario_turn_t::scenario_turn_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.scenario_turn_t)
}

void scenario_turn_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

scenario_turn_t::scenario_turn_t(const scenario_turn_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_turn_t)
}

void scenario_turn_t::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  turn_ = 0;
  national_actions_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  national_actions_.SetEntryDescriptor(
      &::pb_message::scenario_turn_t_NationalActionsEntry_descriptor_);
}

scenario_turn_t::~scenario_turn_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_turn_t)
  SharedDtor();
}

void scenario_turn_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scenario_turn_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scenario_turn_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_turn_t_descriptor_;
}

const scenario_turn_t& scenario_turn_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

scenario_turn_t* scenario_turn_t::default_instance_ = NULL;

scenario_turn_t* scenario_turn_t::New(::google::protobuf::Arena* arena) const {
  scenario_turn_t* n = new scenario_turn_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void scenario_turn_t::Clear() {
  turn_ = 0;
  national_actions_.Clear();
}

bool scenario_turn_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.scenario_turn_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 turn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_national_actions;
        break;
      }

      // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
      case 2: {
        if (tag == 18) {
         parse_national_actions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_national_actions:
          ::google::protobuf::scoped_ptr<scenario_turn_t_NationalActionsEntry> entry(national_actions_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_national_actions())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_turn_t.NationalActionsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_national_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.scenario_turn_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.scenario_turn_t)
  return false;
#undef DO_
}

void scenario_turn_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.scenario_turn_t)
  // optional int32 turn = 1;
  if (this->turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->turn(), output);
  }

  // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
  {
    ::google::protobuf::scoped_ptr<scenario_turn_t_NationalActionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::scenario_turn_t_national_action_t >::const_iterator
        it = this->national_actions().begin();
        it != this->national_actions().end(); ++it) {
      entry.reset(national_actions_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.scenario_turn_t.NationalActionsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:pb_message.scenario_turn_t)
}

::google::protobuf::uint8* scenario_turn_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_turn_t)
  // optional int32 turn = 1;
  if (this->turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->turn(), target);
  }

  // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
  {
    ::google::protobuf::scoped_ptr<scenario_turn_t_NationalActionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::scenario_turn_t_national_action_t >::const_iterator
        it = this->national_actions().begin();
        it != this->national_actions().end(); ++it) {
      entry.reset(national_actions_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.scenario_turn_t.NationalActionsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_turn_t)
  return target;
}

int scenario_turn_t::ByteSize() const {
  int total_size = 0;

  // optional int32 turn = 1;
  if (this->turn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turn());
  }

  // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
  total_size += 1 * this->national_actions_size();
  {
    ::google::protobuf::scoped_ptr<scenario_turn_t_NationalActionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::scenario_turn_t_national_action_t >::const_iterator
        it = this->national_actions().begin();
        it != this->national_actions().end(); ++it) {
      entry.reset(national_actions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scenario_turn_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const scenario_turn_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const scenario_turn_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scenario_turn_t::MergeFrom(const scenario_turn_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  national_actions_.MergeFrom(from.national_actions_);
  if (from.turn() != 0) {
    set_turn(from.turn());
  }
}

void scenario_turn_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_turn_t::CopyFrom(const scenario_turn_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_turn_t::IsInitialized() const {

  return true;
}

void scenario_turn_t::Swap(scenario_turn_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scenario_turn_t::InternalSwap(scenario_turn_t* other) {
  std::swap(turn_, other->turn_);
  national_actions_.Swap(&other->national_actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata scenario_turn_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scenario_turn_t_descriptor_;
  metadata.reflection = scenario_turn_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// scenario_turn_t_national_action_t_action_t

// optional .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
void scenario_turn_t_national_action_t_action_t::clear_type() {
  type_ = 0;
}
 ::pb_message::scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t_action_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.national_action_t.action_t.type)
  return static_cast< ::pb_message::scenario_turn_t_national_action_t_action_type_t >(type_);
}
 void scenario_turn_t_national_action_t_action_t::set_type(::pb_message::scenario_turn_t_national_action_t_action_type_t value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb_message.scenario_turn_t.national_action_t.action_t.type)
}

// repeated string names = 2;
int scenario_turn_t_national_action_t_action_t::names_size() const {
  return names_.size();
}
void scenario_turn_t_national_action_t_action_t::clear_names() {
  names_.Clear();
}
 const ::std::string& scenario_turn_t_national_action_t_action_t::names(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return names_.Get(index);
}
 ::std::string* scenario_turn_t_national_action_t_action_t::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return names_.Mutable(index);
}
 void scenario_turn_t_national_action_t_action_t::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_turn_t.national_action_t.action_t.names)
  names_.Mutable(index)->assign(value);
}
 void scenario_turn_t_national_action_t_action_t::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
 void scenario_turn_t_national_action_t_action_t::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
 ::std::string* scenario_turn_t_national_action_t_action_t::add_names() {
  return names_.Add();
}
 void scenario_turn_t_national_action_t_action_t::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
 void scenario_turn_t_national_action_t_action_t::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
 void scenario_turn_t_national_action_t_action_t::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
scenario_turn_t_national_action_t_action_t::names() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
scenario_turn_t_national_action_t_action_t::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return &names_;
}

// -------------------------------------------------------------------

// scenario_turn_t_national_action_t

// repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
int scenario_turn_t_national_action_t::actions_size() const {
  return actions_.size();
}
void scenario_turn_t_national_action_t::clear_actions() {
  actions_.Clear();
}
const ::pb_message::scenario_turn_t_national_action_t_action_t& scenario_turn_t_national_action_t::actions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.national_action_t.actions)
  return actions_.Get(index);
}
::pb_message::scenario_turn_t_national_action_t_action_t* scenario_turn_t_national_action_t::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_turn_t.national_action_t.actions)
  return actions_.Mutable(index);
}
::pb_message::scenario_turn_t_national_action_t_action_t* scenario_turn_t_national_action_t::add_actions() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_turn_t.national_action_t.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::scenario_turn_t_national_action_t_action_t >*
scenario_turn_t_national_action_t::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_turn_t.national_action_t.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::scenario_turn_t_national_action_t_action_t >&
scenario_turn_t_national_action_t::actions() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_turn_t.national_action_t.actions)
  return actions_;
}

// -------------------------------------------------------------------

// scenario_turn_t

// optional int32 turn = 1;
void scenario_turn_t::clear_turn() {
  turn_ = 0;
}
 ::google::protobuf::int32 scenario_turn_t::turn() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.turn)
  return turn_;
}
 void scenario_turn_t::set_turn(::google::protobuf::int32 value) {
  
  turn_ = value;
  // @@protoc_insertion_point(field_set:pb_message.scenario_turn_t.turn)
}

// map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
int scenario_turn_t::national_actions_size() const {
  return national_actions_.size();
}
void scenario_turn_t::clear_national_actions() {
  national_actions_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::scenario_turn_t_national_action_t >&
scenario_turn_t::national_actions() const {
  // @@protoc_insertion_point(field_map:pb_message.scenario_turn_t.national_actions)
  return national_actions_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::scenario_turn_t_national_action_t >*
scenario_turn_t::mutable_national_actions() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.scenario_turn_t.national_actions)
  return national_actions_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scenario_t_nation_t::kAtWarWithFieldNumber;
const int scenario_t_nation_t::kFutureBelligerentsFieldNumber;
const int scenario_t_nation_t::kEconomyFieldNumber;
const int scenario_t_nation_t::kExhaustionTurnsFieldNumber;
const int scenario_t_nation_t::kAccumulateExhaustionAtPeaceFieldNumber;
const int scenario_t_nation_t::kReleaseConditionsFieldNumber;
const int scenario_t_nation_t::kWarEntryConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scenario_t_nation_t::scenario_t_nation_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.scenario_t.nation_t)
}

void scenario_t_nation_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

scenario_t_nation_t::scenario_t_nation_t(const scenario_t_nation_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_t.nation_t)
}

void scenario_t_nation_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  economy_ = 0;
  exhaustion_turns_ = 0;
  accumulate_exhaustion_at_peace_ = false;
}

scenario_t_nation_t::~scenario_t_nation_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_t.nation_t)
  SharedDtor();
}

void scenario_t_nation_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scenario_t_nation_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scenario_t_nation_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_t_nation_t_descriptor_;
}

const scenario_t_nation_t& scenario_t_nation_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

scenario_t_nation_t* scenario_t_nation_t::default_instance_ = NULL;

scenario_t_nation_t* scenario_t_nation_t::New(::google::protobuf::Arena* arena) const {
  scenario_t_nation_t* n = new scenario_t_nation_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void scenario_t_nation_t::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<scenario_t_nation_t*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(economy_, exhaustion_turns_);
  accumulate_exhaustion_at_peace_ = false;

#undef ZR_HELPER_
#undef ZR_

  at_war_with_.Clear();
  future_belligerents_.Clear();
  release_conditions_.Clear();
  war_entry_conditions_.Clear();
}

bool scenario_t_nation_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.scenario_t.nation_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string at_war_with = 1;
      case 1: {
        if (tag == 10) {
         parse_at_war_with:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_at_war_with()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->at_war_with(this->at_war_with_size() - 1).data(),
            this->at_war_with(this->at_war_with_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.nation_t.at_war_with"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_at_war_with;
        if (input->ExpectTag(18)) goto parse_future_belligerents;
        break;
      }

      // repeated string future_belligerents = 2;
      case 2: {
        if (tag == 18) {
         parse_future_belligerents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_future_belligerents()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->future_belligerents(this->future_belligerents_size() - 1).data(),
            this->future_belligerents(this->future_belligerents_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.nation_t.future_belligerents"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_future_belligerents;
        if (input->ExpectTag(24)) goto parse_economy;
        break;
      }

      // optional .pb_message.war_footing_t economy = 3;
      case 3: {
        if (tag == 24) {
         parse_economy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_economy(static_cast< ::pb_message::war_footing_t >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exhaustion_turns;
        break;
      }

      // optional int32 exhaustion_turns = 4;
      case 4: {
        if (tag == 32) {
         parse_exhaustion_turns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exhaustion_turns_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_accumulate_exhaustion_at_peace;
        break;
      }

      // optional bool accumulate_exhaustion_at_peace = 5;
      case 5: {
        if (tag == 40) {
         parse_accumulate_exhaustion_at_peace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accumulate_exhaustion_at_peace_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_release_conditions;
        break;
      }

      // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
      case 6: {
        if (tag == 50) {
         parse_release_conditions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_release_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_release_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_release_conditions;
        if (input->ExpectTag(58)) goto parse_loop_war_entry_conditions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_war_entry_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_war_entry_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_war_entry_conditions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.scenario_t.nation_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.scenario_t.nation_t)
  return false;
#undef DO_
}

void scenario_t_nation_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.scenario_t.nation_t)
  // repeated string at_war_with = 1;
  for (int i = 0; i < this->at_war_with_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->at_war_with(i).data(), this->at_war_with(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.nation_t.at_war_with");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->at_war_with(i), output);
  }

  // repeated string future_belligerents = 2;
  for (int i = 0; i < this->future_belligerents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->future_belligerents(i).data(), this->future_belligerents(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.nation_t.future_belligerents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->future_belligerents(i), output);
  }

  // optional .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->economy(), output);
  }

  // optional int32 exhaustion_turns = 4;
  if (this->exhaustion_turns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exhaustion_turns(), output);
  }

  // optional bool accumulate_exhaustion_at_peace = 5;
  if (this->accumulate_exhaustion_at_peace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->accumulate_exhaustion_at_peace(), output);
  }

  // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
  for (unsigned int i = 0, n = this->release_conditions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->release_conditions(i), output);
  }

  // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
  for (unsigned int i = 0, n = this->war_entry_conditions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->war_entry_conditions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.scenario_t.nation_t)
}

::google::protobuf::uint8* scenario_t_nation_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_t.nation_t)
  // repeated string at_war_with = 1;
  for (int i = 0; i < this->at_war_with_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->at_war_with(i).data(), this->at_war_with(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.nation_t.at_war_with");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->at_war_with(i), target);
  }

  // repeated string future_belligerents = 2;
  for (int i = 0; i < this->future_belligerents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->future_belligerents(i).data(), this->future_belligerents(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.nation_t.future_belligerents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->future_belligerents(i), target);
  }

  // optional .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->economy(), target);
  }

  // optional int32 exhaustion_turns = 4;
  if (this->exhaustion_turns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exhaustion_turns(), target);
  }

  // optional bool accumulate_exhaustion_at_peace = 5;
  if (this->accumulate_exhaustion_at_peace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->accumulate_exhaustion_at_peace(), target);
  }

  // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
  for (unsigned int i = 0, n = this->release_conditions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->release_conditions(i), target);
  }

  // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
  for (unsigned int i = 0, n = this->war_entry_conditions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->war_entry_conditions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_t.nation_t)
  return target;
}

int scenario_t_nation_t::ByteSize() const {
  int total_size = 0;

  // optional .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->economy());
  }

  // optional int32 exhaustion_turns = 4;
  if (this->exhaustion_turns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exhaustion_turns());
  }

  // optional bool accumulate_exhaustion_at_peace = 5;
  if (this->accumulate_exhaustion_at_peace() != 0) {
    total_size += 1 + 1;
  }

  // repeated string at_war_with = 1;
  total_size += 1 * this->at_war_with_size();
  for (int i = 0; i < this->at_war_with_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->at_war_with(i));
  }

  // repeated string future_belligerents = 2;
  total_size += 1 * this->future_belligerents_size();
  for (int i = 0; i < this->future_belligerents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->future_belligerents(i));
  }

  // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
  total_size += 1 * this->release_conditions_size();
  for (int i = 0; i < this->release_conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->release_conditions(i));
  }

  // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
  total_size += 1 * this->war_entry_conditions_size();
  for (int i = 0; i < this->war_entry_conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->war_entry_conditions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scenario_t_nation_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const scenario_t_nation_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const scenario_t_nation_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scenario_t_nation_t::MergeFrom(const scenario_t_nation_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  at_war_with_.MergeFrom(from.at_war_with_);
  future_belligerents_.MergeFrom(from.future_belligerents_);
  release_conditions_.MergeFrom(from.release_conditions_);
  war_entry_conditions_.MergeFrom(from.war_entry_conditions_);
  if (from.economy() != 0) {
    set_economy(from.economy());
  }
  if (from.exhaustion_turns() != 0) {
    set_exhaustion_turns(from.exhaustion_turns());
  }
  if (from.accumulate_exhaustion_at_peace() != 0) {
    set_accumulate_exhaustion_at_peace(from.accumulate_exhaustion_at_peace());
  }
}

void scenario_t_nation_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_t_nation_t::CopyFrom(const scenario_t_nation_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_t_nation_t::IsInitialized() const {

  return true;
}

void scenario_t_nation_t::Swap(scenario_t_nation_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scenario_t_nation_t::InternalSwap(scenario_t_nation_t* other) {
  at_war_with_.UnsafeArenaSwap(&other->at_war_with_);
  future_belligerents_.UnsafeArenaSwap(&other->future_belligerents_);
  std::swap(economy_, other->economy_);
  std::swap(exhaustion_turns_, other->exhaustion_turns_);
  std::swap(accumulate_exhaustion_at_peace_, other->accumulate_exhaustion_at_peace_);
  release_conditions_.UnsafeArenaSwap(&other->release_conditions_);
  war_entry_conditions_.UnsafeArenaSwap(&other->war_entry_conditions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata scenario_t_nation_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scenario_t_nation_t_descriptor_;
  metadata.reflection = scenario_t_nation_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int scenario_t::kNameFieldNumber;
const int scenario_t::kDescriptionFieldNumber;
const int scenario_t::kStartTurnFieldNumber;
const int scenario_t::kTeamsFieldNumber;
const int scenario_t::kTeamTurnOrderFieldNumber;
const int scenario_t::kMapFieldNumber;
const int scenario_t::kOrderOfBattleFieldNumber;
const int scenario_t::kSetupOrderFieldNumber;
const int scenario_t::kNationsFieldNumber;
const int scenario_t::kTurnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

scenario_t::scenario_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_message.scenario_t)
}

void scenario_t::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  start_turn_ = const_cast< ::pb_message::turn_t*>(&::pb_message::turn_t::default_instance());
}

scenario_t::scenario_t(const scenario_t& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_t)
}

void scenario_t::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_turn_ = NULL;
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_of_battle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nations_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  nations_.SetEntryDescriptor(
      &::pb_message::scenario_t_NationsEntry_descriptor_);
}

scenario_t::~scenario_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_t)
  SharedDtor();
}

void scenario_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_of_battle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete start_turn_;
  }
}

void scenario_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scenario_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scenario_t_descriptor_;
}

const scenario_t& scenario_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fdata_2eproto();
  return *default_instance_;
}

scenario_t* scenario_t::default_instance_ = NULL;

scenario_t* scenario_t::New(::google::protobuf::Arena* arena) const {
  scenario_t* n = new scenario_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void scenario_t::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_turn_ != NULL) delete start_turn_;
  start_turn_ = NULL;
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_of_battle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teams_.Clear();
  team_turn_order_.Clear();
  setup_order_.Clear();
  nations_.Clear();
  turns_.Clear();
}

bool scenario_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_message.scenario_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_turn;
        break;
      }

      // optional .pb_message.turn_t start_turn = 3;
      case 3: {
        if (tag == 26) {
         parse_start_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_turn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_teams;
        break;
      }

      // repeated .pb_message.team_t teams = 4;
      case 4: {
        if (tag == 34) {
         parse_teams:
          DO_(input->IncrementRecursionDepth());
         parse_loop_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_teams;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_team_turn_order;
        break;
      }

      // repeated string team_turn_order = 5;
      case 5: {
        if (tag == 42) {
         parse_team_turn_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_team_turn_order()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_turn_order(this->team_turn_order_size() - 1).data(),
            this->team_turn_order(this->team_turn_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.team_turn_order"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_turn_order;
        if (input->ExpectTag(50)) goto parse_map;
        break;
      }

      // optional string map = 6;
      case 6: {
        if (tag == 50) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.map"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_order_of_battle;
        break;
      }

      // optional string order_of_battle = 7;
      case 7: {
        if (tag == 58) {
         parse_order_of_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_of_battle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_of_battle().data(), this->order_of_battle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.order_of_battle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_setup_order;
        break;
      }

      // repeated string setup_order = 8;
      case 8: {
        if (tag == 66) {
         parse_setup_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_setup_order()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->setup_order(this->setup_order_size() - 1).data(),
            this->setup_order(this->setup_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.setup_order"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_setup_order;
        if (input->ExpectTag(74)) goto parse_nations;
        break;
      }

      // map<string, .pb_message.scenario_t.nation_t> nations = 9;
      case 9: {
        if (tag == 74) {
         parse_nations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nations:
          ::google::protobuf::scoped_ptr<scenario_t_NationsEntry> entry(nations_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_nations())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb_message.scenario_t.NationsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_nations;
        if (input->ExpectTag(82)) goto parse_loop_turns;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pb_message.scenario_turn_t turns = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_turns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_turns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_turns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_message.scenario_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_message.scenario_t)
  return false;
#undef DO_
}

void scenario_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_message.scenario_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional .pb_message.turn_t start_turn = 3;
  if (this->has_start_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_turn_, output);
  }

  // repeated .pb_message.team_t teams = 4;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->teams(i), output);
  }

  // repeated string team_turn_order = 5;
  for (int i = 0; i < this->team_turn_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_turn_order(i).data(), this->team_turn_order(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.team_turn_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->team_turn_order(i), output);
  }

  // optional string map = 6;
  if (this->map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->map(), output);
  }

  // optional string order_of_battle = 7;
  if (this->order_of_battle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_of_battle().data(), this->order_of_battle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.order_of_battle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->order_of_battle(), output);
  }

  // repeated string setup_order = 8;
  for (int i = 0; i < this->setup_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setup_order(i).data(), this->setup_order(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.setup_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->setup_order(i), output);
  }

  // map<string, .pb_message.scenario_t.nation_t> nations = 9;
  {
    ::google::protobuf::scoped_ptr<scenario_t_NationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::scenario_t_nation_t >::const_iterator
        it = this->nations().begin();
        it != this->nations().end(); ++it) {
      entry.reset(nations_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          9, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.scenario_t.NationsEntry.key");
    }
  }

  // repeated .pb_message.scenario_turn_t turns = 10;
  for (unsigned int i = 0, n = this->turns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->turns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pb_message.scenario_t)
}

::google::protobuf::uint8* scenario_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_t)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional .pb_message.turn_t start_turn = 3;
  if (this->has_start_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->start_turn_, target);
  }

  // repeated .pb_message.team_t teams = 4;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->teams(i), target);
  }

  // repeated string team_turn_order = 5;
  for (int i = 0; i < this->team_turn_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_turn_order(i).data(), this->team_turn_order(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.team_turn_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->team_turn_order(i), target);
  }

  // optional string map = 6;
  if (this->map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->map(), target);
  }

  // optional string order_of_battle = 7;
  if (this->order_of_battle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_of_battle().data(), this->order_of_battle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.order_of_battle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order_of_battle(), target);
  }

  // repeated string setup_order = 8;
  for (int i = 0; i < this->setup_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setup_order(i).data(), this->setup_order(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.setup_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->setup_order(i), target);
  }

  // map<string, .pb_message.scenario_t.nation_t> nations = 9;
  {
    ::google::protobuf::scoped_ptr<scenario_t_NationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::scenario_t_nation_t >::const_iterator
        it = this->nations().begin();
        it != this->nations().end(); ++it) {
      entry.reset(nations_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              9, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "pb_message.scenario_t.NationsEntry.key");
    }
  }

  // repeated .pb_message.scenario_turn_t turns = 10;
  for (unsigned int i = 0, n = this->turns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->turns(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_t)
  return target;
}

int scenario_t::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional .pb_message.turn_t start_turn = 3;
  if (this->has_start_turn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_turn_);
  }

  // optional string map = 6;
  if (this->map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map());
  }

  // optional string order_of_battle = 7;
  if (this->order_of_battle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_of_battle());
  }

  // repeated .pb_message.team_t teams = 4;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated string team_turn_order = 5;
  total_size += 1 * this->team_turn_order_size();
  for (int i = 0; i < this->team_turn_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->team_turn_order(i));
  }

  // repeated string setup_order = 8;
  total_size += 1 * this->setup_order_size();
  for (int i = 0; i < this->setup_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->setup_order(i));
  }

  // map<string, .pb_message.scenario_t.nation_t> nations = 9;
  total_size += 1 * this->nations_size();
  {
    ::google::protobuf::scoped_ptr<scenario_t_NationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::pb_message::scenario_t_nation_t >::const_iterator
        it = this->nations().begin();
        it != this->nations().end(); ++it) {
      entry.reset(nations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .pb_message.scenario_turn_t turns = 10;
  total_size += 1 * this->turns_size();
  for (int i = 0; i < this->turns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turns(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scenario_t::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const scenario_t* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const scenario_t>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scenario_t::MergeFrom(const scenario_t& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  teams_.MergeFrom(from.teams_);
  team_turn_order_.MergeFrom(from.team_turn_order_);
  setup_order_.MergeFrom(from.setup_order_);
  nations_.MergeFrom(from.nations_);
  turns_.MergeFrom(from.turns_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_start_turn()) {
    mutable_start_turn()->::pb_message::turn_t::MergeFrom(from.start_turn());
  }
  if (from.map().size() > 0) {

    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  if (from.order_of_battle().size() > 0) {

    order_of_battle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_of_battle_);
  }
}

void scenario_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_t::CopyFrom(const scenario_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_t::IsInitialized() const {

  return true;
}

void scenario_t::Swap(scenario_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void scenario_t::InternalSwap(scenario_t* other) {
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  std::swap(start_turn_, other->start_turn_);
  teams_.UnsafeArenaSwap(&other->teams_);
  team_turn_order_.UnsafeArenaSwap(&other->team_turn_order_);
  map_.Swap(&other->map_);
  order_of_battle_.Swap(&other->order_of_battle_);
  setup_order_.UnsafeArenaSwap(&other->setup_order_);
  nations_.Swap(&other->nations_);
  turns_.UnsafeArenaSwap(&other->turns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata scenario_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scenario_t_descriptor_;
  metadata.reflection = scenario_t_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// scenario_t_nation_t

// repeated string at_war_with = 1;
int scenario_t_nation_t::at_war_with_size() const {
  return at_war_with_.size();
}
void scenario_t_nation_t::clear_at_war_with() {
  at_war_with_.Clear();
}
 const ::std::string& scenario_t_nation_t::at_war_with(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.at_war_with)
  return at_war_with_.Get(index);
}
 ::std::string* scenario_t_nation_t::mutable_at_war_with(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.at_war_with)
  return at_war_with_.Mutable(index);
}
 void scenario_t_nation_t::set_at_war_with(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.at_war_with)
  at_war_with_.Mutable(index)->assign(value);
}
 void scenario_t_nation_t::set_at_war_with(int index, const char* value) {
  at_war_with_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.nation_t.at_war_with)
}
 void scenario_t_nation_t::set_at_war_with(int index, const char* value, size_t size) {
  at_war_with_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.nation_t.at_war_with)
}
 ::std::string* scenario_t_nation_t::add_at_war_with() {
  return at_war_with_.Add();
}
 void scenario_t_nation_t::add_at_war_with(const ::std::string& value) {
  at_war_with_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.at_war_with)
}
 void scenario_t_nation_t::add_at_war_with(const char* value) {
  at_war_with_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.nation_t.at_war_with)
}
 void scenario_t_nation_t::add_at_war_with(const char* value, size_t size) {
  at_war_with_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.nation_t.at_war_with)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
scenario_t_nation_t::at_war_with() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.at_war_with)
  return at_war_with_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
scenario_t_nation_t::mutable_at_war_with() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.at_war_with)
  return &at_war_with_;
}

// repeated string future_belligerents = 2;
int scenario_t_nation_t::future_belligerents_size() const {
  return future_belligerents_.size();
}
void scenario_t_nation_t::clear_future_belligerents() {
  future_belligerents_.Clear();
}
 const ::std::string& scenario_t_nation_t::future_belligerents(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.future_belligerents)
  return future_belligerents_.Get(index);
}
 ::std::string* scenario_t_nation_t::mutable_future_belligerents(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.future_belligerents)
  return future_belligerents_.Mutable(index);
}
 void scenario_t_nation_t::set_future_belligerents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.future_belligerents)
  future_belligerents_.Mutable(index)->assign(value);
}
 void scenario_t_nation_t::set_future_belligerents(int index, const char* value) {
  future_belligerents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.nation_t.future_belligerents)
}
 void scenario_t_nation_t::set_future_belligerents(int index, const char* value, size_t size) {
  future_belligerents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.nation_t.future_belligerents)
}
 ::std::string* scenario_t_nation_t::add_future_belligerents() {
  return future_belligerents_.Add();
}
 void scenario_t_nation_t::add_future_belligerents(const ::std::string& value) {
  future_belligerents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.future_belligerents)
}
 void scenario_t_nation_t::add_future_belligerents(const char* value) {
  future_belligerents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.nation_t.future_belligerents)
}
 void scenario_t_nation_t::add_future_belligerents(const char* value, size_t size) {
  future_belligerents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.nation_t.future_belligerents)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
scenario_t_nation_t::future_belligerents() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.future_belligerents)
  return future_belligerents_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
scenario_t_nation_t::mutable_future_belligerents() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.future_belligerents)
  return &future_belligerents_;
}

// optional .pb_message.war_footing_t economy = 3;
void scenario_t_nation_t::clear_economy() {
  economy_ = 0;
}
 ::pb_message::war_footing_t scenario_t_nation_t::economy() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.economy)
  return static_cast< ::pb_message::war_footing_t >(economy_);
}
 void scenario_t_nation_t::set_economy(::pb_message::war_footing_t value) {
  
  economy_ = value;
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.economy)
}

// optional int32 exhaustion_turns = 4;
void scenario_t_nation_t::clear_exhaustion_turns() {
  exhaustion_turns_ = 0;
}
 ::google::protobuf::int32 scenario_t_nation_t::exhaustion_turns() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.exhaustion_turns)
  return exhaustion_turns_;
}
 void scenario_t_nation_t::set_exhaustion_turns(::google::protobuf::int32 value) {
  
  exhaustion_turns_ = value;
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.exhaustion_turns)
}

// optional bool accumulate_exhaustion_at_peace = 5;
void scenario_t_nation_t::clear_accumulate_exhaustion_at_peace() {
  accumulate_exhaustion_at_peace_ = false;
}
 bool scenario_t_nation_t::accumulate_exhaustion_at_peace() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.accumulate_exhaustion_at_peace)
  return accumulate_exhaustion_at_peace_;
}
 void scenario_t_nation_t::set_accumulate_exhaustion_at_peace(bool value) {
  
  accumulate_exhaustion_at_peace_ = value;
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.accumulate_exhaustion_at_peace)
}

// repeated .pb_message.fleet_release_condition_t release_conditions = 6;
int scenario_t_nation_t::release_conditions_size() const {
  return release_conditions_.size();
}
void scenario_t_nation_t::clear_release_conditions() {
  release_conditions_.Clear();
}
const ::pb_message::fleet_release_condition_t& scenario_t_nation_t::release_conditions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.release_conditions)
  return release_conditions_.Get(index);
}
::pb_message::fleet_release_condition_t* scenario_t_nation_t::mutable_release_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.release_conditions)
  return release_conditions_.Mutable(index);
}
::pb_message::fleet_release_condition_t* scenario_t_nation_t::add_release_conditions() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.release_conditions)
  return release_conditions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::fleet_release_condition_t >*
scenario_t_nation_t::mutable_release_conditions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.release_conditions)
  return &release_conditions_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::fleet_release_condition_t >&
scenario_t_nation_t::release_conditions() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.release_conditions)
  return release_conditions_;
}

// repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
int scenario_t_nation_t::war_entry_conditions_size() const {
  return war_entry_conditions_.size();
}
void scenario_t_nation_t::clear_war_entry_conditions() {
  war_entry_conditions_.Clear();
}
const ::pb_message::war_entry_condition_t& scenario_t_nation_t::war_entry_conditions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.war_entry_conditions)
  return war_entry_conditions_.Get(index);
}
::pb_message::war_entry_condition_t* scenario_t_nation_t::mutable_war_entry_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.war_entry_conditions)
  return war_entry_conditions_.Mutable(index);
}
::pb_message::war_entry_condition_t* scenario_t_nation_t::add_war_entry_conditions() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.war_entry_conditions)
  return war_entry_conditions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::war_entry_condition_t >*
scenario_t_nation_t::mutable_war_entry_conditions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.war_entry_conditions)
  return &war_entry_conditions_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::war_entry_condition_t >&
scenario_t_nation_t::war_entry_conditions() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.war_entry_conditions)
  return war_entry_conditions_;
}

// -------------------------------------------------------------------

// scenario_t

// optional string name = 1;
void scenario_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& scenario_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.name)
}
 void scenario_t::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.name)
}
 void scenario_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.name)
}
 ::std::string* scenario_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* scenario_t::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.name)
}

// optional string description = 2;
void scenario_t::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& scenario_t::description() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.description)
}
 void scenario_t::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.description)
}
 void scenario_t::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.description)
}
 ::std::string* scenario_t::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* scenario_t::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.description)
}

// optional .pb_message.turn_t start_turn = 3;
bool scenario_t::has_start_turn() const {
  return !_is_default_instance_ && start_turn_ != NULL;
}
void scenario_t::clear_start_turn() {
  if (GetArenaNoVirtual() == NULL && start_turn_ != NULL) delete start_turn_;
  start_turn_ = NULL;
}
const ::pb_message::turn_t& scenario_t::start_turn() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.start_turn)
  return start_turn_ != NULL ? *start_turn_ : *default_instance_->start_turn_;
}
::pb_message::turn_t* scenario_t::mutable_start_turn() {
  
  if (start_turn_ == NULL) {
    start_turn_ = new ::pb_message::turn_t;
  }
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.start_turn)
  return start_turn_;
}
::pb_message::turn_t* scenario_t::release_start_turn() {
  
  ::pb_message::turn_t* temp = start_turn_;
  start_turn_ = NULL;
  return temp;
}
void scenario_t::set_allocated_start_turn(::pb_message::turn_t* start_turn) {
  delete start_turn_;
  start_turn_ = start_turn;
  if (start_turn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.start_turn)
}

// repeated .pb_message.team_t teams = 4;
int scenario_t::teams_size() const {
  return teams_.size();
}
void scenario_t::clear_teams() {
  teams_.Clear();
}
const ::pb_message::team_t& scenario_t::teams(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.teams)
  return teams_.Get(index);
}
::pb_message::team_t* scenario_t::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.teams)
  return teams_.Mutable(index);
}
::pb_message::team_t* scenario_t::add_teams() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::team_t >*
scenario_t::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::team_t >&
scenario_t::teams() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.teams)
  return teams_;
}

// repeated string team_turn_order = 5;
int scenario_t::team_turn_order_size() const {
  return team_turn_order_.size();
}
void scenario_t::clear_team_turn_order() {
  team_turn_order_.Clear();
}
 const ::std::string& scenario_t::team_turn_order(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.team_turn_order)
  return team_turn_order_.Get(index);
}
 ::std::string* scenario_t::mutable_team_turn_order(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.team_turn_order)
  return team_turn_order_.Mutable(index);
}
 void scenario_t::set_team_turn_order(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.team_turn_order)
  team_turn_order_.Mutable(index)->assign(value);
}
 void scenario_t::set_team_turn_order(int index, const char* value) {
  team_turn_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.team_turn_order)
}
 void scenario_t::set_team_turn_order(int index, const char* value, size_t size) {
  team_turn_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.team_turn_order)
}
 ::std::string* scenario_t::add_team_turn_order() {
  return team_turn_order_.Add();
}
 void scenario_t::add_team_turn_order(const ::std::string& value) {
  team_turn_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.team_turn_order)
}
 void scenario_t::add_team_turn_order(const char* value) {
  team_turn_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.team_turn_order)
}
 void scenario_t::add_team_turn_order(const char* value, size_t size) {
  team_turn_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.team_turn_order)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
scenario_t::team_turn_order() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.team_turn_order)
  return team_turn_order_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
scenario_t::mutable_team_turn_order() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.team_turn_order)
  return &team_turn_order_;
}

// optional string map = 6;
void scenario_t::clear_map() {
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& scenario_t::map() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.map)
  return map_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_map(const ::std::string& value) {
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.map)
}
 void scenario_t::set_map(const char* value) {
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.map)
}
 void scenario_t::set_map(const char* value, size_t size) {
  
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.map)
}
 ::std::string* scenario_t::mutable_map() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.map)
  return map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* scenario_t::release_map() {
  
  return map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_allocated_map(::std::string* map) {
  if (map != NULL) {
    
  } else {
    
  }
  map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.map)
}

// optional string order_of_battle = 7;
void scenario_t::clear_order_of_battle() {
  order_of_battle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& scenario_t::order_of_battle() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.order_of_battle)
  return order_of_battle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_order_of_battle(const ::std::string& value) {
  
  order_of_battle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.order_of_battle)
}
 void scenario_t::set_order_of_battle(const char* value) {
  
  order_of_battle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.order_of_battle)
}
 void scenario_t::set_order_of_battle(const char* value, size_t size) {
  
  order_of_battle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.order_of_battle)
}
 ::std::string* scenario_t::mutable_order_of_battle() {
  
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.order_of_battle)
  return order_of_battle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* scenario_t::release_order_of_battle() {
  
  return order_of_battle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void scenario_t::set_allocated_order_of_battle(::std::string* order_of_battle) {
  if (order_of_battle != NULL) {
    
  } else {
    
  }
  order_of_battle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_of_battle);
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.order_of_battle)
}

// repeated string setup_order = 8;
int scenario_t::setup_order_size() const {
  return setup_order_.size();
}
void scenario_t::clear_setup_order() {
  setup_order_.Clear();
}
 const ::std::string& scenario_t::setup_order(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.setup_order)
  return setup_order_.Get(index);
}
 ::std::string* scenario_t::mutable_setup_order(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.setup_order)
  return setup_order_.Mutable(index);
}
 void scenario_t::set_setup_order(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.setup_order)
  setup_order_.Mutable(index)->assign(value);
}
 void scenario_t::set_setup_order(int index, const char* value) {
  setup_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.setup_order)
}
 void scenario_t::set_setup_order(int index, const char* value, size_t size) {
  setup_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.setup_order)
}
 ::std::string* scenario_t::add_setup_order() {
  return setup_order_.Add();
}
 void scenario_t::add_setup_order(const ::std::string& value) {
  setup_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.setup_order)
}
 void scenario_t::add_setup_order(const char* value) {
  setup_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.setup_order)
}
 void scenario_t::add_setup_order(const char* value, size_t size) {
  setup_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.setup_order)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
scenario_t::setup_order() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.setup_order)
  return setup_order_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
scenario_t::mutable_setup_order() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.setup_order)
  return &setup_order_;
}

// map<string, .pb_message.scenario_t.nation_t> nations = 9;
int scenario_t::nations_size() const {
  return nations_.size();
}
void scenario_t::clear_nations() {
  nations_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::pb_message::scenario_t_nation_t >&
scenario_t::nations() const {
  // @@protoc_insertion_point(field_map:pb_message.scenario_t.nations)
  return nations_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::pb_message::scenario_t_nation_t >*
scenario_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.scenario_t.nations)
  return nations_.MutableMap();
}

// repeated .pb_message.scenario_turn_t turns = 10;
int scenario_t::turns_size() const {
  return turns_.size();
}
void scenario_t::clear_turns() {
  turns_.Clear();
}
const ::pb_message::scenario_turn_t& scenario_t::turns(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.turns)
  return turns_.Get(index);
}
::pb_message::scenario_turn_t* scenario_t::mutable_turns(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.turns)
  return turns_.Mutable(index);
}
::pb_message::scenario_turn_t* scenario_t::add_turns() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.turns)
  return turns_.Add();
}
::google::protobuf::RepeatedPtrField< ::pb_message::scenario_turn_t >*
scenario_t::mutable_turns() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.turns)
  return &turns_;
}
const ::google::protobuf::RepeatedPtrField< ::pb_message::scenario_turn_t >&
scenario_t::turns() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.turns)
  return turns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_message

// @@protoc_insertion_point(global_scope)
