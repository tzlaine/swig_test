// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_types.proto

#include "base_types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb_message {
class turn_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<turn_t> _instance;
} _turn_t_default_instance_;
class hex_coord_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_coord_t> _instance;
} _hex_coord_t_default_instance_;
}  // namespace pb_message
static void InitDefaultsscc_info_hex_coord_t_base_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_hex_coord_t_default_instance_;
    new (ptr) ::pb_message::hex_coord_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::hex_coord_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hex_coord_t_base_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_hex_coord_t_base_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_turn_t_base_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_turn_t_default_instance_;
    new (ptr) ::pb_message::turn_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::turn_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_turn_t_base_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_turn_t_base_5ftypes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_5ftypes_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_base_5ftypes_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_5ftypes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_5ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::turn_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::turn_t, year_),
  PROTOBUF_FIELD_OFFSET(::pb_message::turn_t, season_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::hex_coord_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::hex_coord_t, x_),
  PROTOBUF_FIELD_OFFSET(::pb_message::hex_coord_t, y_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb_message::turn_t)},
  { 7, -1, sizeof(::pb_message::hex_coord_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_turn_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_hex_coord_t_default_instance_),
};

const char descriptor_table_protodef_base_5ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020base_types.proto\022\npb_message\"<\n\006turn_t"
  "\022\014\n\004year\030\001 \001(\005\022$\n\006season\030\002 \001(\0162\024.pb_mess"
  "age.season_t\"#\n\013hex_coord_t\022\t\n\001x\030\001 \001(\005\022\t"
  "\n\001y\030\002 \001(\005* \n\010season_t\022\n\n\006spring\020\000\022\010\n\004fal"
  "l\020\001*\272\002\n\rtug_mission_t\022\016\n\nno_mission\020\000\022\014\n"
  "\010A_battle\020\001\022\r\n\tB_carrier\020\002\022\021\n\rC_mobile_b"
  "ase\020\003\022\014\n\010D_supply\020\004\022\014\n\010E_repair\020\005\022\r\n\tF_t"
  "ow_frd\020\006\022\t\n\005G_pft\020\007\022\027\n\023H_economic_transf"
  "er\020\010\022\016\n\nI_crippled\020\t\022\022\n\016J1_base_repair\020\n"
  "\022\023\n\017J2_base_upgrade\020\013\022\024\n\020K1_pdu_transpor"
  "t\020\014\022\022\n\016K2_pdu_upgrade\020\r\022\013\n\007L_drone\020\016\022\r\n\t"
  "M_vanilla\020\017\022\033\n\027O_hydran_special_supply\020\020"
  "*v\n\016carrier_type_t\022\021\n\rnot_a_carrier\020\000\022\027\n"
  "\023single_ship_carrier\020\001\022\021\n\rlight_carrier\020"
  "\002\022\022\n\016medium_carrier\020\003\022\021\n\rheavy_carrier\020\004"
  "*F\n\rescort_type_t\022\021\n\rnot_an_escort\020\000\022\020\n\014"
  "light_escort\020\001\022\020\n\014heavy_escort\020\002*4\n\rwar_"
  "footing_t\022\007\n\003war\020\000\022\017\n\013limited_war\020\001\022\t\n\005p"
  "eace\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_5ftypes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_base_5ftypes_2eproto_sccs[2] = {
  &scc_info_hex_coord_t_base_5ftypes_2eproto.base,
  &scc_info_turn_t_base_5ftypes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_5ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5ftypes_2eproto = {
  false, false, descriptor_table_protodef_base_5ftypes_2eproto, "base_types.proto", 734,
  &descriptor_table_base_5ftypes_2eproto_once, descriptor_table_base_5ftypes_2eproto_sccs, descriptor_table_base_5ftypes_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_base_5ftypes_2eproto::offsets,
  file_level_metadata_base_5ftypes_2eproto, 2, file_level_enum_descriptors_base_5ftypes_2eproto, file_level_service_descriptors_base_5ftypes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_5ftypes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_base_5ftypes_2eproto)), true);
namespace pb_message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* season_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5ftypes_2eproto);
  return file_level_enum_descriptors_base_5ftypes_2eproto[0];
}
bool season_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* tug_mission_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5ftypes_2eproto);
  return file_level_enum_descriptors_base_5ftypes_2eproto[1];
}
bool tug_mission_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* carrier_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5ftypes_2eproto);
  return file_level_enum_descriptors_base_5ftypes_2eproto[2];
}
bool carrier_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* escort_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5ftypes_2eproto);
  return file_level_enum_descriptors_base_5ftypes_2eproto[3];
}
bool escort_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* war_footing_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5ftypes_2eproto);
  return file_level_enum_descriptors_base_5ftypes_2eproto[4];
}
bool war_footing_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void turn_t::InitAsDefaultInstance() {
}
class turn_t::_Internal {
 public:
};

turn_t::turn_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.turn_t)
}
turn_t::turn_t(const turn_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&year_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:pb_message.turn_t)
}

void turn_t::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&year_)) + sizeof(season_));
}

turn_t::~turn_t() {
  // @@protoc_insertion_point(destructor:pb_message.turn_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void turn_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void turn_t::ArenaDtor(void* object) {
  turn_t* _this = reinterpret_cast< turn_t* >(object);
  (void)_this;
}
void turn_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void turn_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const turn_t& turn_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_turn_t_base_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void turn_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.turn_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&year_)) + sizeof(season_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* turn_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.season_t season = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_season(static_cast<::pb_message::season_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* turn_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.turn_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // .pb_message.season_t season = 2;
  if (this->season() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_season(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.turn_t)
  return target;
}

size_t turn_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.turn_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // .pb_message.season_t season = 2;
  if (this->season() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_season());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void turn_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.turn_t)
  GOOGLE_DCHECK_NE(&from, this);
  const turn_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<turn_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.turn_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.turn_t)
    MergeFrom(*source);
  }
}

void turn_t::MergeFrom(const turn_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.turn_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.season() != 0) {
    _internal_set_season(from._internal_season());
  }
}

void turn_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.turn_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void turn_t::CopyFrom(const turn_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.turn_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool turn_t::IsInitialized() const {
  return true;
}

void turn_t::InternalSwap(turn_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(turn_t, season_)
      + sizeof(turn_t::season_)
      - PROTOBUF_FIELD_OFFSET(turn_t, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata turn_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void hex_coord_t::InitAsDefaultInstance() {
}
class hex_coord_t::_Internal {
 public:
};

hex_coord_t::hex_coord_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.hex_coord_t)
}
hex_coord_t::hex_coord_t(const hex_coord_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:pb_message.hex_coord_t)
}

void hex_coord_t::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

hex_coord_t::~hex_coord_t() {
  // @@protoc_insertion_point(destructor:pb_message.hex_coord_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hex_coord_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void hex_coord_t::ArenaDtor(void* object) {
  hex_coord_t* _this = reinterpret_cast< hex_coord_t* >(object);
  (void)_this;
}
void hex_coord_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hex_coord_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hex_coord_t& hex_coord_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hex_coord_t_base_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void hex_coord_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.hex_coord_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hex_coord_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hex_coord_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.hex_coord_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.hex_coord_t)
  return target;
}

size_t hex_coord_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.hex_coord_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hex_coord_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.hex_coord_t)
  GOOGLE_DCHECK_NE(&from, this);
  const hex_coord_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hex_coord_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.hex_coord_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.hex_coord_t)
    MergeFrom(*source);
  }
}

void hex_coord_t::MergeFrom(const hex_coord_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.hex_coord_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void hex_coord_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.hex_coord_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_coord_t::CopyFrom(const hex_coord_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.hex_coord_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_coord_t::IsInitialized() const {
  return true;
}

void hex_coord_t::InternalSwap(hex_coord_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hex_coord_t, y_)
      + sizeof(hex_coord_t::y_)
      - PROTOBUF_FIELD_OFFSET(hex_coord_t, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hex_coord_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_message::turn_t* Arena::CreateMaybeMessage< ::pb_message::turn_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::turn_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::hex_coord_t* Arena::CreateMaybeMessage< ::pb_message::hex_coord_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::hex_coord_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
