// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_visual_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_visual_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_visual_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_visual_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_visual_5fconfig_2eproto;
namespace pb_message {
namespace visual_config {
class color_t;
class color_tDefaultTypeInternal;
extern color_tDefaultTypeInternal _color_t_default_instance_;
class hex_map_t;
class hex_map_tDefaultTypeInternal;
extern hex_map_tDefaultTypeInternal _hex_map_t_default_instance_;
class hex_map_t_PrimaryColorsEntry_DoNotUse;
class hex_map_t_PrimaryColorsEntry_DoNotUseDefaultTypeInternal;
extern hex_map_t_PrimaryColorsEntry_DoNotUseDefaultTypeInternal _hex_map_t_PrimaryColorsEntry_DoNotUse_default_instance_;
class hex_map_t_SecondaryColorsEntry_DoNotUse;
class hex_map_t_SecondaryColorsEntry_DoNotUseDefaultTypeInternal;
extern hex_map_t_SecondaryColorsEntry_DoNotUseDefaultTypeInternal _hex_map_t_SecondaryColorsEntry_DoNotUse_default_instance_;
}  // namespace visual_config
}  // namespace pb_message
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_message::visual_config::color_t* Arena::CreateMaybeMessage<::pb_message::visual_config::color_t>(Arena*);
template<> ::pb_message::visual_config::hex_map_t* Arena::CreateMaybeMessage<::pb_message::visual_config::hex_map_t>(Arena*);
template<> ::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse>(Arena*);
template<> ::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_message {
namespace visual_config {

// ===================================================================

class color_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.visual_config.color_t) */ {
 public:
  inline color_t() : color_t(nullptr) {}
  virtual ~color_t();

  color_t(const color_t& from);
  color_t(color_t&& from) noexcept
    : color_t() {
    *this = ::std::move(from);
  }

  inline color_t& operator=(const color_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline color_t& operator=(color_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const color_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const color_t* internal_default_instance() {
    return reinterpret_cast<const color_t*>(
               &_color_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(color_t& a, color_t& b) {
    a.Swap(&b);
  }
  inline void Swap(color_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(color_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline color_t* New() const final {
    return CreateMaybeMessage<color_t>(nullptr);
  }

  color_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<color_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const color_t& from);
  void MergeFrom(const color_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(color_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.visual_config.color_t";
  }
  protected:
  explicit color_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_visual_5fconfig_2eproto);
    return ::descriptor_table_visual_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // int32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.visual_config.color_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_visual_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class hex_map_t_PrimaryColorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<hex_map_t_PrimaryColorsEntry_DoNotUse, 
    std::string, ::pb_message::visual_config::color_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<hex_map_t_PrimaryColorsEntry_DoNotUse, 
    std::string, ::pb_message::visual_config::color_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  hex_map_t_PrimaryColorsEntry_DoNotUse();
  explicit hex_map_t_PrimaryColorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const hex_map_t_PrimaryColorsEntry_DoNotUse& other);
  static const hex_map_t_PrimaryColorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const hex_map_t_PrimaryColorsEntry_DoNotUse*>(&_hex_map_t_PrimaryColorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.visual_config.hex_map_t.PrimaryColorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_visual_5fconfig_2eproto);
    return ::descriptor_table_visual_5fconfig_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class hex_map_t_SecondaryColorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<hex_map_t_SecondaryColorsEntry_DoNotUse, 
    std::string, ::pb_message::visual_config::color_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<hex_map_t_SecondaryColorsEntry_DoNotUse, 
    std::string, ::pb_message::visual_config::color_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  hex_map_t_SecondaryColorsEntry_DoNotUse();
  explicit hex_map_t_SecondaryColorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const hex_map_t_SecondaryColorsEntry_DoNotUse& other);
  static const hex_map_t_SecondaryColorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const hex_map_t_SecondaryColorsEntry_DoNotUse*>(&_hex_map_t_SecondaryColorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.visual_config.hex_map_t.SecondaryColorsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_visual_5fconfig_2eproto);
    return ::descriptor_table_visual_5fconfig_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class hex_map_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.visual_config.hex_map_t) */ {
 public:
  inline hex_map_t() : hex_map_t(nullptr) {}
  virtual ~hex_map_t();

  hex_map_t(const hex_map_t& from);
  hex_map_t(hex_map_t&& from) noexcept
    : hex_map_t() {
    *this = ::std::move(from);
  }

  inline hex_map_t& operator=(const hex_map_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline hex_map_t& operator=(hex_map_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hex_map_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hex_map_t* internal_default_instance() {
    return reinterpret_cast<const hex_map_t*>(
               &_hex_map_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(hex_map_t& a, hex_map_t& b) {
    a.Swap(&b);
  }
  inline void Swap(hex_map_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hex_map_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hex_map_t* New() const final {
    return CreateMaybeMessage<hex_map_t>(nullptr);
  }

  hex_map_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hex_map_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hex_map_t& from);
  void MergeFrom(const hex_map_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hex_map_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.visual_config.hex_map_t";
  }
  protected:
  explicit hex_map_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_visual_5fconfig_2eproto);
    return ::descriptor_table_visual_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryColorsFieldNumber = 1,
    kSecondaryColorsFieldNumber = 2,
    kNationalBorderThicknessFieldNumber = 3,
    kProvinceBorderThicknessFieldNumber = 4,
    kPlanetStarThicknessFieldNumber = 5,
    kMinorPlanetScaleFieldNumber = 6,
    kMajorPlanetScaleFieldNumber = 7,
    kStarScaleFieldNumber = 8,
    kMbScaleFieldNumber = 9,
    kBatsScaleFieldNumber = 10,
    kSbScaleFieldNumber = 11,
    kOffmapZFieldNumber = 12,
    kOffmapBorderThicknessFieldNumber = 13,
    kOffmapLabelSizeFieldNumber = 14,
    kOffmapLeftRightThicknessFieldNumber = 15,
    kOffmapTopBottomThicknessFieldNumber = 16,
  };
  // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
  int primary_colors_size() const;
  private:
  int _internal_primary_colors_size() const;
  public:
  void clear_primary_colors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
      _internal_primary_colors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
      _internal_mutable_primary_colors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
      primary_colors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
      mutable_primary_colors();

  // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
  int secondary_colors_size() const;
  private:
  int _internal_secondary_colors_size() const;
  public:
  void clear_secondary_colors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
      _internal_secondary_colors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
      _internal_mutable_secondary_colors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
      secondary_colors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
      mutable_secondary_colors();

  // float national_border_thickness = 3;
  void clear_national_border_thickness();
  float national_border_thickness() const;
  void set_national_border_thickness(float value);
  private:
  float _internal_national_border_thickness() const;
  void _internal_set_national_border_thickness(float value);
  public:

  // float province_border_thickness = 4;
  void clear_province_border_thickness();
  float province_border_thickness() const;
  void set_province_border_thickness(float value);
  private:
  float _internal_province_border_thickness() const;
  void _internal_set_province_border_thickness(float value);
  public:

  // float planet_star_thickness = 5;
  void clear_planet_star_thickness();
  float planet_star_thickness() const;
  void set_planet_star_thickness(float value);
  private:
  float _internal_planet_star_thickness() const;
  void _internal_set_planet_star_thickness(float value);
  public:

  // float minor_planet_scale = 6;
  void clear_minor_planet_scale();
  float minor_planet_scale() const;
  void set_minor_planet_scale(float value);
  private:
  float _internal_minor_planet_scale() const;
  void _internal_set_minor_planet_scale(float value);
  public:

  // float major_planet_scale = 7;
  void clear_major_planet_scale();
  float major_planet_scale() const;
  void set_major_planet_scale(float value);
  private:
  float _internal_major_planet_scale() const;
  void _internal_set_major_planet_scale(float value);
  public:

  // float star_scale = 8;
  void clear_star_scale();
  float star_scale() const;
  void set_star_scale(float value);
  private:
  float _internal_star_scale() const;
  void _internal_set_star_scale(float value);
  public:

  // float mb_scale = 9;
  void clear_mb_scale();
  float mb_scale() const;
  void set_mb_scale(float value);
  private:
  float _internal_mb_scale() const;
  void _internal_set_mb_scale(float value);
  public:

  // float bats_scale = 10;
  void clear_bats_scale();
  float bats_scale() const;
  void set_bats_scale(float value);
  private:
  float _internal_bats_scale() const;
  void _internal_set_bats_scale(float value);
  public:

  // float sb_scale = 11;
  void clear_sb_scale();
  float sb_scale() const;
  void set_sb_scale(float value);
  private:
  float _internal_sb_scale() const;
  void _internal_set_sb_scale(float value);
  public:

  // float offmap_z = 12;
  void clear_offmap_z();
  float offmap_z() const;
  void set_offmap_z(float value);
  private:
  float _internal_offmap_z() const;
  void _internal_set_offmap_z(float value);
  public:

  // float offmap_border_thickness = 13;
  void clear_offmap_border_thickness();
  float offmap_border_thickness() const;
  void set_offmap_border_thickness(float value);
  private:
  float _internal_offmap_border_thickness() const;
  void _internal_set_offmap_border_thickness(float value);
  public:

  // float offmap_label_size = 14;
  void clear_offmap_label_size();
  float offmap_label_size() const;
  void set_offmap_label_size(float value);
  private:
  float _internal_offmap_label_size() const;
  void _internal_set_offmap_label_size(float value);
  public:

  // float offmap_left_right_thickness = 15;
  void clear_offmap_left_right_thickness();
  float offmap_left_right_thickness() const;
  void set_offmap_left_right_thickness(float value);
  private:
  float _internal_offmap_left_right_thickness() const;
  void _internal_set_offmap_left_right_thickness(float value);
  public:

  // float offmap_top_bottom_thickness = 16;
  void clear_offmap_top_bottom_thickness();
  float offmap_top_bottom_thickness() const;
  void set_offmap_top_bottom_thickness(float value);
  private:
  float _internal_offmap_top_bottom_thickness() const;
  void _internal_set_offmap_top_bottom_thickness(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.visual_config.hex_map_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      hex_map_t_PrimaryColorsEntry_DoNotUse,
      std::string, ::pb_message::visual_config::color_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > primary_colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      hex_map_t_SecondaryColorsEntry_DoNotUse,
      std::string, ::pb_message::visual_config::color_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > secondary_colors_;
  float national_border_thickness_;
  float province_border_thickness_;
  float planet_star_thickness_;
  float minor_planet_scale_;
  float major_planet_scale_;
  float star_scale_;
  float mb_scale_;
  float bats_scale_;
  float sb_scale_;
  float offmap_z_;
  float offmap_border_thickness_;
  float offmap_label_size_;
  float offmap_left_right_thickness_;
  float offmap_top_bottom_thickness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_visual_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// color_t

// int32 r = 1;
inline void color_t::clear_r() {
  r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 color_t::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 color_t::r() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.r)
  return _internal_r();
}
inline void color_t::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_ = value;
}
inline void color_t::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.r)
}

// int32 g = 2;
inline void color_t::clear_g() {
  g_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 color_t::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 color_t::g() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.g)
  return _internal_g();
}
inline void color_t::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  g_ = value;
}
inline void color_t::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.g)
}

// int32 b = 3;
inline void color_t::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 color_t::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 color_t::b() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.color_t.b)
  return _internal_b();
}
inline void color_t::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void color_t::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.color_t.b)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// hex_map_t

// map<string, .pb_message.visual_config.color_t> primary_colors = 1;
inline int hex_map_t::_internal_primary_colors_size() const {
  return primary_colors_.size();
}
inline int hex_map_t::primary_colors_size() const {
  return _internal_primary_colors_size();
}
inline void hex_map_t::clear_primary_colors() {
  primary_colors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
hex_map_t::_internal_primary_colors() const {
  return primary_colors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
hex_map_t::primary_colors() const {
  // @@protoc_insertion_point(field_map:pb_message.visual_config.hex_map_t.primary_colors)
  return _internal_primary_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
hex_map_t::_internal_mutable_primary_colors() {
  return primary_colors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
hex_map_t::mutable_primary_colors() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.visual_config.hex_map_t.primary_colors)
  return _internal_mutable_primary_colors();
}

// map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
inline int hex_map_t::_internal_secondary_colors_size() const {
  return secondary_colors_.size();
}
inline int hex_map_t::secondary_colors_size() const {
  return _internal_secondary_colors_size();
}
inline void hex_map_t::clear_secondary_colors() {
  secondary_colors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
hex_map_t::_internal_secondary_colors() const {
  return secondary_colors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >&
hex_map_t::secondary_colors() const {
  // @@protoc_insertion_point(field_map:pb_message.visual_config.hex_map_t.secondary_colors)
  return _internal_secondary_colors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
hex_map_t::_internal_mutable_secondary_colors() {
  return secondary_colors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >*
hex_map_t::mutable_secondary_colors() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.visual_config.hex_map_t.secondary_colors)
  return _internal_mutable_secondary_colors();
}

// float national_border_thickness = 3;
inline void hex_map_t::clear_national_border_thickness() {
  national_border_thickness_ = 0;
}
inline float hex_map_t::_internal_national_border_thickness() const {
  return national_border_thickness_;
}
inline float hex_map_t::national_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.national_border_thickness)
  return _internal_national_border_thickness();
}
inline void hex_map_t::_internal_set_national_border_thickness(float value) {
  
  national_border_thickness_ = value;
}
inline void hex_map_t::set_national_border_thickness(float value) {
  _internal_set_national_border_thickness(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.national_border_thickness)
}

// float province_border_thickness = 4;
inline void hex_map_t::clear_province_border_thickness() {
  province_border_thickness_ = 0;
}
inline float hex_map_t::_internal_province_border_thickness() const {
  return province_border_thickness_;
}
inline float hex_map_t::province_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.province_border_thickness)
  return _internal_province_border_thickness();
}
inline void hex_map_t::_internal_set_province_border_thickness(float value) {
  
  province_border_thickness_ = value;
}
inline void hex_map_t::set_province_border_thickness(float value) {
  _internal_set_province_border_thickness(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.province_border_thickness)
}

// float planet_star_thickness = 5;
inline void hex_map_t::clear_planet_star_thickness() {
  planet_star_thickness_ = 0;
}
inline float hex_map_t::_internal_planet_star_thickness() const {
  return planet_star_thickness_;
}
inline float hex_map_t::planet_star_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.planet_star_thickness)
  return _internal_planet_star_thickness();
}
inline void hex_map_t::_internal_set_planet_star_thickness(float value) {
  
  planet_star_thickness_ = value;
}
inline void hex_map_t::set_planet_star_thickness(float value) {
  _internal_set_planet_star_thickness(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.planet_star_thickness)
}

// float minor_planet_scale = 6;
inline void hex_map_t::clear_minor_planet_scale() {
  minor_planet_scale_ = 0;
}
inline float hex_map_t::_internal_minor_planet_scale() const {
  return minor_planet_scale_;
}
inline float hex_map_t::minor_planet_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.minor_planet_scale)
  return _internal_minor_planet_scale();
}
inline void hex_map_t::_internal_set_minor_planet_scale(float value) {
  
  minor_planet_scale_ = value;
}
inline void hex_map_t::set_minor_planet_scale(float value) {
  _internal_set_minor_planet_scale(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.minor_planet_scale)
}

// float major_planet_scale = 7;
inline void hex_map_t::clear_major_planet_scale() {
  major_planet_scale_ = 0;
}
inline float hex_map_t::_internal_major_planet_scale() const {
  return major_planet_scale_;
}
inline float hex_map_t::major_planet_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.major_planet_scale)
  return _internal_major_planet_scale();
}
inline void hex_map_t::_internal_set_major_planet_scale(float value) {
  
  major_planet_scale_ = value;
}
inline void hex_map_t::set_major_planet_scale(float value) {
  _internal_set_major_planet_scale(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.major_planet_scale)
}

// float star_scale = 8;
inline void hex_map_t::clear_star_scale() {
  star_scale_ = 0;
}
inline float hex_map_t::_internal_star_scale() const {
  return star_scale_;
}
inline float hex_map_t::star_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.star_scale)
  return _internal_star_scale();
}
inline void hex_map_t::_internal_set_star_scale(float value) {
  
  star_scale_ = value;
}
inline void hex_map_t::set_star_scale(float value) {
  _internal_set_star_scale(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.star_scale)
}

// float mb_scale = 9;
inline void hex_map_t::clear_mb_scale() {
  mb_scale_ = 0;
}
inline float hex_map_t::_internal_mb_scale() const {
  return mb_scale_;
}
inline float hex_map_t::mb_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.mb_scale)
  return _internal_mb_scale();
}
inline void hex_map_t::_internal_set_mb_scale(float value) {
  
  mb_scale_ = value;
}
inline void hex_map_t::set_mb_scale(float value) {
  _internal_set_mb_scale(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.mb_scale)
}

// float bats_scale = 10;
inline void hex_map_t::clear_bats_scale() {
  bats_scale_ = 0;
}
inline float hex_map_t::_internal_bats_scale() const {
  return bats_scale_;
}
inline float hex_map_t::bats_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.bats_scale)
  return _internal_bats_scale();
}
inline void hex_map_t::_internal_set_bats_scale(float value) {
  
  bats_scale_ = value;
}
inline void hex_map_t::set_bats_scale(float value) {
  _internal_set_bats_scale(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.bats_scale)
}

// float sb_scale = 11;
inline void hex_map_t::clear_sb_scale() {
  sb_scale_ = 0;
}
inline float hex_map_t::_internal_sb_scale() const {
  return sb_scale_;
}
inline float hex_map_t::sb_scale() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.sb_scale)
  return _internal_sb_scale();
}
inline void hex_map_t::_internal_set_sb_scale(float value) {
  
  sb_scale_ = value;
}
inline void hex_map_t::set_sb_scale(float value) {
  _internal_set_sb_scale(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.sb_scale)
}

// float offmap_z = 12;
inline void hex_map_t::clear_offmap_z() {
  offmap_z_ = 0;
}
inline float hex_map_t::_internal_offmap_z() const {
  return offmap_z_;
}
inline float hex_map_t::offmap_z() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_z)
  return _internal_offmap_z();
}
inline void hex_map_t::_internal_set_offmap_z(float value) {
  
  offmap_z_ = value;
}
inline void hex_map_t::set_offmap_z(float value) {
  _internal_set_offmap_z(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_z)
}

// float offmap_border_thickness = 13;
inline void hex_map_t::clear_offmap_border_thickness() {
  offmap_border_thickness_ = 0;
}
inline float hex_map_t::_internal_offmap_border_thickness() const {
  return offmap_border_thickness_;
}
inline float hex_map_t::offmap_border_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_border_thickness)
  return _internal_offmap_border_thickness();
}
inline void hex_map_t::_internal_set_offmap_border_thickness(float value) {
  
  offmap_border_thickness_ = value;
}
inline void hex_map_t::set_offmap_border_thickness(float value) {
  _internal_set_offmap_border_thickness(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_border_thickness)
}

// float offmap_label_size = 14;
inline void hex_map_t::clear_offmap_label_size() {
  offmap_label_size_ = 0;
}
inline float hex_map_t::_internal_offmap_label_size() const {
  return offmap_label_size_;
}
inline float hex_map_t::offmap_label_size() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_label_size)
  return _internal_offmap_label_size();
}
inline void hex_map_t::_internal_set_offmap_label_size(float value) {
  
  offmap_label_size_ = value;
}
inline void hex_map_t::set_offmap_label_size(float value) {
  _internal_set_offmap_label_size(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_label_size)
}

// float offmap_left_right_thickness = 15;
inline void hex_map_t::clear_offmap_left_right_thickness() {
  offmap_left_right_thickness_ = 0;
}
inline float hex_map_t::_internal_offmap_left_right_thickness() const {
  return offmap_left_right_thickness_;
}
inline float hex_map_t::offmap_left_right_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_left_right_thickness)
  return _internal_offmap_left_right_thickness();
}
inline void hex_map_t::_internal_set_offmap_left_right_thickness(float value) {
  
  offmap_left_right_thickness_ = value;
}
inline void hex_map_t::set_offmap_left_right_thickness(float value) {
  _internal_set_offmap_left_right_thickness(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_left_right_thickness)
}

// float offmap_top_bottom_thickness = 16;
inline void hex_map_t::clear_offmap_top_bottom_thickness() {
  offmap_top_bottom_thickness_ = 0;
}
inline float hex_map_t::_internal_offmap_top_bottom_thickness() const {
  return offmap_top_bottom_thickness_;
}
inline float hex_map_t::offmap_top_bottom_thickness() const {
  // @@protoc_insertion_point(field_get:pb_message.visual_config.hex_map_t.offmap_top_bottom_thickness)
  return _internal_offmap_top_bottom_thickness();
}
inline void hex_map_t::_internal_set_offmap_top_bottom_thickness(float value) {
  
  offmap_top_bottom_thickness_ = value;
}
inline void hex_map_t::set_offmap_top_bottom_thickness(float value) {
  _internal_set_offmap_top_bottom_thickness(value);
  // @@protoc_insertion_point(field_set:pb_message.visual_config.hex_map_t.offmap_top_bottom_thickness)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace visual_config
}  // namespace pb_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_visual_5fconfig_2eproto
