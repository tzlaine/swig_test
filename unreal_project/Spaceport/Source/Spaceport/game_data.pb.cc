// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto

#include "game_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleet_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleets_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleets_t_FleetsEntry_DoNotUse_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_hex_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_hex_zone_fixture_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_zone_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_offmap_area_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_offmap_areas_t_AreasEntry_DoNotUse_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_planet_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_province_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_unit_t_game_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hex_coord_t_base_5ftypes_2eproto;
namespace pb_message {
namespace game_data {
class unit_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unit_t> _instance;
} _unit_t_default_instance_;
class fleet_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fleet_t> _instance;
} _fleet_t_default_instance_;
class fleets_t_FleetsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fleets_t_FleetsEntry_DoNotUse> _instance;
} _fleets_t_FleetsEntry_DoNotUse_default_instance_;
class fleets_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fleets_t> _instance;
} _fleets_t_default_instance_;
class planet_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<planet_t> _instance;
} _planet_t_default_instance_;
class hex_zone_fixture_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_zone_fixture_t> _instance;
} _hex_zone_fixture_t_default_instance_;
class hex_zone_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_zone_t> _instance;
} _hex_zone_t_default_instance_;
class hex_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_t> _instance;
} _hex_t_default_instance_;
class province_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<province_t> _instance;
} _province_t_default_instance_;
class map_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_t> _instance;
} _map_t_default_instance_;
class offmap_area_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<offmap_area_t> _instance;
} _offmap_area_t_default_instance_;
class offmap_areas_t_AreasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<offmap_areas_t_AreasEntry_DoNotUse> _instance;
} _offmap_areas_t_AreasEntry_DoNotUse_default_instance_;
class offmap_areas_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<offmap_areas_t> _instance;
} _offmap_areas_t_default_instance_;
class team_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<team_t> _instance;
} _team_t_default_instance_;
}  // namespace game_data
}  // namespace pb_message
static void InitDefaultsscc_info_fleet_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_fleet_t_default_instance_;
    new (ptr) ::pb_message::game_data::fleet_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::fleet_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleet_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fleet_t_game_5fdata_2eproto}, {
      &scc_info_unit_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_fleets_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_fleets_t_default_instance_;
    new (ptr) ::pb_message::game_data::fleets_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::fleets_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleets_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fleets_t_game_5fdata_2eproto}, {
      &scc_info_fleets_t_FleetsEntry_DoNotUse_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_fleets_t_FleetsEntry_DoNotUse_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_fleets_t_FleetsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse();
  }
  ::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleets_t_FleetsEntry_DoNotUse_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fleets_t_FleetsEntry_DoNotUse_game_5fdata_2eproto}, {
      &scc_info_fleet_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_hex_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_hex_t_default_instance_;
    new (ptr) ::pb_message::game_data::hex_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::hex_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_hex_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_hex_t_game_5fdata_2eproto}, {
      &scc_info_hex_coord_t_base_5ftypes_2eproto.base,
      &scc_info_hex_zone_t_game_5fdata_2eproto.base,
      &scc_info_fleets_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_hex_zone_fixture_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_hex_zone_fixture_t_default_instance_;
    new (ptr) ::pb_message::game_data::hex_zone_fixture_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::hex_zone_fixture_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_hex_zone_fixture_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_hex_zone_fixture_t_game_5fdata_2eproto}, {
      &scc_info_unit_t_game_5fdata_2eproto.base,
      &scc_info_planet_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_hex_zone_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_hex_zone_t_default_instance_;
    new (ptr) ::pb_message::game_data::hex_zone_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::hex_zone_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_zone_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_hex_zone_t_game_5fdata_2eproto}, {
      &scc_info_hex_zone_fixture_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_map_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_map_t_default_instance_;
    new (ptr) ::pb_message::game_data::map_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::map_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_map_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_map_t_game_5fdata_2eproto}, {
      &scc_info_hex_t_game_5fdata_2eproto.base,
      &scc_info_province_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_offmap_area_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_offmap_area_t_default_instance_;
    new (ptr) ::pb_message::game_data::offmap_area_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::offmap_area_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_offmap_area_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_offmap_area_t_game_5fdata_2eproto}, {
      &scc_info_fleets_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_offmap_areas_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_offmap_areas_t_default_instance_;
    new (ptr) ::pb_message::game_data::offmap_areas_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::offmap_areas_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_offmap_areas_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_offmap_areas_t_game_5fdata_2eproto}, {
      &scc_info_offmap_areas_t_AreasEntry_DoNotUse_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_offmap_areas_t_AreasEntry_DoNotUse_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_offmap_areas_t_AreasEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse();
  }
  ::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_offmap_areas_t_AreasEntry_DoNotUse_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_offmap_areas_t_AreasEntry_DoNotUse_game_5fdata_2eproto}, {
      &scc_info_offmap_area_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_planet_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_planet_t_default_instance_;
    new (ptr) ::pb_message::game_data::planet_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::planet_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_planet_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_planet_t_game_5fdata_2eproto}, {
      &scc_info_fleets_t_game_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_province_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_province_t_default_instance_;
    new (ptr) ::pb_message::game_data::province_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::province_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_province_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_province_t_game_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_team_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_team_t_default_instance_;
    new (ptr) ::pb_message::game_data::team_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::team_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_team_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_team_t_game_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_unit_t_game_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::game_data::_unit_t_default_instance_;
    new (ptr) ::pb_message::game_data::unit_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::game_data::unit_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_unit_t_game_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_unit_t_game_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_5fdata_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_game_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::unit_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::unit_t, unit_id_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::unit_t, owner_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::unit_t, original_owner_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::unit_t, fighters_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::unit_t, pfs_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::unit_t, tug_mission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleet_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleet_t, units_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleets_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::fleets_t, fleets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::planet_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::planet_t, owner_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::planet_t, original_owner_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::planet_t, type_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::planet_t, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_zone_fixture_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_zone_fixture_t, type_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_zone_fixture_t, base_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_zone_fixture_t, planet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_zone_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_zone_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_zone_t, fixtures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_t, coord_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_t, province_id_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_t, zones_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::hex_t, fleets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::province_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::province_t, id_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::province_t, owner_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::province_t, original_owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::map_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::map_t, width_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::map_t, height_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::map_t, hexes_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::map_t, provinces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_area_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_area_t, owner_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_area_t, fleets_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_areas_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::offmap_areas_t, areas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::team_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::team_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::game_data::team_t, nations_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb_message::game_data::unit_t)},
  { 11, -1, sizeof(::pb_message::game_data::fleet_t)},
  { 17, 24, sizeof(::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse)},
  { 26, -1, sizeof(::pb_message::game_data::fleets_t)},
  { 32, -1, sizeof(::pb_message::game_data::planet_t)},
  { 41, -1, sizeof(::pb_message::game_data::hex_zone_fixture_t)},
  { 49, -1, sizeof(::pb_message::game_data::hex_zone_t)},
  { 56, -1, sizeof(::pb_message::game_data::hex_t)},
  { 65, -1, sizeof(::pb_message::game_data::province_t)},
  { 73, -1, sizeof(::pb_message::game_data::map_t)},
  { 82, -1, sizeof(::pb_message::game_data::offmap_area_t)},
  { 89, 96, sizeof(::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse)},
  { 98, -1, sizeof(::pb_message::game_data::offmap_areas_t)},
  { 104, -1, sizeof(::pb_message::game_data::team_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_unit_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_fleet_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_fleets_t_FleetsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_fleets_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_planet_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_hex_zone_fixture_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_hex_zone_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_hex_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_province_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_map_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_offmap_area_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_offmap_areas_t_AreasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_offmap_areas_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::game_data::_team_t_default_instance_),
};

const char descriptor_table_protodef_game_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017game_data.proto\022\024pb_message.game_data\032"
  "\020base_types.proto\"\217\001\n\006unit_t\022\017\n\007unit_id\030"
  "\001 \001(\005\022\r\n\005owner\030\002 \001(\005\022\026\n\016original_owner\030\003"
  " \001(\005\022\020\n\010fighters\030\004 \001(\005\022\013\n\003pfs\030\005 \001(\005\022.\n\013t"
  "ug_mission\030\006 \001(\0162\031.pb_message.tug_missio"
  "n_t\"6\n\007fleet_t\022+\n\005units\030\001 \003(\0132\034.pb_messa"
  "ge.game_data.unit_t\"\224\001\n\010fleets_t\022:\n\006flee"
  "ts\030\001 \003(\0132*.pb_message.game_data.fleets_t"
  ".FleetsEntry\032L\n\013FleetsEntry\022\013\n\003key\030\001 \001(\005"
  "\022,\n\005value\030\002 \001(\0132\035.pb_message.game_data.f"
  "leet_t:\0028\001\"\302\001\n\010planet_t\022\r\n\005owner\030\001 \001(\005\022\026"
  "\n\016original_owner\030\002 \001(\005\0223\n\004type\030\003 \001(\0162%.p"
  "b_message.game_data.planet_t.type_t\022-\n\005u"
  "nits\030\004 \001(\0132\036.pb_message.game_data.fleets"
  "_t\"+\n\006type_t\022\t\n\005minor\020\000\022\t\n\005major\020\001\022\013\n\007ca"
  "pital\020\002\"\331\001\n\022hex_zone_fixture_t\022=\n\004type\030\001"
  " \001(\0162/.pb_message.game_data.hex_zone_fix"
  "ture_t.type_t\022*\n\004base\030\002 \001(\0132\034.pb_message"
  ".game_data.unit_t\022.\n\006planet\030\003 \001(\0132\036.pb_m"
  "essage.game_data.planet_t\"(\n\006type_t\022\r\n\tt"
  "ype_base\020\000\022\017\n\013type_planet\020\001\"V\n\nhex_zone_"
  "t\022\014\n\004name\030\001 \001(\t\022:\n\010fixtures\030\002 \003(\0132(.pb_m"
  "essage.game_data.hex_zone_fixture_t\"\245\001\n\005"
  "hex_t\022&\n\005coord\030\001 \001(\0132\027.pb_message.hex_co"
  "ord_t\022\023\n\013province_id\030\002 \001(\005\022/\n\005zones\030\004 \003("
  "\0132 .pb_message.game_data.hex_zone_t\022.\n\006f"
  "leets\030\005 \001(\0132\036.pb_message.game_data.fleet"
  "s_t\"\?\n\nprovince_t\022\n\n\002id\030\001 \001(\005\022\r\n\005owner\030\002"
  " \001(\005\022\026\n\016original_owner\030\003 \001(\005\"\207\001\n\005map_t\022\r"
  "\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022*\n\005hexes\030\003"
  " \003(\0132\033.pb_message.game_data.hex_t\0223\n\tpro"
  "vinces\030\004 \003(\0132 .pb_message.game_data.prov"
  "ince_t\"N\n\roffmap_area_t\022\r\n\005owner\030\001 \001(\005\022."
  "\n\006fleets\030\002 \001(\0132\036.pb_message.game_data.fl"
  "eets_t\"\243\001\n\016offmap_areas_t\022>\n\005areas\030\001 \003(\013"
  "2/.pb_message.game_data.offmap_areas_t.A"
  "reasEntry\032Q\n\nAreasEntry\022\013\n\003key\030\001 \001(\005\0222\n\005"
  "value\030\002 \001(\0132#.pb_message.game_data.offma"
  "p_area_t:\0028\001\"\'\n\006team_t\022\014\n\004name\030\001 \001(\t\022\017\n\007"
  "nations\030\002 \003(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_5fdata_2eproto_deps[1] = {
  &::descriptor_table_base_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_game_5fdata_2eproto_sccs[14] = {
  &scc_info_fleet_t_game_5fdata_2eproto.base,
  &scc_info_fleets_t_game_5fdata_2eproto.base,
  &scc_info_fleets_t_FleetsEntry_DoNotUse_game_5fdata_2eproto.base,
  &scc_info_hex_t_game_5fdata_2eproto.base,
  &scc_info_hex_zone_fixture_t_game_5fdata_2eproto.base,
  &scc_info_hex_zone_t_game_5fdata_2eproto.base,
  &scc_info_map_t_game_5fdata_2eproto.base,
  &scc_info_offmap_area_t_game_5fdata_2eproto.base,
  &scc_info_offmap_areas_t_game_5fdata_2eproto.base,
  &scc_info_offmap_areas_t_AreasEntry_DoNotUse_game_5fdata_2eproto.base,
  &scc_info_planet_t_game_5fdata_2eproto.base,
  &scc_info_province_t_game_5fdata_2eproto.base,
  &scc_info_team_t_game_5fdata_2eproto.base,
  &scc_info_unit_t_game_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fdata_2eproto = {
  false, false, descriptor_table_protodef_game_5fdata_2eproto, "game_data.proto", 1581,
  &descriptor_table_game_5fdata_2eproto_once, descriptor_table_game_5fdata_2eproto_sccs, descriptor_table_game_5fdata_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_game_5fdata_2eproto::offsets,
  file_level_metadata_game_5fdata_2eproto, 14, file_level_enum_descriptors_game_5fdata_2eproto, file_level_service_descriptors_game_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_game_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_game_5fdata_2eproto)), true);
namespace pb_message {
namespace game_data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* planet_t_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_5fdata_2eproto);
  return file_level_enum_descriptors_game_5fdata_2eproto[0];
}
bool planet_t_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr planet_t_type_t planet_t::minor;
constexpr planet_t_type_t planet_t::major;
constexpr planet_t_type_t planet_t::capital;
constexpr planet_t_type_t planet_t::type_t_MIN;
constexpr planet_t_type_t planet_t::type_t_MAX;
constexpr int planet_t::type_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* hex_zone_fixture_t_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_5fdata_2eproto);
  return file_level_enum_descriptors_game_5fdata_2eproto[1];
}
bool hex_zone_fixture_t_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr hex_zone_fixture_t_type_t hex_zone_fixture_t::type_base;
constexpr hex_zone_fixture_t_type_t hex_zone_fixture_t::type_planet;
constexpr hex_zone_fixture_t_type_t hex_zone_fixture_t::type_t_MIN;
constexpr hex_zone_fixture_t_type_t hex_zone_fixture_t::type_t_MAX;
constexpr int hex_zone_fixture_t::type_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void unit_t::InitAsDefaultInstance() {
}
class unit_t::_Internal {
 public:
};

unit_t::unit_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.unit_t)
}
unit_t::unit_t(const unit_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_id_, &from.unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tug_mission_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(tug_mission_));
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.unit_t)
}

void unit_t::SharedCtor() {
  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tug_mission_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(tug_mission_));
}

unit_t::~unit_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.unit_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void unit_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void unit_t::ArenaDtor(void* object) {
  unit_t* _this = reinterpret_cast< unit_t* >(object);
  (void)_this;
}
void unit_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void unit_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const unit_t& unit_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_unit_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void unit_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.unit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tug_mission_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(tug_mission_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unit_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          original_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fighters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fighters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pfs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pfs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.tug_mission_t tug_mission = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tug_mission(static_cast<::pb_message::tug_mission_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* unit_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.unit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_id(), target);
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner(), target);
  }

  // int32 original_owner = 3;
  if (this->original_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_original_owner(), target);
  }

  // int32 fighters = 4;
  if (this->fighters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fighters(), target);
  }

  // int32 pfs = 5;
  if (this->pfs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pfs(), target);
  }

  // .pb_message.tug_mission_t tug_mission = 6;
  if (this->tug_mission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_tug_mission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.unit_t)
  return target;
}

size_t unit_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.unit_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_id());
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  // int32 original_owner = 3;
  if (this->original_owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_owner());
  }

  // int32 fighters = 4;
  if (this->fighters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fighters());
  }

  // int32 pfs = 5;
  if (this->pfs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pfs());
  }

  // .pb_message.tug_mission_t tug_mission = 6;
  if (this->tug_mission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tug_mission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void unit_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.unit_t)
  GOOGLE_DCHECK_NE(&from, this);
  const unit_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<unit_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.unit_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.unit_t)
    MergeFrom(*source);
  }
}

void unit_t::MergeFrom(const unit_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.unit_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.original_owner() != 0) {
    _internal_set_original_owner(from._internal_original_owner());
  }
  if (from.fighters() != 0) {
    _internal_set_fighters(from._internal_fighters());
  }
  if (from.pfs() != 0) {
    _internal_set_pfs(from._internal_pfs());
  }
  if (from.tug_mission() != 0) {
    _internal_set_tug_mission(from._internal_tug_mission());
  }
}

void unit_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.unit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_t::CopyFrom(const unit_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.unit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_t::IsInitialized() const {
  return true;
}

void unit_t::InternalSwap(unit_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(unit_t, tug_mission_)
      + sizeof(unit_t::tug_mission_)
      - PROTOBUF_FIELD_OFFSET(unit_t, unit_id_)>(
          reinterpret_cast<char*>(&unit_id_),
          reinterpret_cast<char*>(&other->unit_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata unit_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fleet_t::InitAsDefaultInstance() {
}
class fleet_t::_Internal {
 public:
};

fleet_t::fleet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.fleet_t)
}
fleet_t::fleet_t(const fleet_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.fleet_t)
}

void fleet_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fleet_t_game_5fdata_2eproto.base);
}

fleet_t::~fleet_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.fleet_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fleet_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fleet_t::ArenaDtor(void* object) {
  fleet_t* _this = reinterpret_cast< fleet_t* >(object);
  (void)_this;
}
void fleet_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fleet_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fleet_t& fleet_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fleet_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void fleet_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.fleet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fleet_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_message.game_data.unit_t units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fleet_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.fleet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_message.game_data.unit_t units = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_units_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_units(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.fleet_t)
  return target;
}

size_t fleet_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.fleet_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.game_data.unit_t units = 1;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fleet_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.fleet_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fleet_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fleet_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.fleet_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.fleet_t)
    MergeFrom(*source);
  }
}

void fleet_t::MergeFrom(const fleet_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.fleet_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
}

void fleet_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.fleet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fleet_t::CopyFrom(const fleet_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.fleet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fleet_t::IsInitialized() const {
  return true;
}

void fleet_t::InternalSwap(fleet_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.InternalSwap(&other->units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fleet_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

fleets_t_FleetsEntry_DoNotUse::fleets_t_FleetsEntry_DoNotUse() {}
fleets_t_FleetsEntry_DoNotUse::fleets_t_FleetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void fleets_t_FleetsEntry_DoNotUse::MergeFrom(const fleets_t_FleetsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata fleets_t_FleetsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void fleets_t_FleetsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void fleets_t::InitAsDefaultInstance() {
}
class fleets_t::_Internal {
 public:
};

fleets_t::fleets_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fleets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.fleets_t)
}
fleets_t::fleets_t(const fleets_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fleets_.MergeFrom(from.fleets_);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.fleets_t)
}

void fleets_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fleets_t_game_5fdata_2eproto.base);
}

fleets_t::~fleets_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.fleets_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fleets_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fleets_t::ArenaDtor(void* object) {
  fleets_t* _this = reinterpret_cast< fleets_t* >(object);
  (void)_this;
}
void fleets_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fleets_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fleets_t& fleets_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fleets_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void fleets_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.fleets_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fleets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fleets_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fleets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fleets_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.fleets_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
  if (!this->_internal_fleets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fleets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fleets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >::const_iterator
          it = this->_internal_fleets().begin();
          it != this->_internal_fleets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = fleets_t_FleetsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >::const_iterator
          it = this->_internal_fleets().begin();
          it != this->_internal_fleets().end(); ++it) {
        target = fleets_t_FleetsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.fleets_t)
  return target;
}

size_t fleets_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.fleets_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pb_message.game_data.fleet_t> fleets = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fleets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::fleet_t >::const_iterator
      it = this->_internal_fleets().begin();
      it != this->_internal_fleets().end(); ++it) {
    total_size += fleets_t_FleetsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fleets_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.fleets_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fleets_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fleets_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.fleets_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.fleets_t)
    MergeFrom(*source);
  }
}

void fleets_t::MergeFrom(const fleets_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.fleets_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fleets_.MergeFrom(from.fleets_);
}

void fleets_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.fleets_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fleets_t::CopyFrom(const fleets_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.fleets_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fleets_t::IsInitialized() const {
  return true;
}

void fleets_t::InternalSwap(fleets_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fleets_.Swap(&other->fleets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fleets_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void planet_t::InitAsDefaultInstance() {
  ::pb_message::game_data::_planet_t_default_instance_._instance.get_mutable()->units_ = const_cast< ::pb_message::game_data::fleets_t*>(
      ::pb_message::game_data::fleets_t::internal_default_instance());
}
class planet_t::_Internal {
 public:
  static const ::pb_message::game_data::fleets_t& units(const planet_t* msg);
};

const ::pb_message::game_data::fleets_t&
planet_t::_Internal::units(const planet_t* msg) {
  return *msg->units_;
}
planet_t::planet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.planet_t)
}
planet_t::planet_t(const planet_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_units()) {
    units_ = new ::pb_message::game_data::fleets_t(*from.units_);
  } else {
    units_ = nullptr;
  }
  ::memcpy(&owner_, &from.owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.planet_t)
}

void planet_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_planet_t_game_5fdata_2eproto.base);
  ::memset(&units_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&units_)) + sizeof(type_));
}

planet_t::~planet_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.planet_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void planet_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete units_;
}

void planet_t::ArenaDtor(void* object) {
  planet_t* _this = reinterpret_cast< planet_t* >(object);
  (void)_this;
}
void planet_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void planet_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const planet_t& planet_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_planet_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void planet_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.planet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && units_ != nullptr) {
    delete units_;
  }
  units_ = nullptr;
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* planet_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          original_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.game_data.planet_t.type_t type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb_message::game_data::planet_t_type_t>(val));
        } else goto handle_unusual;
        continue;
      // .pb_message.game_data.fleets_t units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_units(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* planet_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.planet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 owner = 1;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_owner(), target);
  }

  // int32 original_owner = 2;
  if (this->original_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_original_owner(), target);
  }

  // .pb_message.game_data.planet_t.type_t type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .pb_message.game_data.fleets_t units = 4;
  if (this->has_units()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::units(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.planet_t)
  return target;
}

size_t planet_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.planet_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_message.game_data.fleets_t units = 4;
  if (this->has_units()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *units_);
  }

  // int32 owner = 1;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  // int32 original_owner = 2;
  if (this->original_owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_owner());
  }

  // .pb_message.game_data.planet_t.type_t type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void planet_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.planet_t)
  GOOGLE_DCHECK_NE(&from, this);
  const planet_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<planet_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.planet_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.planet_t)
    MergeFrom(*source);
  }
}

void planet_t::MergeFrom(const planet_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.planet_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_units()) {
    _internal_mutable_units()->::pb_message::game_data::fleets_t::MergeFrom(from._internal_units());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.original_owner() != 0) {
    _internal_set_original_owner(from._internal_original_owner());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void planet_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.planet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void planet_t::CopyFrom(const planet_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.planet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool planet_t::IsInitialized() const {
  return true;
}

void planet_t::InternalSwap(planet_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(planet_t, type_)
      + sizeof(planet_t::type_)
      - PROTOBUF_FIELD_OFFSET(planet_t, units_)>(
          reinterpret_cast<char*>(&units_),
          reinterpret_cast<char*>(&other->units_));
}

::PROTOBUF_NAMESPACE_ID::Metadata planet_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void hex_zone_fixture_t::InitAsDefaultInstance() {
  ::pb_message::game_data::_hex_zone_fixture_t_default_instance_._instance.get_mutable()->base_ = const_cast< ::pb_message::game_data::unit_t*>(
      ::pb_message::game_data::unit_t::internal_default_instance());
  ::pb_message::game_data::_hex_zone_fixture_t_default_instance_._instance.get_mutable()->planet_ = const_cast< ::pb_message::game_data::planet_t*>(
      ::pb_message::game_data::planet_t::internal_default_instance());
}
class hex_zone_fixture_t::_Internal {
 public:
  static const ::pb_message::game_data::unit_t& base(const hex_zone_fixture_t* msg);
  static const ::pb_message::game_data::planet_t& planet(const hex_zone_fixture_t* msg);
};

const ::pb_message::game_data::unit_t&
hex_zone_fixture_t::_Internal::base(const hex_zone_fixture_t* msg) {
  return *msg->base_;
}
const ::pb_message::game_data::planet_t&
hex_zone_fixture_t::_Internal::planet(const hex_zone_fixture_t* msg) {
  return *msg->planet_;
}
hex_zone_fixture_t::hex_zone_fixture_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.hex_zone_fixture_t)
}
hex_zone_fixture_t::hex_zone_fixture_t(const hex_zone_fixture_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pb_message::game_data::unit_t(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_planet()) {
    planet_ = new ::pb_message::game_data::planet_t(*from.planet_);
  } else {
    planet_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.hex_zone_fixture_t)
}

void hex_zone_fixture_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hex_zone_fixture_t_game_5fdata_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&base_)) + sizeof(type_));
}

hex_zone_fixture_t::~hex_zone_fixture_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.hex_zone_fixture_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hex_zone_fixture_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete planet_;
}

void hex_zone_fixture_t::ArenaDtor(void* object) {
  hex_zone_fixture_t* _this = reinterpret_cast< hex_zone_fixture_t* >(object);
  (void)_this;
}
void hex_zone_fixture_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hex_zone_fixture_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hex_zone_fixture_t& hex_zone_fixture_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hex_zone_fixture_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void hex_zone_fixture_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.hex_zone_fixture_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && planet_ != nullptr) {
    delete planet_;
  }
  planet_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hex_zone_fixture_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb_message::game_data::hex_zone_fixture_t_type_t>(val));
        } else goto handle_unusual;
        continue;
      // .pb_message.game_data.unit_t base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.game_data.planet_t planet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_planet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hex_zone_fixture_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.hex_zone_fixture_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .pb_message.game_data.unit_t base = 2;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base(this), target, stream);
  }

  // .pb_message.game_data.planet_t planet = 3;
  if (this->has_planet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::planet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.hex_zone_fixture_t)
  return target;
}

size_t hex_zone_fixture_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.hex_zone_fixture_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_message.game_data.unit_t base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pb_message.game_data.planet_t planet = 3;
  if (this->has_planet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planet_);
  }

  // .pb_message.game_data.hex_zone_fixture_t.type_t type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hex_zone_fixture_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.hex_zone_fixture_t)
  GOOGLE_DCHECK_NE(&from, this);
  const hex_zone_fixture_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hex_zone_fixture_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.hex_zone_fixture_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.hex_zone_fixture_t)
    MergeFrom(*source);
  }
}

void hex_zone_fixture_t::MergeFrom(const hex_zone_fixture_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.hex_zone_fixture_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pb_message::game_data::unit_t::MergeFrom(from._internal_base());
  }
  if (from.has_planet()) {
    _internal_mutable_planet()->::pb_message::game_data::planet_t::MergeFrom(from._internal_planet());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void hex_zone_fixture_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.hex_zone_fixture_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_zone_fixture_t::CopyFrom(const hex_zone_fixture_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.hex_zone_fixture_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_zone_fixture_t::IsInitialized() const {
  return true;
}

void hex_zone_fixture_t::InternalSwap(hex_zone_fixture_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hex_zone_fixture_t, type_)
      + sizeof(hex_zone_fixture_t::type_)
      - PROTOBUF_FIELD_OFFSET(hex_zone_fixture_t, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hex_zone_fixture_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void hex_zone_t::InitAsDefaultInstance() {
}
class hex_zone_t::_Internal {
 public:
};

hex_zone_t::hex_zone_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fixtures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.hex_zone_t)
}
hex_zone_t::hex_zone_t(const hex_zone_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fixtures_(from.fixtures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.hex_zone_t)
}

void hex_zone_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hex_zone_t_game_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

hex_zone_t::~hex_zone_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.hex_zone_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hex_zone_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hex_zone_t::ArenaDtor(void* object) {
  hex_zone_t* _this = reinterpret_cast< hex_zone_t* >(object);
  (void)_this;
}
void hex_zone_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hex_zone_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hex_zone_t& hex_zone_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hex_zone_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void hex_zone_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.hex_zone_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fixtures_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hex_zone_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.game_data.hex_zone_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fixtures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hex_zone_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.hex_zone_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.game_data.hex_zone_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fixtures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fixtures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.hex_zone_t)
  return target;
}

size_t hex_zone_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.hex_zone_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.game_data.hex_zone_fixture_t fixtures = 2;
  total_size += 1UL * this->_internal_fixtures_size();
  for (const auto& msg : this->fixtures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hex_zone_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.hex_zone_t)
  GOOGLE_DCHECK_NE(&from, this);
  const hex_zone_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hex_zone_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.hex_zone_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.hex_zone_t)
    MergeFrom(*source);
  }
}

void hex_zone_t::MergeFrom(const hex_zone_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.hex_zone_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fixtures_.MergeFrom(from.fixtures_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void hex_zone_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.hex_zone_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_zone_t::CopyFrom(const hex_zone_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.hex_zone_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_zone_t::IsInitialized() const {
  return true;
}

void hex_zone_t::InternalSwap(hex_zone_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fixtures_.InternalSwap(&other->fixtures_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata hex_zone_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void hex_t::InitAsDefaultInstance() {
  ::pb_message::game_data::_hex_t_default_instance_._instance.get_mutable()->coord_ = const_cast< ::pb_message::hex_coord_t*>(
      ::pb_message::hex_coord_t::internal_default_instance());
  ::pb_message::game_data::_hex_t_default_instance_._instance.get_mutable()->fleets_ = const_cast< ::pb_message::game_data::fleets_t*>(
      ::pb_message::game_data::fleets_t::internal_default_instance());
}
class hex_t::_Internal {
 public:
  static const ::pb_message::hex_coord_t& coord(const hex_t* msg);
  static const ::pb_message::game_data::fleets_t& fleets(const hex_t* msg);
};

const ::pb_message::hex_coord_t&
hex_t::_Internal::coord(const hex_t* msg) {
  return *msg->coord_;
}
const ::pb_message::game_data::fleets_t&
hex_t::_Internal::fleets(const hex_t* msg) {
  return *msg->fleets_;
}
void hex_t::clear_coord() {
  if (GetArena() == nullptr && coord_ != nullptr) {
    delete coord_;
  }
  coord_ = nullptr;
}
hex_t::hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  zones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.hex_t)
}
hex_t::hex_t(const hex_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      zones_(from.zones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coord()) {
    coord_ = new ::pb_message::hex_coord_t(*from.coord_);
  } else {
    coord_ = nullptr;
  }
  if (from._internal_has_fleets()) {
    fleets_ = new ::pb_message::game_data::fleets_t(*from.fleets_);
  } else {
    fleets_ = nullptr;
  }
  province_id_ = from.province_id_;
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.hex_t)
}

void hex_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hex_t_game_5fdata_2eproto.base);
  ::memset(&coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&province_id_) -
      reinterpret_cast<char*>(&coord_)) + sizeof(province_id_));
}

hex_t::~hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.hex_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hex_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coord_;
  if (this != internal_default_instance()) delete fleets_;
}

void hex_t::ArenaDtor(void* object) {
  hex_t* _this = reinterpret_cast< hex_t* >(object);
  (void)_this;
}
void hex_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hex_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hex_t& hex_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hex_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void hex_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zones_.Clear();
  if (GetArena() == nullptr && coord_ != nullptr) {
    delete coord_;
  }
  coord_ = nullptr;
  if (GetArena() == nullptr && fleets_ != nullptr) {
    delete fleets_;
  }
  fleets_ = nullptr;
  province_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hex_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_message.hex_coord_t coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 province_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          province_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.game_data.hex_zone_t zones = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb_message.game_data.fleets_t fleets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fleets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hex_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coord(this), target, stream);
  }

  // int32 province_id = 2;
  if (this->province_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_province_id(), target);
  }

  // repeated .pb_message.game_data.hex_zone_t zones = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_zones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_zones(i), target, stream);
  }

  // .pb_message.game_data.fleets_t fleets = 5;
  if (this->has_fleets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fleets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.hex_t)
  return target;
}

size_t hex_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.hex_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.game_data.hex_zone_t zones = 4;
  total_size += 1UL * this->_internal_zones_size();
  for (const auto& msg : this->zones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_);
  }

  // .pb_message.game_data.fleets_t fleets = 5;
  if (this->has_fleets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fleets_);
  }

  // int32 province_id = 2;
  if (this->province_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_province_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hex_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  const hex_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hex_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.hex_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.hex_t)
    MergeFrom(*source);
  }
}

void hex_t::MergeFrom(const hex_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zones_.MergeFrom(from.zones_);
  if (from.has_coord()) {
    _internal_mutable_coord()->::pb_message::hex_coord_t::MergeFrom(from._internal_coord());
  }
  if (from.has_fleets()) {
    _internal_mutable_fleets()->::pb_message::game_data::fleets_t::MergeFrom(from._internal_fleets());
  }
  if (from.province_id() != 0) {
    _internal_set_province_id(from._internal_province_id());
  }
}

void hex_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_t::CopyFrom(const hex_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_t::IsInitialized() const {
  return true;
}

void hex_t::InternalSwap(hex_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  zones_.InternalSwap(&other->zones_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hex_t, province_id_)
      + sizeof(hex_t::province_id_)
      - PROTOBUF_FIELD_OFFSET(hex_t, coord_)>(
          reinterpret_cast<char*>(&coord_),
          reinterpret_cast<char*>(&other->coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hex_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void province_t::InitAsDefaultInstance() {
}
class province_t::_Internal {
 public:
};

province_t::province_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.province_t)
}
province_t::province_t(const province_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&original_owner_) -
    reinterpret_cast<char*>(&id_)) + sizeof(original_owner_));
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.province_t)
}

void province_t::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_owner_) -
      reinterpret_cast<char*>(&id_)) + sizeof(original_owner_));
}

province_t::~province_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.province_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void province_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void province_t::ArenaDtor(void* object) {
  province_t* _this = reinterpret_cast< province_t* >(object);
  (void)_this;
}
void province_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void province_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const province_t& province_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_province_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void province_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.province_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_owner_) -
      reinterpret_cast<char*>(&id_)) + sizeof(original_owner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* province_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          original_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* province_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.province_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner(), target);
  }

  // int32 original_owner = 3;
  if (this->original_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_original_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.province_t)
  return target;
}

size_t province_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.province_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  // int32 original_owner = 3;
  if (this->original_owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void province_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.province_t)
  GOOGLE_DCHECK_NE(&from, this);
  const province_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<province_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.province_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.province_t)
    MergeFrom(*source);
  }
}

void province_t::MergeFrom(const province_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.province_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.original_owner() != 0) {
    _internal_set_original_owner(from._internal_original_owner());
  }
}

void province_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.province_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_t::CopyFrom(const province_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.province_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_t::IsInitialized() const {
  return true;
}

void province_t::InternalSwap(province_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(province_t, original_owner_)
      + sizeof(province_t::original_owner_)
      - PROTOBUF_FIELD_OFFSET(province_t, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata province_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void map_t::InitAsDefaultInstance() {
}
class map_t::_Internal {
 public:
};

map_t::map_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hexes_(arena),
  provinces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.map_t)
}
map_t::map_t(const map_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hexes_(from.hexes_),
      provinces_(from.provinces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.map_t)
}

void map_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_map_t_game_5fdata_2eproto.base);
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

map_t::~map_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.map_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void map_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void map_t::ArenaDtor(void* object) {
  map_t* _this = reinterpret_cast< map_t* >(object);
  (void)_this;
}
void map_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void map_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const map_t& map_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_map_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void map_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.map_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hexes_.Clear();
  provinces_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* map_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.game_data.hex_t hexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.game_data.province_t provinces = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_provinces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* map_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.map_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated .pb_message.game_data.hex_t hexes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hexes(i), target, stream);
  }

  // repeated .pb_message.game_data.province_t provinces = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_provinces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_provinces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.map_t)
  return target;
}

size_t map_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.map_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.game_data.hex_t hexes = 3;
  total_size += 1UL * this->_internal_hexes_size();
  for (const auto& msg : this->hexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_message.game_data.province_t provinces = 4;
  total_size += 1UL * this->_internal_provinces_size();
  for (const auto& msg : this->provinces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void map_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.map_t)
  GOOGLE_DCHECK_NE(&from, this);
  const map_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<map_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.map_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.map_t)
    MergeFrom(*source);
  }
}

void map_t::MergeFrom(const map_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.map_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hexes_.MergeFrom(from.hexes_);
  provinces_.MergeFrom(from.provinces_);
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void map_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.map_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_t::CopyFrom(const map_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.map_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_t::IsInitialized() const {
  return true;
}

void map_t::InternalSwap(map_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hexes_.InternalSwap(&other->hexes_);
  provinces_.InternalSwap(&other->provinces_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(map_t, height_)
      + sizeof(map_t::height_)
      - PROTOBUF_FIELD_OFFSET(map_t, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata map_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void offmap_area_t::InitAsDefaultInstance() {
  ::pb_message::game_data::_offmap_area_t_default_instance_._instance.get_mutable()->fleets_ = const_cast< ::pb_message::game_data::fleets_t*>(
      ::pb_message::game_data::fleets_t::internal_default_instance());
}
class offmap_area_t::_Internal {
 public:
  static const ::pb_message::game_data::fleets_t& fleets(const offmap_area_t* msg);
};

const ::pb_message::game_data::fleets_t&
offmap_area_t::_Internal::fleets(const offmap_area_t* msg) {
  return *msg->fleets_;
}
offmap_area_t::offmap_area_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.offmap_area_t)
}
offmap_area_t::offmap_area_t(const offmap_area_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fleets()) {
    fleets_ = new ::pb_message::game_data::fleets_t(*from.fleets_);
  } else {
    fleets_ = nullptr;
  }
  owner_ = from.owner_;
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.offmap_area_t)
}

void offmap_area_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_offmap_area_t_game_5fdata_2eproto.base);
  ::memset(&fleets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&fleets_)) + sizeof(owner_));
}

offmap_area_t::~offmap_area_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.offmap_area_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void offmap_area_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fleets_;
}

void offmap_area_t::ArenaDtor(void* object) {
  offmap_area_t* _this = reinterpret_cast< offmap_area_t* >(object);
  (void)_this;
}
void offmap_area_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void offmap_area_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const offmap_area_t& offmap_area_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_offmap_area_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void offmap_area_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.offmap_area_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fleets_ != nullptr) {
    delete fleets_;
  }
  fleets_ = nullptr;
  owner_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* offmap_area_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.game_data.fleets_t fleets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fleets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* offmap_area_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.offmap_area_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 owner = 1;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_owner(), target);
  }

  // .pb_message.game_data.fleets_t fleets = 2;
  if (this->has_fleets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fleets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.offmap_area_t)
  return target;
}

size_t offmap_area_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.offmap_area_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_message.game_data.fleets_t fleets = 2;
  if (this->has_fleets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fleets_);
  }

  // int32 owner = 1;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offmap_area_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.offmap_area_t)
  GOOGLE_DCHECK_NE(&from, this);
  const offmap_area_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<offmap_area_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.offmap_area_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.offmap_area_t)
    MergeFrom(*source);
  }
}

void offmap_area_t::MergeFrom(const offmap_area_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.offmap_area_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fleets()) {
    _internal_mutable_fleets()->::pb_message::game_data::fleets_t::MergeFrom(from._internal_fleets());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
}

void offmap_area_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.offmap_area_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_area_t::CopyFrom(const offmap_area_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.offmap_area_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_area_t::IsInitialized() const {
  return true;
}

void offmap_area_t::InternalSwap(offmap_area_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(offmap_area_t, owner_)
      + sizeof(offmap_area_t::owner_)
      - PROTOBUF_FIELD_OFFSET(offmap_area_t, fleets_)>(
          reinterpret_cast<char*>(&fleets_),
          reinterpret_cast<char*>(&other->fleets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata offmap_area_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

offmap_areas_t_AreasEntry_DoNotUse::offmap_areas_t_AreasEntry_DoNotUse() {}
offmap_areas_t_AreasEntry_DoNotUse::offmap_areas_t_AreasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void offmap_areas_t_AreasEntry_DoNotUse::MergeFrom(const offmap_areas_t_AreasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata offmap_areas_t_AreasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void offmap_areas_t_AreasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void offmap_areas_t::InitAsDefaultInstance() {
}
class offmap_areas_t::_Internal {
 public:
};

offmap_areas_t::offmap_areas_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  areas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.offmap_areas_t)
}
offmap_areas_t::offmap_areas_t(const offmap_areas_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  areas_.MergeFrom(from.areas_);
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.offmap_areas_t)
}

void offmap_areas_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_offmap_areas_t_game_5fdata_2eproto.base);
}

offmap_areas_t::~offmap_areas_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.offmap_areas_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void offmap_areas_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void offmap_areas_t::ArenaDtor(void* object) {
  offmap_areas_t* _this = reinterpret_cast< offmap_areas_t* >(object);
  (void)_this;
}
void offmap_areas_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void offmap_areas_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const offmap_areas_t& offmap_areas_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_offmap_areas_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void offmap_areas_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.offmap_areas_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* offmap_areas_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&areas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* offmap_areas_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.offmap_areas_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
  if (!this->_internal_areas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_areas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_areas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >::const_iterator
          it = this->_internal_areas().begin();
          it != this->_internal_areas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = offmap_areas_t_AreasEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >::const_iterator
          it = this->_internal_areas().begin();
          it != this->_internal_areas().end(); ++it) {
        target = offmap_areas_t_AreasEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.offmap_areas_t)
  return target;
}

size_t offmap_areas_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.offmap_areas_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pb_message.game_data.offmap_area_t> areas = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_areas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pb_message::game_data::offmap_area_t >::const_iterator
      it = this->_internal_areas().begin();
      it != this->_internal_areas().end(); ++it) {
    total_size += offmap_areas_t_AreasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offmap_areas_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.offmap_areas_t)
  GOOGLE_DCHECK_NE(&from, this);
  const offmap_areas_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<offmap_areas_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.offmap_areas_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.offmap_areas_t)
    MergeFrom(*source);
  }
}

void offmap_areas_t::MergeFrom(const offmap_areas_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.offmap_areas_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  areas_.MergeFrom(from.areas_);
}

void offmap_areas_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.offmap_areas_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_areas_t::CopyFrom(const offmap_areas_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.offmap_areas_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_areas_t::IsInitialized() const {
  return true;
}

void offmap_areas_t::InternalSwap(offmap_areas_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  areas_.Swap(&other->areas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata offmap_areas_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void team_t::InitAsDefaultInstance() {
}
class team_t::_Internal {
 public:
};

team_t::team_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.game_data.team_t)
}
team_t::team_t(const team_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nations_(from.nations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.game_data.team_t)
}

void team_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_team_t_game_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

team_t::~team_t() {
  // @@protoc_insertion_point(destructor:pb_message.game_data.team_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void team_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void team_t::ArenaDtor(void* object) {
  team_t* _this = reinterpret_cast< team_t* >(object);
  (void)_this;
}
void team_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void team_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const team_t& team_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_team_t_game_5fdata_2eproto.base);
  return *internal_default_instance();
}


void team_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.game_data.team_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nations_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* team_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.game_data.team_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 nations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_nations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* team_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.game_data.team_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.game_data.team_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int32 nations = 2;
  {
    int byte_size = _nations_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_nations(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.game_data.team_t)
  return target;
}

size_t team_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.game_data.team_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nations = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nations_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void team_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.game_data.team_t)
  GOOGLE_DCHECK_NE(&from, this);
  const team_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<team_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.game_data.team_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.game_data.team_t)
    MergeFrom(*source);
  }
}

void team_t::MergeFrom(const team_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.game_data.team_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nations_.MergeFrom(from.nations_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void team_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.game_data.team_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_t::CopyFrom(const team_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.game_data.team_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_t::IsInitialized() const {
  return true;
}

void team_t::InternalSwap(team_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nations_.InternalSwap(&other->nations_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata team_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game_data
}  // namespace pb_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_message::game_data::unit_t* Arena::CreateMaybeMessage< ::pb_message::game_data::unit_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::unit_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::fleet_t* Arena::CreateMaybeMessage< ::pb_message::game_data::fleet_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::fleet_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::fleets_t_FleetsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::fleets_t* Arena::CreateMaybeMessage< ::pb_message::game_data::fleets_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::fleets_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::planet_t* Arena::CreateMaybeMessage< ::pb_message::game_data::planet_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::planet_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::hex_zone_fixture_t* Arena::CreateMaybeMessage< ::pb_message::game_data::hex_zone_fixture_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::hex_zone_fixture_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::hex_zone_t* Arena::CreateMaybeMessage< ::pb_message::game_data::hex_zone_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::hex_zone_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::hex_t* Arena::CreateMaybeMessage< ::pb_message::game_data::hex_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::hex_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::province_t* Arena::CreateMaybeMessage< ::pb_message::game_data::province_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::province_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::map_t* Arena::CreateMaybeMessage< ::pb_message::game_data::map_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::map_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::offmap_area_t* Arena::CreateMaybeMessage< ::pb_message::game_data::offmap_area_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::offmap_area_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::offmap_areas_t_AreasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::offmap_areas_t* Arena::CreateMaybeMessage< ::pb_message::game_data::offmap_areas_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::offmap_areas_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::game_data::team_t* Arena::CreateMaybeMessage< ::pb_message::game_data::team_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::game_data::team_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
