// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visual_config.proto

#include "visual_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_visual_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_color_t_visual_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_visual_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_map_t_PrimaryColorsEntry_DoNotUse_visual_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_visual_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_map_t_SecondaryColorsEntry_DoNotUse_visual_5fconfig_2eproto;
namespace pb_message {
namespace visual_config {
class color_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<color_t> _instance;
} _color_t_default_instance_;
class hex_map_t_PrimaryColorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_map_t_PrimaryColorsEntry_DoNotUse> _instance;
} _hex_map_t_PrimaryColorsEntry_DoNotUse_default_instance_;
class hex_map_t_SecondaryColorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_map_t_SecondaryColorsEntry_DoNotUse> _instance;
} _hex_map_t_SecondaryColorsEntry_DoNotUse_default_instance_;
class hex_map_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_map_t> _instance;
} _hex_map_t_default_instance_;
}  // namespace visual_config
}  // namespace pb_message
static void InitDefaultsscc_info_color_t_visual_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::visual_config::_color_t_default_instance_;
    new (ptr) ::pb_message::visual_config::color_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::visual_config::color_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_color_t_visual_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_color_t_visual_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_hex_map_t_visual_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::visual_config::_hex_map_t_default_instance_;
    new (ptr) ::pb_message::visual_config::hex_map_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::visual_config::hex_map_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_hex_map_t_visual_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_hex_map_t_visual_5fconfig_2eproto}, {
      &scc_info_hex_map_t_PrimaryColorsEntry_DoNotUse_visual_5fconfig_2eproto.base,
      &scc_info_hex_map_t_SecondaryColorsEntry_DoNotUse_visual_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_hex_map_t_PrimaryColorsEntry_DoNotUse_visual_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::visual_config::_hex_map_t_PrimaryColorsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse();
  }
  ::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_map_t_PrimaryColorsEntry_DoNotUse_visual_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_hex_map_t_PrimaryColorsEntry_DoNotUse_visual_5fconfig_2eproto}, {
      &scc_info_color_t_visual_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_hex_map_t_SecondaryColorsEntry_DoNotUse_visual_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::visual_config::_hex_map_t_SecondaryColorsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse();
  }
  ::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_map_t_SecondaryColorsEntry_DoNotUse_visual_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_hex_map_t_SecondaryColorsEntry_DoNotUse_visual_5fconfig_2eproto}, {
      &scc_info_color_t_visual_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_visual_5fconfig_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_visual_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_visual_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_visual_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::color_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::color_t, r_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::color_t, g_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::color_t, b_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, primary_colors_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, secondary_colors_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, national_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, province_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, planet_star_thickness_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, minor_planet_scale_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, major_planet_scale_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, star_scale_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, mb_scale_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, bats_scale_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, sb_scale_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, offmap_z_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, offmap_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, offmap_label_size_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, offmap_left_right_thickness_),
  PROTOBUF_FIELD_OFFSET(::pb_message::visual_config::hex_map_t, offmap_top_bottom_thickness_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb_message::visual_config::color_t)},
  { 8, 15, sizeof(::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse)},
  { 17, 24, sizeof(::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse)},
  { 26, -1, sizeof(::pb_message::visual_config::hex_map_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::visual_config::_color_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::visual_config::_hex_map_t_PrimaryColorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::visual_config::_hex_map_t_SecondaryColorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::visual_config::_hex_map_t_default_instance_),
};

const char descriptor_table_protodef_visual_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023visual_config.proto\022\030pb_message.visual"
  "_config\"*\n\007color_t\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005"
  "\022\t\n\001b\030\003 \001(\005\"\344\005\n\thex_map_t\022N\n\016primary_col"
  "ors\030\001 \003(\01326.pb_message.visual_config.hex"
  "_map_t.PrimaryColorsEntry\022R\n\020secondary_c"
  "olors\030\002 \003(\01328.pb_message.visual_config.h"
  "ex_map_t.SecondaryColorsEntry\022!\n\031nationa"
  "l_border_thickness\030\003 \001(\002\022!\n\031province_bor"
  "der_thickness\030\004 \001(\002\022\035\n\025planet_star_thick"
  "ness\030\005 \001(\002\022\032\n\022minor_planet_scale\030\006 \001(\002\022\032"
  "\n\022major_planet_scale\030\007 \001(\002\022\022\n\nstar_scale"
  "\030\010 \001(\002\022\020\n\010mb_scale\030\t \001(\002\022\022\n\nbats_scale\030\n"
  " \001(\002\022\020\n\010sb_scale\030\013 \001(\002\022\020\n\010offmap_z\030\014 \001(\002"
  "\022\037\n\027offmap_border_thickness\030\r \001(\002\022\031\n\021off"
  "map_label_size\030\016 \001(\002\022#\n\033offmap_left_righ"
  "t_thickness\030\017 \001(\002\022#\n\033offmap_top_bottom_t"
  "hickness\030\020 \001(\002\032W\n\022PrimaryColorsEntry\022\013\n\003"
  "key\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!.pb_message.vi"
  "sual_config.color_t:\0028\001\032Y\n\024SecondaryColo"
  "rsEntry\022\013\n\003key\030\001 \001(\t\0220\n\005value\030\002 \001(\0132!.pb"
  "_message.visual_config.color_t:\0028\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_visual_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_visual_5fconfig_2eproto_sccs[4] = {
  &scc_info_color_t_visual_5fconfig_2eproto.base,
  &scc_info_hex_map_t_visual_5fconfig_2eproto.base,
  &scc_info_hex_map_t_PrimaryColorsEntry_DoNotUse_visual_5fconfig_2eproto.base,
  &scc_info_hex_map_t_SecondaryColorsEntry_DoNotUse_visual_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_visual_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_visual_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_visual_5fconfig_2eproto, "visual_config.proto", 842,
  &descriptor_table_visual_5fconfig_2eproto_once, descriptor_table_visual_5fconfig_2eproto_sccs, descriptor_table_visual_5fconfig_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_visual_5fconfig_2eproto::offsets,
  file_level_metadata_visual_5fconfig_2eproto, 4, file_level_enum_descriptors_visual_5fconfig_2eproto, file_level_service_descriptors_visual_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_visual_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_visual_5fconfig_2eproto)), true);
namespace pb_message {
namespace visual_config {

// ===================================================================

void color_t::InitAsDefaultInstance() {
}
class color_t::_Internal {
 public:
};

color_t::color_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.visual_config.color_t)
}
color_t::color_t(const color_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:pb_message.visual_config.color_t)
}

void color_t::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

color_t::~color_t() {
  // @@protoc_insertion_point(destructor:pb_message.visual_config.color_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void color_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void color_t::ArenaDtor(void* object) {
  color_t* _this = reinterpret_cast< color_t* >(object);
  (void)_this;
}
void color_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void color_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const color_t& color_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_color_t_visual_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void color_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.visual_config.color_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* color_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* color_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.visual_config.color_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
  }

  // int32 g = 2;
  if (this->g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
  }

  // int32 b = 3;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.visual_config.color_t)
  return target;
}

size_t color_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.visual_config.color_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  // int32 g = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());
  }

  // int32 b = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void color_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.visual_config.color_t)
  GOOGLE_DCHECK_NE(&from, this);
  const color_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<color_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.visual_config.color_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.visual_config.color_t)
    MergeFrom(*source);
  }
}

void color_t::MergeFrom(const color_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.visual_config.color_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.g() != 0) {
    _internal_set_g(from._internal_g());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
}

void color_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.visual_config.color_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void color_t::CopyFrom(const color_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.visual_config.color_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool color_t::IsInitialized() const {
  return true;
}

void color_t::InternalSwap(color_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(color_t, b_)
      + sizeof(color_t::b_)
      - PROTOBUF_FIELD_OFFSET(color_t, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata color_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

hex_map_t_PrimaryColorsEntry_DoNotUse::hex_map_t_PrimaryColorsEntry_DoNotUse() {}
hex_map_t_PrimaryColorsEntry_DoNotUse::hex_map_t_PrimaryColorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void hex_map_t_PrimaryColorsEntry_DoNotUse::MergeFrom(const hex_map_t_PrimaryColorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata hex_map_t_PrimaryColorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void hex_map_t_PrimaryColorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

hex_map_t_SecondaryColorsEntry_DoNotUse::hex_map_t_SecondaryColorsEntry_DoNotUse() {}
hex_map_t_SecondaryColorsEntry_DoNotUse::hex_map_t_SecondaryColorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void hex_map_t_SecondaryColorsEntry_DoNotUse::MergeFrom(const hex_map_t_SecondaryColorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata hex_map_t_SecondaryColorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void hex_map_t_SecondaryColorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void hex_map_t::InitAsDefaultInstance() {
}
class hex_map_t::_Internal {
 public:
};

hex_map_t::hex_map_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  primary_colors_(arena),
  secondary_colors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.visual_config.hex_map_t)
}
hex_map_t::hex_map_t(const hex_map_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  primary_colors_.MergeFrom(from.primary_colors_);
  secondary_colors_.MergeFrom(from.secondary_colors_);
  ::memcpy(&national_border_thickness_, &from.national_border_thickness_,
    static_cast<size_t>(reinterpret_cast<char*>(&offmap_top_bottom_thickness_) -
    reinterpret_cast<char*>(&national_border_thickness_)) + sizeof(offmap_top_bottom_thickness_));
  // @@protoc_insertion_point(copy_constructor:pb_message.visual_config.hex_map_t)
}

void hex_map_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hex_map_t_visual_5fconfig_2eproto.base);
  ::memset(&national_border_thickness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offmap_top_bottom_thickness_) -
      reinterpret_cast<char*>(&national_border_thickness_)) + sizeof(offmap_top_bottom_thickness_));
}

hex_map_t::~hex_map_t() {
  // @@protoc_insertion_point(destructor:pb_message.visual_config.hex_map_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hex_map_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void hex_map_t::ArenaDtor(void* object) {
  hex_map_t* _this = reinterpret_cast< hex_map_t* >(object);
  (void)_this;
}
void hex_map_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hex_map_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hex_map_t& hex_map_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hex_map_t_visual_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void hex_map_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.visual_config.hex_map_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_colors_.Clear();
  secondary_colors_.Clear();
  ::memset(&national_border_thickness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offmap_top_bottom_thickness_) -
      reinterpret_cast<char*>(&national_border_thickness_)) + sizeof(offmap_top_bottom_thickness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hex_map_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&primary_colors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&secondary_colors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // float national_border_thickness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          national_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float province_border_thickness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          province_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float planet_star_thickness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          planet_star_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float minor_planet_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          minor_planet_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float major_planet_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          major_planet_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float star_scale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          star_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mb_scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          mb_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bats_scale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          bats_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sb_scale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          sb_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offmap_z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          offmap_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offmap_border_thickness = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          offmap_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offmap_label_size = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          offmap_label_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offmap_left_right_thickness = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          offmap_left_right_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offmap_top_bottom_thickness = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          offmap_top_bottom_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hex_map_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.visual_config.hex_map_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
  if (!this->_internal_primary_colors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.visual_config.hex_map_t.PrimaryColorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_primary_colors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_primary_colors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_iterator
          it = this->_internal_primary_colors().begin();
          it != this->_internal_primary_colors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = hex_map_t_PrimaryColorsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_iterator
          it = this->_internal_primary_colors().begin();
          it != this->_internal_primary_colors().end(); ++it) {
        target = hex_map_t_PrimaryColorsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
  if (!this->_internal_secondary_colors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.visual_config.hex_map_t.SecondaryColorsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secondary_colors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secondary_colors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_iterator
          it = this->_internal_secondary_colors().begin();
          it != this->_internal_secondary_colors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = hex_map_t_SecondaryColorsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_iterator
          it = this->_internal_secondary_colors().begin();
          it != this->_internal_secondary_colors().end(); ++it) {
        target = hex_map_t_SecondaryColorsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // float national_border_thickness = 3;
  if (!(this->national_border_thickness() <= 0 && this->national_border_thickness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_national_border_thickness(), target);
  }

  // float province_border_thickness = 4;
  if (!(this->province_border_thickness() <= 0 && this->province_border_thickness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_province_border_thickness(), target);
  }

  // float planet_star_thickness = 5;
  if (!(this->planet_star_thickness() <= 0 && this->planet_star_thickness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_planet_star_thickness(), target);
  }

  // float minor_planet_scale = 6;
  if (!(this->minor_planet_scale() <= 0 && this->minor_planet_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_minor_planet_scale(), target);
  }

  // float major_planet_scale = 7;
  if (!(this->major_planet_scale() <= 0 && this->major_planet_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_major_planet_scale(), target);
  }

  // float star_scale = 8;
  if (!(this->star_scale() <= 0 && this->star_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_star_scale(), target);
  }

  // float mb_scale = 9;
  if (!(this->mb_scale() <= 0 && this->mb_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_mb_scale(), target);
  }

  // float bats_scale = 10;
  if (!(this->bats_scale() <= 0 && this->bats_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_bats_scale(), target);
  }

  // float sb_scale = 11;
  if (!(this->sb_scale() <= 0 && this->sb_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sb_scale(), target);
  }

  // float offmap_z = 12;
  if (!(this->offmap_z() <= 0 && this->offmap_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_offmap_z(), target);
  }

  // float offmap_border_thickness = 13;
  if (!(this->offmap_border_thickness() <= 0 && this->offmap_border_thickness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_offmap_border_thickness(), target);
  }

  // float offmap_label_size = 14;
  if (!(this->offmap_label_size() <= 0 && this->offmap_label_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_offmap_label_size(), target);
  }

  // float offmap_left_right_thickness = 15;
  if (!(this->offmap_left_right_thickness() <= 0 && this->offmap_left_right_thickness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_offmap_left_right_thickness(), target);
  }

  // float offmap_top_bottom_thickness = 16;
  if (!(this->offmap_top_bottom_thickness() <= 0 && this->offmap_top_bottom_thickness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_offmap_top_bottom_thickness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.visual_config.hex_map_t)
  return target;
}

size_t hex_map_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.visual_config.hex_map_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pb_message.visual_config.color_t> primary_colors = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_primary_colors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_iterator
      it = this->_internal_primary_colors().begin();
      it != this->_internal_primary_colors().end(); ++it) {
    total_size += hex_map_t_PrimaryColorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .pb_message.visual_config.color_t> secondary_colors = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secondary_colors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::visual_config::color_t >::const_iterator
      it = this->_internal_secondary_colors().begin();
      it != this->_internal_secondary_colors().end(); ++it) {
    total_size += hex_map_t_SecondaryColorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // float national_border_thickness = 3;
  if (!(this->national_border_thickness() <= 0 && this->national_border_thickness() >= 0)) {
    total_size += 1 + 4;
  }

  // float province_border_thickness = 4;
  if (!(this->province_border_thickness() <= 0 && this->province_border_thickness() >= 0)) {
    total_size += 1 + 4;
  }

  // float planet_star_thickness = 5;
  if (!(this->planet_star_thickness() <= 0 && this->planet_star_thickness() >= 0)) {
    total_size += 1 + 4;
  }

  // float minor_planet_scale = 6;
  if (!(this->minor_planet_scale() <= 0 && this->minor_planet_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float major_planet_scale = 7;
  if (!(this->major_planet_scale() <= 0 && this->major_planet_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float star_scale = 8;
  if (!(this->star_scale() <= 0 && this->star_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float mb_scale = 9;
  if (!(this->mb_scale() <= 0 && this->mb_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float bats_scale = 10;
  if (!(this->bats_scale() <= 0 && this->bats_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float sb_scale = 11;
  if (!(this->sb_scale() <= 0 && this->sb_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float offmap_z = 12;
  if (!(this->offmap_z() <= 0 && this->offmap_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float offmap_border_thickness = 13;
  if (!(this->offmap_border_thickness() <= 0 && this->offmap_border_thickness() >= 0)) {
    total_size += 1 + 4;
  }

  // float offmap_label_size = 14;
  if (!(this->offmap_label_size() <= 0 && this->offmap_label_size() >= 0)) {
    total_size += 1 + 4;
  }

  // float offmap_left_right_thickness = 15;
  if (!(this->offmap_left_right_thickness() <= 0 && this->offmap_left_right_thickness() >= 0)) {
    total_size += 1 + 4;
  }

  // float offmap_top_bottom_thickness = 16;
  if (!(this->offmap_top_bottom_thickness() <= 0 && this->offmap_top_bottom_thickness() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hex_map_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.visual_config.hex_map_t)
  GOOGLE_DCHECK_NE(&from, this);
  const hex_map_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hex_map_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.visual_config.hex_map_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.visual_config.hex_map_t)
    MergeFrom(*source);
  }
}

void hex_map_t::MergeFrom(const hex_map_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.visual_config.hex_map_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  primary_colors_.MergeFrom(from.primary_colors_);
  secondary_colors_.MergeFrom(from.secondary_colors_);
  if (!(from.national_border_thickness() <= 0 && from.national_border_thickness() >= 0)) {
    _internal_set_national_border_thickness(from._internal_national_border_thickness());
  }
  if (!(from.province_border_thickness() <= 0 && from.province_border_thickness() >= 0)) {
    _internal_set_province_border_thickness(from._internal_province_border_thickness());
  }
  if (!(from.planet_star_thickness() <= 0 && from.planet_star_thickness() >= 0)) {
    _internal_set_planet_star_thickness(from._internal_planet_star_thickness());
  }
  if (!(from.minor_planet_scale() <= 0 && from.minor_planet_scale() >= 0)) {
    _internal_set_minor_planet_scale(from._internal_minor_planet_scale());
  }
  if (!(from.major_planet_scale() <= 0 && from.major_planet_scale() >= 0)) {
    _internal_set_major_planet_scale(from._internal_major_planet_scale());
  }
  if (!(from.star_scale() <= 0 && from.star_scale() >= 0)) {
    _internal_set_star_scale(from._internal_star_scale());
  }
  if (!(from.mb_scale() <= 0 && from.mb_scale() >= 0)) {
    _internal_set_mb_scale(from._internal_mb_scale());
  }
  if (!(from.bats_scale() <= 0 && from.bats_scale() >= 0)) {
    _internal_set_bats_scale(from._internal_bats_scale());
  }
  if (!(from.sb_scale() <= 0 && from.sb_scale() >= 0)) {
    _internal_set_sb_scale(from._internal_sb_scale());
  }
  if (!(from.offmap_z() <= 0 && from.offmap_z() >= 0)) {
    _internal_set_offmap_z(from._internal_offmap_z());
  }
  if (!(from.offmap_border_thickness() <= 0 && from.offmap_border_thickness() >= 0)) {
    _internal_set_offmap_border_thickness(from._internal_offmap_border_thickness());
  }
  if (!(from.offmap_label_size() <= 0 && from.offmap_label_size() >= 0)) {
    _internal_set_offmap_label_size(from._internal_offmap_label_size());
  }
  if (!(from.offmap_left_right_thickness() <= 0 && from.offmap_left_right_thickness() >= 0)) {
    _internal_set_offmap_left_right_thickness(from._internal_offmap_left_right_thickness());
  }
  if (!(from.offmap_top_bottom_thickness() <= 0 && from.offmap_top_bottom_thickness() >= 0)) {
    _internal_set_offmap_top_bottom_thickness(from._internal_offmap_top_bottom_thickness());
  }
}

void hex_map_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.visual_config.hex_map_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_map_t::CopyFrom(const hex_map_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.visual_config.hex_map_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_map_t::IsInitialized() const {
  return true;
}

void hex_map_t::InternalSwap(hex_map_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  primary_colors_.Swap(&other->primary_colors_);
  secondary_colors_.Swap(&other->secondary_colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hex_map_t, offmap_top_bottom_thickness_)
      + sizeof(hex_map_t::offmap_top_bottom_thickness_)
      - PROTOBUF_FIELD_OFFSET(hex_map_t, national_border_thickness_)>(
          reinterpret_cast<char*>(&national_border_thickness_),
          reinterpret_cast<char*>(&other->national_border_thickness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hex_map_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace visual_config
}  // namespace pb_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_message::visual_config::color_t* Arena::CreateMaybeMessage< ::pb_message::visual_config::color_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::visual_config::color_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::visual_config::hex_map_t_PrimaryColorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::visual_config::hex_map_t_SecondaryColorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::visual_config::hex_map_t* Arena::CreateMaybeMessage< ::pb_message::visual_config::hex_map_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::visual_config::hex_map_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
