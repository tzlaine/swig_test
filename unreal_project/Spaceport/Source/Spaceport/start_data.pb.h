// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: start_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_start_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_start_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_start_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[45]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_start_5fdata_2eproto;
namespace pb_message {
class capital_hex_t;
class capital_hex_tDefaultTypeInternal;
extern capital_hex_tDefaultTypeInternal _capital_hex_t_default_instance_;
class capital_hex_zone_t;
class capital_hex_zone_tDefaultTypeInternal;
extern capital_hex_zone_tDefaultTypeInternal _capital_hex_zone_t_default_instance_;
class capital_t;
class capital_tDefaultTypeInternal;
extern capital_tDefaultTypeInternal _capital_t_default_instance_;
class fleet_release_condition_t;
class fleet_release_condition_tDefaultTypeInternal;
extern fleet_release_condition_tDefaultTypeInternal _fleet_release_condition_t_default_instance_;
class hex_t;
class hex_tDefaultTypeInternal;
extern hex_tDefaultTypeInternal _hex_t_default_instance_;
class map_t;
class map_tDefaultTypeInternal;
extern map_tDefaultTypeInternal _map_t_default_instance_;
class map_t_StartingNationalHoldingsEntry_DoNotUse;
class map_t_StartingNationalHoldingsEntry_DoNotUseDefaultTypeInternal;
extern map_t_StartingNationalHoldingsEntry_DoNotUseDefaultTypeInternal _map_t_StartingNationalHoldingsEntry_DoNotUse_default_instance_;
class model_t;
class model_tDefaultTypeInternal;
extern model_tDefaultTypeInternal _model_t_default_instance_;
class mothball_reserve_t;
class mothball_reserve_tDefaultTypeInternal;
extern mothball_reserve_tDefaultTypeInternal _mothball_reserve_t_default_instance_;
class nation_t;
class nation_tDefaultTypeInternal;
extern nation_tDefaultTypeInternal _nation_t_default_instance_;
class nation_unit_defs_t;
class nation_unit_defs_tDefaultTypeInternal;
extern nation_unit_defs_tDefaultTypeInternal _nation_unit_defs_t_default_instance_;
class nations_t;
class nations_tDefaultTypeInternal;
extern nations_tDefaultTypeInternal _nations_t_default_instance_;
class nations_t_NationsEntry_DoNotUse;
class nations_t_NationsEntry_DoNotUseDefaultTypeInternal;
extern nations_t_NationsEntry_DoNotUseDefaultTypeInternal _nations_t_NationsEntry_DoNotUse_default_instance_;
class offmap_area_t;
class offmap_area_tDefaultTypeInternal;
extern offmap_area_tDefaultTypeInternal _offmap_area_t_default_instance_;
class offmap_possesions_t;
class offmap_possesions_tDefaultTypeInternal;
extern offmap_possesions_tDefaultTypeInternal _offmap_possesions_t_default_instance_;
class oob_unit_t;
class oob_unit_tDefaultTypeInternal;
extern oob_unit_tDefaultTypeInternal _oob_unit_t_default_instance_;
class order_of_battle_t;
class order_of_battle_tDefaultTypeInternal;
extern order_of_battle_tDefaultTypeInternal _order_of_battle_t_default_instance_;
class order_of_battle_t_StartingFleetsEntry_DoNotUse;
class order_of_battle_t_StartingFleetsEntry_DoNotUseDefaultTypeInternal;
extern order_of_battle_t_StartingFleetsEntry_DoNotUseDefaultTypeInternal _order_of_battle_t_StartingFleetsEntry_DoNotUse_default_instance_;
class orders_of_battle_t;
class orders_of_battle_tDefaultTypeInternal;
extern orders_of_battle_tDefaultTypeInternal _orders_of_battle_t_default_instance_;
class orders_of_battle_t_OobsEntry_DoNotUse;
class orders_of_battle_t_OobsEntry_DoNotUseDefaultTypeInternal;
extern orders_of_battle_t_OobsEntry_DoNotUseDefaultTypeInternal _orders_of_battle_t_OobsEntry_DoNotUse_default_instance_;
class production_cost_t;
class production_cost_tDefaultTypeInternal;
extern production_cost_tDefaultTypeInternal _production_cost_t_default_instance_;
class production_element_t;
class production_element_tDefaultTypeInternal;
extern production_element_tDefaultTypeInternal _production_element_t_default_instance_;
class province_hex_t;
class province_hex_tDefaultTypeInternal;
extern province_hex_tDefaultTypeInternal _province_hex_t_default_instance_;
class province_t;
class province_tDefaultTypeInternal;
extern province_tDefaultTypeInternal _province_t_default_instance_;
class scenario_condition_t;
class scenario_condition_tDefaultTypeInternal;
extern scenario_condition_tDefaultTypeInternal _scenario_condition_t_default_instance_;
class scenario_condition_t_object_t;
class scenario_condition_t_object_tDefaultTypeInternal;
extern scenario_condition_t_object_tDefaultTypeInternal _scenario_condition_t_object_t_default_instance_;
class scenario_t;
class scenario_tDefaultTypeInternal;
extern scenario_tDefaultTypeInternal _scenario_t_default_instance_;
class scenario_t_NationsEntry_DoNotUse;
class scenario_t_NationsEntry_DoNotUseDefaultTypeInternal;
extern scenario_t_NationsEntry_DoNotUseDefaultTypeInternal _scenario_t_NationsEntry_DoNotUse_default_instance_;
class scenario_t_nation_t;
class scenario_t_nation_tDefaultTypeInternal;
extern scenario_t_nation_tDefaultTypeInternal _scenario_t_nation_t_default_instance_;
class scenario_turn_t;
class scenario_turn_tDefaultTypeInternal;
extern scenario_turn_tDefaultTypeInternal _scenario_turn_t_default_instance_;
class scenario_turn_t_NationalActionsEntry_DoNotUse;
class scenario_turn_t_NationalActionsEntry_DoNotUseDefaultTypeInternal;
extern scenario_turn_t_NationalActionsEntry_DoNotUseDefaultTypeInternal _scenario_turn_t_NationalActionsEntry_DoNotUse_default_instance_;
class scenario_turn_t_national_action_t;
class scenario_turn_t_national_action_tDefaultTypeInternal;
extern scenario_turn_t_national_action_tDefaultTypeInternal _scenario_turn_t_national_action_t_default_instance_;
class scenario_turn_t_national_action_t_action_t;
class scenario_turn_t_national_action_t_action_tDefaultTypeInternal;
extern scenario_turn_t_national_action_t_action_tDefaultTypeInternal _scenario_turn_t_national_action_t_action_t_default_instance_;
class starting_fleet_t;
class starting_fleet_tDefaultTypeInternal;
extern starting_fleet_tDefaultTypeInternal _starting_fleet_t_default_instance_;
class starting_fleet_t_HexPlacementLimitsEntry_DoNotUse;
class starting_fleet_t_HexPlacementLimitsEntry_DoNotUseDefaultTypeInternal;
extern starting_fleet_t_HexPlacementLimitsEntry_DoNotUseDefaultTypeInternal _starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_default_instance_;
class starting_national_holdings_t;
class starting_national_holdings_tDefaultTypeInternal;
extern starting_national_holdings_tDefaultTypeInternal _starting_national_holdings_t_default_instance_;
class team_t;
class team_tDefaultTypeInternal;
extern team_tDefaultTypeInternal _team_t_default_instance_;
class towable_t;
class towable_tDefaultTypeInternal;
extern towable_tDefaultTypeInternal _towable_t_default_instance_;
class unit_def_side_t;
class unit_def_side_tDefaultTypeInternal;
extern unit_def_side_tDefaultTypeInternal _unit_def_side_t_default_instance_;
class unit_def_t;
class unit_def_tDefaultTypeInternal;
extern unit_def_tDefaultTypeInternal _unit_def_t_default_instance_;
class unit_def_t_ConversionsEntry_DoNotUse;
class unit_def_t_ConversionsEntry_DoNotUseDefaultTypeInternal;
extern unit_def_t_ConversionsEntry_DoNotUseDefaultTypeInternal _unit_def_t_ConversionsEntry_DoNotUse_default_instance_;
class unit_def_t_SubstitutionsEntry_DoNotUse;
class unit_def_t_SubstitutionsEntry_DoNotUseDefaultTypeInternal;
extern unit_def_t_SubstitutionsEntry_DoNotUseDefaultTypeInternal _unit_def_t_SubstitutionsEntry_DoNotUse_default_instance_;
class unit_defs_t;
class unit_defs_tDefaultTypeInternal;
extern unit_defs_tDefaultTypeInternal _unit_defs_t_default_instance_;
class unit_defs_t_NationUnitsEntry_DoNotUse;
class unit_defs_t_NationUnitsEntry_DoNotUseDefaultTypeInternal;
extern unit_defs_t_NationUnitsEntry_DoNotUseDefaultTypeInternal _unit_defs_t_NationUnitsEntry_DoNotUse_default_instance_;
class war_entry_condition_t;
class war_entry_condition_tDefaultTypeInternal;
extern war_entry_condition_tDefaultTypeInternal _war_entry_condition_t_default_instance_;
}  // namespace pb_message
PROTOBUF_NAMESPACE_OPEN
template<> ::pb_message::capital_hex_t* Arena::CreateMaybeMessage<::pb_message::capital_hex_t>(Arena*);
template<> ::pb_message::capital_hex_zone_t* Arena::CreateMaybeMessage<::pb_message::capital_hex_zone_t>(Arena*);
template<> ::pb_message::capital_t* Arena::CreateMaybeMessage<::pb_message::capital_t>(Arena*);
template<> ::pb_message::fleet_release_condition_t* Arena::CreateMaybeMessage<::pb_message::fleet_release_condition_t>(Arena*);
template<> ::pb_message::hex_t* Arena::CreateMaybeMessage<::pb_message::hex_t>(Arena*);
template<> ::pb_message::map_t* Arena::CreateMaybeMessage<::pb_message::map_t>(Arena*);
template<> ::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse>(Arena*);
template<> ::pb_message::model_t* Arena::CreateMaybeMessage<::pb_message::model_t>(Arena*);
template<> ::pb_message::mothball_reserve_t* Arena::CreateMaybeMessage<::pb_message::mothball_reserve_t>(Arena*);
template<> ::pb_message::nation_t* Arena::CreateMaybeMessage<::pb_message::nation_t>(Arena*);
template<> ::pb_message::nation_unit_defs_t* Arena::CreateMaybeMessage<::pb_message::nation_unit_defs_t>(Arena*);
template<> ::pb_message::nations_t* Arena::CreateMaybeMessage<::pb_message::nations_t>(Arena*);
template<> ::pb_message::nations_t_NationsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::nations_t_NationsEntry_DoNotUse>(Arena*);
template<> ::pb_message::offmap_area_t* Arena::CreateMaybeMessage<::pb_message::offmap_area_t>(Arena*);
template<> ::pb_message::offmap_possesions_t* Arena::CreateMaybeMessage<::pb_message::offmap_possesions_t>(Arena*);
template<> ::pb_message::oob_unit_t* Arena::CreateMaybeMessage<::pb_message::oob_unit_t>(Arena*);
template<> ::pb_message::order_of_battle_t* Arena::CreateMaybeMessage<::pb_message::order_of_battle_t>(Arena*);
template<> ::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse>(Arena*);
template<> ::pb_message::orders_of_battle_t* Arena::CreateMaybeMessage<::pb_message::orders_of_battle_t>(Arena*);
template<> ::pb_message::orders_of_battle_t_OobsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::orders_of_battle_t_OobsEntry_DoNotUse>(Arena*);
template<> ::pb_message::production_cost_t* Arena::CreateMaybeMessage<::pb_message::production_cost_t>(Arena*);
template<> ::pb_message::production_element_t* Arena::CreateMaybeMessage<::pb_message::production_element_t>(Arena*);
template<> ::pb_message::province_hex_t* Arena::CreateMaybeMessage<::pb_message::province_hex_t>(Arena*);
template<> ::pb_message::province_t* Arena::CreateMaybeMessage<::pb_message::province_t>(Arena*);
template<> ::pb_message::scenario_condition_t* Arena::CreateMaybeMessage<::pb_message::scenario_condition_t>(Arena*);
template<> ::pb_message::scenario_condition_t_object_t* Arena::CreateMaybeMessage<::pb_message::scenario_condition_t_object_t>(Arena*);
template<> ::pb_message::scenario_t* Arena::CreateMaybeMessage<::pb_message::scenario_t>(Arena*);
template<> ::pb_message::scenario_t_NationsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::scenario_t_NationsEntry_DoNotUse>(Arena*);
template<> ::pb_message::scenario_t_nation_t* Arena::CreateMaybeMessage<::pb_message::scenario_t_nation_t>(Arena*);
template<> ::pb_message::scenario_turn_t* Arena::CreateMaybeMessage<::pb_message::scenario_turn_t>(Arena*);
template<> ::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse>(Arena*);
template<> ::pb_message::scenario_turn_t_national_action_t* Arena::CreateMaybeMessage<::pb_message::scenario_turn_t_national_action_t>(Arena*);
template<> ::pb_message::scenario_turn_t_national_action_t_action_t* Arena::CreateMaybeMessage<::pb_message::scenario_turn_t_national_action_t_action_t>(Arena*);
template<> ::pb_message::starting_fleet_t* Arena::CreateMaybeMessage<::pb_message::starting_fleet_t>(Arena*);
template<> ::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse>(Arena*);
template<> ::pb_message::starting_national_holdings_t* Arena::CreateMaybeMessage<::pb_message::starting_national_holdings_t>(Arena*);
template<> ::pb_message::team_t* Arena::CreateMaybeMessage<::pb_message::team_t>(Arena*);
template<> ::pb_message::towable_t* Arena::CreateMaybeMessage<::pb_message::towable_t>(Arena*);
template<> ::pb_message::unit_def_side_t* Arena::CreateMaybeMessage<::pb_message::unit_def_side_t>(Arena*);
template<> ::pb_message::unit_def_t* Arena::CreateMaybeMessage<::pb_message::unit_def_t>(Arena*);
template<> ::pb_message::unit_def_t_ConversionsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::unit_def_t_ConversionsEntry_DoNotUse>(Arena*);
template<> ::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse>(Arena*);
template<> ::pb_message::unit_defs_t* Arena::CreateMaybeMessage<::pb_message::unit_defs_t>(Arena*);
template<> ::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse* Arena::CreateMaybeMessage<::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse>(Arena*);
template<> ::pb_message::war_entry_condition_t* Arena::CreateMaybeMessage<::pb_message::war_entry_condition_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb_message {

enum scenario_condition_t_action_t : int {
  scenario_condition_t_action_t_occupies = 0,
  scenario_condition_t_action_t_destroys = 1,
  scenario_condition_t_action_t_scenario_condition_t_action_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  scenario_condition_t_action_t_scenario_condition_t_action_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool scenario_condition_t_action_t_IsValid(int value);
constexpr scenario_condition_t_action_t scenario_condition_t_action_t_action_t_MIN = scenario_condition_t_action_t_occupies;
constexpr scenario_condition_t_action_t scenario_condition_t_action_t_action_t_MAX = scenario_condition_t_action_t_destroys;
constexpr int scenario_condition_t_action_t_action_t_ARRAYSIZE = scenario_condition_t_action_t_action_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* scenario_condition_t_action_t_descriptor();
template<typename T>
inline const std::string& scenario_condition_t_action_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, scenario_condition_t_action_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function scenario_condition_t_action_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    scenario_condition_t_action_t_descriptor(), enum_t_value);
}
inline bool scenario_condition_t_action_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, scenario_condition_t_action_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<scenario_condition_t_action_t>(
    scenario_condition_t_action_t_descriptor(), name, value);
}
enum scenario_condition_t_object_type_t : int {
  scenario_condition_t_object_type_t_hexes = 0,
  scenario_condition_t_object_type_t_sb = 1,
  scenario_condition_t_object_type_t_fleet_area = 2,
  scenario_condition_t_object_type_t_nation = 3,
  scenario_condition_t_object_type_t_scenario_condition_t_object_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  scenario_condition_t_object_type_t_scenario_condition_t_object_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool scenario_condition_t_object_type_t_IsValid(int value);
constexpr scenario_condition_t_object_type_t scenario_condition_t_object_type_t_object_type_t_MIN = scenario_condition_t_object_type_t_hexes;
constexpr scenario_condition_t_object_type_t scenario_condition_t_object_type_t_object_type_t_MAX = scenario_condition_t_object_type_t_nation;
constexpr int scenario_condition_t_object_type_t_object_type_t_ARRAYSIZE = scenario_condition_t_object_type_t_object_type_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* scenario_condition_t_object_type_t_descriptor();
template<typename T>
inline const std::string& scenario_condition_t_object_type_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, scenario_condition_t_object_type_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function scenario_condition_t_object_type_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    scenario_condition_t_object_type_t_descriptor(), enum_t_value);
}
inline bool scenario_condition_t_object_type_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, scenario_condition_t_object_type_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<scenario_condition_t_object_type_t>(
    scenario_condition_t_object_type_t_descriptor(), name, value);
}
enum scenario_turn_t_national_action_t_action_type_t : int {
  scenario_turn_t_national_action_t_action_type_t_release_fleets = 0,
  scenario_turn_t_national_action_t_action_type_t_declare_war = 1,
  scenario_turn_t_national_action_t_action_type_t_scenario_turn_t_national_action_t_action_type_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  scenario_turn_t_national_action_t_action_type_t_scenario_turn_t_national_action_t_action_type_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool scenario_turn_t_national_action_t_action_type_t_IsValid(int value);
constexpr scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t_action_type_t_action_type_t_MIN = scenario_turn_t_national_action_t_action_type_t_release_fleets;
constexpr scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t_action_type_t_action_type_t_MAX = scenario_turn_t_national_action_t_action_type_t_declare_war;
constexpr int scenario_turn_t_national_action_t_action_type_t_action_type_t_ARRAYSIZE = scenario_turn_t_national_action_t_action_type_t_action_type_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* scenario_turn_t_national_action_t_action_type_t_descriptor();
template<typename T>
inline const std::string& scenario_turn_t_national_action_t_action_type_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, scenario_turn_t_national_action_t_action_type_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function scenario_turn_t_national_action_t_action_type_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    scenario_turn_t_national_action_t_action_type_t_descriptor(), enum_t_value);
}
inline bool scenario_turn_t_national_action_t_action_type_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, scenario_turn_t_national_action_t_action_type_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<scenario_turn_t_national_action_t_action_type_t>(
    scenario_turn_t_national_action_t_action_type_t_descriptor(), name, value);
}
enum feature_t : int {
  no_feature = 0,
  bats = 1,
  sb = 2,
  min = 3,
  maj = 4,
  capital = 5,
  feature_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  feature_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool feature_t_IsValid(int value);
constexpr feature_t feature_t_MIN = no_feature;
constexpr feature_t feature_t_MAX = capital;
constexpr int feature_t_ARRAYSIZE = feature_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* feature_t_descriptor();
template<typename T>
inline const std::string& feature_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, feature_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function feature_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    feature_t_descriptor(), enum_t_value);
}
inline bool feature_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, feature_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<feature_t>(
    feature_t_descriptor(), name, value);
}
// ===================================================================

class capital_hex_zone_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.capital_hex_zone_t) */ {
 public:
  inline capital_hex_zone_t() : capital_hex_zone_t(nullptr) {}
  virtual ~capital_hex_zone_t();

  capital_hex_zone_t(const capital_hex_zone_t& from);
  capital_hex_zone_t(capital_hex_zone_t&& from) noexcept
    : capital_hex_zone_t() {
    *this = ::std::move(from);
  }

  inline capital_hex_zone_t& operator=(const capital_hex_zone_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline capital_hex_zone_t& operator=(capital_hex_zone_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const capital_hex_zone_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const capital_hex_zone_t* internal_default_instance() {
    return reinterpret_cast<const capital_hex_zone_t*>(
               &_capital_hex_zone_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(capital_hex_zone_t& a, capital_hex_zone_t& b) {
    a.Swap(&b);
  }
  inline void Swap(capital_hex_zone_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(capital_hex_zone_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline capital_hex_zone_t* New() const final {
    return CreateMaybeMessage<capital_hex_zone_t>(nullptr);
  }

  capital_hex_zone_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<capital_hex_zone_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const capital_hex_zone_t& from);
  void MergeFrom(const capital_hex_zone_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(capital_hex_zone_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.capital_hex_zone_t";
  }
  protected:
  explicit capital_hex_zone_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .pb_message.feature_t features = 2 [packed = true];
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  ::pb_message::feature_t _internal_features(int index) const;
  void _internal_add_features(::pb_message::feature_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_features();
  public:
  ::pb_message::feature_t features(int index) const;
  void set_features(int index, ::pb_message::feature_t value);
  void add_features(::pb_message::feature_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_features();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb_message.capital_hex_zone_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> features_;
  mutable std::atomic<int> _features_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class capital_hex_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.capital_hex_t) */ {
 public:
  inline capital_hex_t() : capital_hex_t(nullptr) {}
  virtual ~capital_hex_t();

  capital_hex_t(const capital_hex_t& from);
  capital_hex_t(capital_hex_t&& from) noexcept
    : capital_hex_t() {
    *this = ::std::move(from);
  }

  inline capital_hex_t& operator=(const capital_hex_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline capital_hex_t& operator=(capital_hex_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const capital_hex_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const capital_hex_t* internal_default_instance() {
    return reinterpret_cast<const capital_hex_t*>(
               &_capital_hex_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(capital_hex_t& a, capital_hex_t& b) {
    a.Swap(&b);
  }
  inline void Swap(capital_hex_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(capital_hex_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline capital_hex_t* New() const final {
    return CreateMaybeMessage<capital_hex_t>(nullptr);
  }

  capital_hex_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<capital_hex_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const capital_hex_t& from);
  void MergeFrom(const capital_hex_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(capital_hex_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.capital_hex_t";
  }
  protected:
  explicit capital_hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZonesFieldNumber = 2,
    kCoordFieldNumber = 1,
  };
  // repeated .pb_message.capital_hex_zone_t zones = 2;
  int zones_size() const;
  private:
  int _internal_zones_size() const;
  public:
  void clear_zones();
  ::pb_message::capital_hex_zone_t* mutable_zones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_zone_t >*
      mutable_zones();
  private:
  const ::pb_message::capital_hex_zone_t& _internal_zones(int index) const;
  ::pb_message::capital_hex_zone_t* _internal_add_zones();
  public:
  const ::pb_message::capital_hex_zone_t& zones(int index) const;
  ::pb_message::capital_hex_zone_t* add_zones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_zone_t >&
      zones() const;

  // int32 coord = 1;
  void clear_coord();
  ::PROTOBUF_NAMESPACE_ID::int32 coord() const;
  void set_coord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coord() const;
  void _internal_set_coord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.capital_hex_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_zone_t > zones_;
  ::PROTOBUF_NAMESPACE_ID::int32 coord_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class capital_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.capital_t) */ {
 public:
  inline capital_t() : capital_t(nullptr) {}
  virtual ~capital_t();

  capital_t(const capital_t& from);
  capital_t(capital_t&& from) noexcept
    : capital_t() {
    *this = ::std::move(from);
  }

  inline capital_t& operator=(const capital_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline capital_t& operator=(capital_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const capital_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const capital_t* internal_default_instance() {
    return reinterpret_cast<const capital_t*>(
               &_capital_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(capital_t& a, capital_t& b) {
    a.Swap(&b);
  }
  inline void Swap(capital_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(capital_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline capital_t* New() const final {
    return CreateMaybeMessage<capital_t>(nullptr);
  }

  capital_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<capital_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const capital_t& from);
  void MergeFrom(const capital_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(capital_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.capital_t";
  }
  protected:
  explicit capital_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexesFieldNumber = 1,
  };
  // repeated .pb_message.capital_hex_t hexes = 1;
  int hexes_size() const;
  private:
  int _internal_hexes_size() const;
  public:
  void clear_hexes();
  ::pb_message::capital_hex_t* mutable_hexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_t >*
      mutable_hexes();
  private:
  const ::pb_message::capital_hex_t& _internal_hexes(int index) const;
  ::pb_message::capital_hex_t* _internal_add_hexes();
  public:
  const ::pb_message::capital_hex_t& hexes(int index) const;
  ::pb_message::capital_hex_t* add_hexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_t >&
      hexes() const;

  // @@protoc_insertion_point(class_scope:pb_message.capital_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_t > hexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class offmap_possesions_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.offmap_possesions_t) */ {
 public:
  inline offmap_possesions_t() : offmap_possesions_t(nullptr) {}
  virtual ~offmap_possesions_t();

  offmap_possesions_t(const offmap_possesions_t& from);
  offmap_possesions_t(offmap_possesions_t&& from) noexcept
    : offmap_possesions_t() {
    *this = ::std::move(from);
  }

  inline offmap_possesions_t& operator=(const offmap_possesions_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline offmap_possesions_t& operator=(offmap_possesions_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const offmap_possesions_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offmap_possesions_t* internal_default_instance() {
    return reinterpret_cast<const offmap_possesions_t*>(
               &_offmap_possesions_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(offmap_possesions_t& a, offmap_possesions_t& b) {
    a.Swap(&b);
  }
  inline void Swap(offmap_possesions_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(offmap_possesions_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline offmap_possesions_t* New() const final {
    return CreateMaybeMessage<offmap_possesions_t>(nullptr);
  }

  offmap_possesions_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<offmap_possesions_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const offmap_possesions_t& from);
  void MergeFrom(const offmap_possesions_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offmap_possesions_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.offmap_possesions_t";
  }
  protected:
  explicit offmap_possesions_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProvincesFieldNumber = 1,
    kMinsFieldNumber = 2,
    kMajsFieldNumber = 3,
    kSurveyShipsFieldNumber = 4,
    kCannotBuildOffmapCapitalFieldNumber = 5,
    kOldShipyardFieldNumber = 6,
  };
  // int32 provinces = 1;
  void clear_provinces();
  ::PROTOBUF_NAMESPACE_ID::int32 provinces() const;
  void set_provinces(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_provinces() const;
  void _internal_set_provinces(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mins = 2;
  void clear_mins();
  ::PROTOBUF_NAMESPACE_ID::int32 mins() const;
  void set_mins(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mins() const;
  void _internal_set_mins(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 majs = 3;
  void clear_majs();
  ::PROTOBUF_NAMESPACE_ID::int32 majs() const;
  void set_majs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_majs() const;
  void _internal_set_majs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 survey_ships = 4;
  void clear_survey_ships();
  ::PROTOBUF_NAMESPACE_ID::int32 survey_ships() const;
  void set_survey_ships(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_survey_ships() const;
  void _internal_set_survey_ships(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool cannot_build_offmap_capital = 5;
  void clear_cannot_build_offmap_capital();
  bool cannot_build_offmap_capital() const;
  void set_cannot_build_offmap_capital(bool value);
  private:
  bool _internal_cannot_build_offmap_capital() const;
  void _internal_set_cannot_build_offmap_capital(bool value);
  public:

  // bool old_shipyard = 6;
  void clear_old_shipyard();
  bool old_shipyard() const;
  void set_old_shipyard(bool value);
  private:
  bool _internal_old_shipyard() const;
  void _internal_set_old_shipyard(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.offmap_possesions_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 provinces_;
  ::PROTOBUF_NAMESPACE_ID::int32 mins_;
  ::PROTOBUF_NAMESPACE_ID::int32 majs_;
  ::PROTOBUF_NAMESPACE_ID::int32 survey_ships_;
  bool cannot_build_offmap_capital_;
  bool old_shipyard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class nation_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.nation_t) */ {
 public:
  inline nation_t() : nation_t(nullptr) {}
  virtual ~nation_t();

  nation_t(const nation_t& from);
  nation_t(nation_t&& from) noexcept
    : nation_t() {
    *this = ::std::move(from);
  }

  inline nation_t& operator=(const nation_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline nation_t& operator=(nation_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nation_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nation_t* internal_default_instance() {
    return reinterpret_cast<const nation_t*>(
               &_nation_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(nation_t& a, nation_t& b) {
    a.Swap(&b);
  }
  inline void Swap(nation_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nation_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nation_t* New() const final {
    return CreateMaybeMessage<nation_t>(nullptr);
  }

  nation_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nation_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nation_t& from);
  void MergeFrom(const nation_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nation_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.nation_t";
  }
  protected:
  explicit nation_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShortNameFieldNumber = 2,
    kCapitalFieldNumber = 3,
    kOffmapPossesionsFieldNumber = 6,
    kFreeStrategicMovesFieldNumber = 4,
    kCapitalStarPointsFieldNumber = 5,
    kNationIdFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string short_name = 2;
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // .pb_message.capital_t capital = 3;
  bool has_capital() const;
  private:
  bool _internal_has_capital() const;
  public:
  void clear_capital();
  const ::pb_message::capital_t& capital() const;
  ::pb_message::capital_t* release_capital();
  ::pb_message::capital_t* mutable_capital();
  void set_allocated_capital(::pb_message::capital_t* capital);
  private:
  const ::pb_message::capital_t& _internal_capital() const;
  ::pb_message::capital_t* _internal_mutable_capital();
  public:
  void unsafe_arena_set_allocated_capital(
      ::pb_message::capital_t* capital);
  ::pb_message::capital_t* unsafe_arena_release_capital();

  // .pb_message.offmap_possesions_t offmap_possesions = 6;
  bool has_offmap_possesions() const;
  private:
  bool _internal_has_offmap_possesions() const;
  public:
  void clear_offmap_possesions();
  const ::pb_message::offmap_possesions_t& offmap_possesions() const;
  ::pb_message::offmap_possesions_t* release_offmap_possesions();
  ::pb_message::offmap_possesions_t* mutable_offmap_possesions();
  void set_allocated_offmap_possesions(::pb_message::offmap_possesions_t* offmap_possesions);
  private:
  const ::pb_message::offmap_possesions_t& _internal_offmap_possesions() const;
  ::pb_message::offmap_possesions_t* _internal_mutable_offmap_possesions();
  public:
  void unsafe_arena_set_allocated_offmap_possesions(
      ::pb_message::offmap_possesions_t* offmap_possesions);
  ::pb_message::offmap_possesions_t* unsafe_arena_release_offmap_possesions();

  // int32 free_strategic_moves = 4;
  void clear_free_strategic_moves();
  ::PROTOBUF_NAMESPACE_ID::int32 free_strategic_moves() const;
  void set_free_strategic_moves(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_free_strategic_moves() const;
  void _internal_set_free_strategic_moves(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 capital_star_points = 5;
  void clear_capital_star_points();
  ::PROTOBUF_NAMESPACE_ID::int32 capital_star_points() const;
  void set_capital_star_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_capital_star_points() const;
  void _internal_set_capital_star_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nation_id = 7;
  void clear_nation_id();
  ::PROTOBUF_NAMESPACE_ID::int32 nation_id() const;
  void set_nation_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nation_id() const;
  void _internal_set_nation_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.nation_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::pb_message::capital_t* capital_;
  ::pb_message::offmap_possesions_t* offmap_possesions_;
  ::PROTOBUF_NAMESPACE_ID::int32 free_strategic_moves_;
  ::PROTOBUF_NAMESPACE_ID::int32 capital_star_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 nation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class nations_t_NationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<nations_t_NationsEntry_DoNotUse, 
    std::string, ::pb_message::nation_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<nations_t_NationsEntry_DoNotUse, 
    std::string, ::pb_message::nation_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  nations_t_NationsEntry_DoNotUse();
  explicit nations_t_NationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const nations_t_NationsEntry_DoNotUse& other);
  static const nations_t_NationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const nations_t_NationsEntry_DoNotUse*>(&_nations_t_NationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.nations_t.NationsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class nations_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.nations_t) */ {
 public:
  inline nations_t() : nations_t(nullptr) {}
  virtual ~nations_t();

  nations_t(const nations_t& from);
  nations_t(nations_t&& from) noexcept
    : nations_t() {
    *this = ::std::move(from);
  }

  inline nations_t& operator=(const nations_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline nations_t& operator=(nations_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nations_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nations_t* internal_default_instance() {
    return reinterpret_cast<const nations_t*>(
               &_nations_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(nations_t& a, nations_t& b) {
    a.Swap(&b);
  }
  inline void Swap(nations_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nations_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nations_t* New() const final {
    return CreateMaybeMessage<nations_t>(nullptr);
  }

  nations_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nations_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nations_t& from);
  void MergeFrom(const nations_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nations_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.nations_t";
  }
  protected:
  explicit nations_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNationsFieldNumber = 1,
  };
  // map<string, .pb_message.nation_t> nations = 1;
  int nations_size() const;
  private:
  int _internal_nations_size() const;
  public:
  void clear_nations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >&
      _internal_nations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >*
      _internal_mutable_nations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >&
      nations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >*
      mutable_nations();

  // @@protoc_insertion_point(class_scope:pb_message.nations_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      nations_t_NationsEntry_DoNotUse,
      std::string, ::pb_message::nation_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class hex_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.hex_t) */ {
 public:
  inline hex_t() : hex_t(nullptr) {}
  virtual ~hex_t();

  hex_t(const hex_t& from);
  hex_t(hex_t&& from) noexcept
    : hex_t() {
    *this = ::std::move(from);
  }

  inline hex_t& operator=(const hex_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline hex_t& operator=(hex_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hex_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hex_t* internal_default_instance() {
    return reinterpret_cast<const hex_t*>(
               &_hex_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(hex_t& a, hex_t& b) {
    a.Swap(&b);
  }
  inline void Swap(hex_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hex_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hex_t* New() const final {
    return CreateMaybeMessage<hex_t>(nullptr);
  }

  hex_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hex_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hex_t& from);
  void MergeFrom(const hex_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hex_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.hex_t";
  }
  protected:
  explicit hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kFeatureFieldNumber = 3,
  };
  // .pb_message.hex_coord_t coord = 1;
  bool has_coord() const;
  private:
  bool _internal_has_coord() const;
  public:
  void clear_coord();
  const ::pb_message::hex_coord_t& coord() const;
  ::pb_message::hex_coord_t* release_coord();
  ::pb_message::hex_coord_t* mutable_coord();
  void set_allocated_coord(::pb_message::hex_coord_t* coord);
  private:
  const ::pb_message::hex_coord_t& _internal_coord() const;
  ::pb_message::hex_coord_t* _internal_mutable_coord();
  public:
  void unsafe_arena_set_allocated_coord(
      ::pb_message::hex_coord_t* coord);
  ::pb_message::hex_coord_t* unsafe_arena_release_coord();

  // int32 owner = 2;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::int32 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.feature_t feature = 3;
  void clear_feature();
  ::pb_message::feature_t feature() const;
  void set_feature(::pb_message::feature_t value);
  private:
  ::pb_message::feature_t _internal_feature() const;
  void _internal_set_feature(::pb_message::feature_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.hex_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb_message::hex_coord_t* coord_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_;
  int feature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class province_hex_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.province_hex_t) */ {
 public:
  inline province_hex_t() : province_hex_t(nullptr) {}
  virtual ~province_hex_t();

  province_hex_t(const province_hex_t& from);
  province_hex_t(province_hex_t&& from) noexcept
    : province_hex_t() {
    *this = ::std::move(from);
  }

  inline province_hex_t& operator=(const province_hex_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline province_hex_t& operator=(province_hex_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const province_hex_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const province_hex_t* internal_default_instance() {
    return reinterpret_cast<const province_hex_t*>(
               &_province_hex_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(province_hex_t& a, province_hex_t& b) {
    a.Swap(&b);
  }
  inline void Swap(province_hex_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(province_hex_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline province_hex_t* New() const final {
    return CreateMaybeMessage<province_hex_t>(nullptr);
  }

  province_hex_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<province_hex_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const province_hex_t& from);
  void MergeFrom(const province_hex_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(province_hex_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.province_hex_t";
  }
  protected:
  explicit province_hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexFieldNumber = 1,
    kFeatureFieldNumber = 2,
  };
  // int32 hex = 1;
  void clear_hex();
  ::PROTOBUF_NAMESPACE_ID::int32 hex() const;
  void set_hex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hex() const;
  void _internal_set_hex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.feature_t feature = 2;
  void clear_feature();
  ::pb_message::feature_t feature() const;
  void set_feature(::pb_message::feature_t value);
  private:
  ::pb_message::feature_t _internal_feature() const;
  void _internal_set_feature(::pb_message::feature_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.province_hex_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 hex_;
  int feature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class province_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.province_t) */ {
 public:
  inline province_t() : province_t(nullptr) {}
  virtual ~province_t();

  province_t(const province_t& from);
  province_t(province_t&& from) noexcept
    : province_t() {
    *this = ::std::move(from);
  }

  inline province_t& operator=(const province_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline province_t& operator=(province_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const province_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const province_t* internal_default_instance() {
    return reinterpret_cast<const province_t*>(
               &_province_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(province_t& a, province_t& b) {
    a.Swap(&b);
  }
  inline void Swap(province_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(province_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline province_t* New() const final {
    return CreateMaybeMessage<province_t>(nullptr);
  }

  province_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<province_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const province_t& from);
  void MergeFrom(const province_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(province_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.province_t";
  }
  protected:
  explicit province_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHexesFieldNumber = 1,
  };
  // repeated .pb_message.province_hex_t hexes = 1;
  int hexes_size() const;
  private:
  int _internal_hexes_size() const;
  public:
  void clear_hexes();
  ::pb_message::province_hex_t* mutable_hexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_hex_t >*
      mutable_hexes();
  private:
  const ::pb_message::province_hex_t& _internal_hexes(int index) const;
  ::pb_message::province_hex_t* _internal_add_hexes();
  public:
  const ::pb_message::province_hex_t& hexes(int index) const;
  ::pb_message::province_hex_t* add_hexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_hex_t >&
      hexes() const;

  // @@protoc_insertion_point(class_scope:pb_message.province_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_hex_t > hexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class offmap_area_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.offmap_area_t) */ {
 public:
  inline offmap_area_t() : offmap_area_t(nullptr) {}
  virtual ~offmap_area_t();

  offmap_area_t(const offmap_area_t& from);
  offmap_area_t(offmap_area_t&& from) noexcept
    : offmap_area_t() {
    *this = ::std::move(from);
  }

  inline offmap_area_t& operator=(const offmap_area_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline offmap_area_t& operator=(offmap_area_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const offmap_area_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offmap_area_t* internal_default_instance() {
    return reinterpret_cast<const offmap_area_t*>(
               &_offmap_area_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(offmap_area_t& a, offmap_area_t& b) {
    a.Swap(&b);
  }
  inline void Swap(offmap_area_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(offmap_area_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline offmap_area_t* New() const final {
    return CreateMaybeMessage<offmap_area_t>(nullptr);
  }

  offmap_area_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<offmap_area_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const offmap_area_t& from);
  void MergeFrom(const offmap_area_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offmap_area_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.offmap_area_t";
  }
  protected:
  explicit offmap_area_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kFeatureHexesFieldNumber = 3,
    kAdjacentHexesFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated .pb_message.feature_t features = 2 [packed = true];
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  ::pb_message::feature_t _internal_features(int index) const;
  void _internal_add_features(::pb_message::feature_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_features();
  public:
  ::pb_message::feature_t features(int index) const;
  void set_features(int index, ::pb_message::feature_t value);
  void add_features(::pb_message::feature_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_features();

  // repeated int32 feature_hexes = 3 [packed = true];
  int feature_hexes_size() const;
  private:
  int _internal_feature_hexes_size() const;
  public:
  void clear_feature_hexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_feature_hexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_feature_hexes() const;
  void _internal_add_feature_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_feature_hexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 feature_hexes(int index) const;
  void set_feature_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_feature_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      feature_hexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_feature_hexes();

  // repeated int32 adjacent_hexes = 4 [packed = true];
  int adjacent_hexes_size() const;
  private:
  int _internal_adjacent_hexes_size() const;
  public:
  void clear_adjacent_hexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adjacent_hexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_adjacent_hexes() const;
  void _internal_add_adjacent_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_adjacent_hexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 adjacent_hexes(int index) const;
  void set_adjacent_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_adjacent_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      adjacent_hexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_adjacent_hexes();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb_message.offmap_area_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> features_;
  mutable std::atomic<int> _features_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > feature_hexes_;
  mutable std::atomic<int> _feature_hexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > adjacent_hexes_;
  mutable std::atomic<int> _adjacent_hexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class starting_national_holdings_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.starting_national_holdings_t) */ {
 public:
  inline starting_national_holdings_t() : starting_national_holdings_t(nullptr) {}
  virtual ~starting_national_holdings_t();

  starting_national_holdings_t(const starting_national_holdings_t& from);
  starting_national_holdings_t(starting_national_holdings_t&& from) noexcept
    : starting_national_holdings_t() {
    *this = ::std::move(from);
  }

  inline starting_national_holdings_t& operator=(const starting_national_holdings_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline starting_national_holdings_t& operator=(starting_national_holdings_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const starting_national_holdings_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const starting_national_holdings_t* internal_default_instance() {
    return reinterpret_cast<const starting_national_holdings_t*>(
               &_starting_national_holdings_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(starting_national_holdings_t& a, starting_national_holdings_t& b) {
    a.Swap(&b);
  }
  inline void Swap(starting_national_holdings_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(starting_national_holdings_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline starting_national_holdings_t* New() const final {
    return CreateMaybeMessage<starting_national_holdings_t>(nullptr);
  }

  starting_national_holdings_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<starting_national_holdings_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const starting_national_holdings_t& from);
  void MergeFrom(const starting_national_holdings_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(starting_national_holdings_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.starting_national_holdings_t";
  }
  protected:
  explicit starting_national_holdings_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProvincesFieldNumber = 1,
    kOffmapAreaFieldNumber = 2,
  };
  // repeated .pb_message.province_t provinces = 1;
  int provinces_size() const;
  private:
  int _internal_provinces_size() const;
  public:
  void clear_provinces();
  ::pb_message::province_t* mutable_provinces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_t >*
      mutable_provinces();
  private:
  const ::pb_message::province_t& _internal_provinces(int index) const;
  ::pb_message::province_t* _internal_add_provinces();
  public:
  const ::pb_message::province_t& provinces(int index) const;
  ::pb_message::province_t* add_provinces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_t >&
      provinces() const;

  // .pb_message.offmap_area_t offmap_area = 2;
  bool has_offmap_area() const;
  private:
  bool _internal_has_offmap_area() const;
  public:
  void clear_offmap_area();
  const ::pb_message::offmap_area_t& offmap_area() const;
  ::pb_message::offmap_area_t* release_offmap_area();
  ::pb_message::offmap_area_t* mutable_offmap_area();
  void set_allocated_offmap_area(::pb_message::offmap_area_t* offmap_area);
  private:
  const ::pb_message::offmap_area_t& _internal_offmap_area() const;
  ::pb_message::offmap_area_t* _internal_mutable_offmap_area();
  public:
  void unsafe_arena_set_allocated_offmap_area(
      ::pb_message::offmap_area_t* offmap_area);
  ::pb_message::offmap_area_t* unsafe_arena_release_offmap_area();

  // @@protoc_insertion_point(class_scope:pb_message.starting_national_holdings_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_t > provinces_;
  ::pb_message::offmap_area_t* offmap_area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class map_t_StartingNationalHoldingsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<map_t_StartingNationalHoldingsEntry_DoNotUse, 
    std::string, ::pb_message::starting_national_holdings_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<map_t_StartingNationalHoldingsEntry_DoNotUse, 
    std::string, ::pb_message::starting_national_holdings_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  map_t_StartingNationalHoldingsEntry_DoNotUse();
  explicit map_t_StartingNationalHoldingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const map_t_StartingNationalHoldingsEntry_DoNotUse& other);
  static const map_t_StartingNationalHoldingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const map_t_StartingNationalHoldingsEntry_DoNotUse*>(&_map_t_StartingNationalHoldingsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.map_t.StartingNationalHoldingsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class map_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.map_t) */ {
 public:
  inline map_t() : map_t(nullptr) {}
  virtual ~map_t();

  map_t(const map_t& from);
  map_t(map_t&& from) noexcept
    : map_t() {
    *this = ::std::move(from);
  }

  inline map_t& operator=(const map_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline map_t& operator=(map_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const map_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_t* internal_default_instance() {
    return reinterpret_cast<const map_t*>(
               &_map_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(map_t& a, map_t& b) {
    a.Swap(&b);
  }
  inline void Swap(map_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(map_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline map_t* New() const final {
    return CreateMaybeMessage<map_t>(nullptr);
  }

  map_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<map_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const map_t& from);
  void MergeFrom(const map_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.map_t";
  }
  protected:
  explicit map_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNzPlanetsFieldNumber = 3,
    kNzHexesFieldNumber = 4,
    kStartingNationalHoldingsFieldNumber = 5,
    kHexesFieldNumber = 6,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated int32 nz_planets = 3 [packed = true];
  int nz_planets_size() const;
  private:
  int _internal_nz_planets_size() const;
  public:
  void clear_nz_planets();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nz_planets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_nz_planets() const;
  void _internal_add_nz_planets(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_nz_planets();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 nz_planets(int index) const;
  void set_nz_planets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_nz_planets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      nz_planets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_nz_planets();

  // repeated int32 nz_hexes = 4 [packed = true];
  int nz_hexes_size() const;
  private:
  int _internal_nz_hexes_size() const;
  public:
  void clear_nz_hexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nz_hexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_nz_hexes() const;
  void _internal_add_nz_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_nz_hexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 nz_hexes(int index) const;
  void set_nz_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_nz_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      nz_hexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_nz_hexes();

  // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
  int starting_national_holdings_size() const;
  private:
  int _internal_starting_national_holdings_size() const;
  public:
  void clear_starting_national_holdings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >&
      _internal_starting_national_holdings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >*
      _internal_mutable_starting_national_holdings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >&
      starting_national_holdings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >*
      mutable_starting_national_holdings();

  // repeated .pb_message.hex_t hexes = 6;
  int hexes_size() const;
  private:
  int _internal_hexes_size() const;
  public:
  void clear_hexes();
  ::pb_message::hex_t* mutable_hexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::hex_t >*
      mutable_hexes();
  private:
  const ::pb_message::hex_t& _internal_hexes(int index) const;
  ::pb_message::hex_t* _internal_add_hexes();
  public:
  const ::pb_message::hex_t& hexes(int index) const;
  ::pb_message::hex_t* add_hexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::hex_t >&
      hexes() const;

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.map_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > nz_planets_;
  mutable std::atomic<int> _nz_planets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > nz_hexes_;
  mutable std::atomic<int> _nz_hexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      map_t_StartingNationalHoldingsEntry_DoNotUse,
      std::string, ::pb_message::starting_national_holdings_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > starting_national_holdings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::hex_t > hexes_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class model_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.model_t) */ {
 public:
  inline model_t() : model_t(nullptr) {}
  virtual ~model_t();

  model_t(const model_t& from);
  model_t(model_t&& from) noexcept
    : model_t() {
    *this = ::std::move(from);
  }

  inline model_t& operator=(const model_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline model_t& operator=(model_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const model_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const model_t* internal_default_instance() {
    return reinterpret_cast<const model_t*>(
               &_model_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(model_t& a, model_t& b) {
    a.Swap(&b);
  }
  inline void Swap(model_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(model_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline model_t* New() const final {
    return CreateMaybeMessage<model_t>(nullptr);
  }

  model_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<model_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const model_t& from);
  void MergeFrom(const model_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(model_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.model_t";
  }
  protected:
  explicit model_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNationsFieldNumber = 1,
    kMapFieldNumber = 2,
  };
  // .pb_message.nations_t nations = 1;
  bool has_nations() const;
  private:
  bool _internal_has_nations() const;
  public:
  void clear_nations();
  const ::pb_message::nations_t& nations() const;
  ::pb_message::nations_t* release_nations();
  ::pb_message::nations_t* mutable_nations();
  void set_allocated_nations(::pb_message::nations_t* nations);
  private:
  const ::pb_message::nations_t& _internal_nations() const;
  ::pb_message::nations_t* _internal_mutable_nations();
  public:
  void unsafe_arena_set_allocated_nations(
      ::pb_message::nations_t* nations);
  ::pb_message::nations_t* unsafe_arena_release_nations();

  // .pb_message.map_t map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::pb_message::map_t& map() const;
  ::pb_message::map_t* release_map();
  ::pb_message::map_t* mutable_map();
  void set_allocated_map(::pb_message::map_t* map);
  private:
  const ::pb_message::map_t& _internal_map() const;
  ::pb_message::map_t* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::pb_message::map_t* map);
  ::pb_message::map_t* unsafe_arena_release_map();

  // @@protoc_insertion_point(class_scope:pb_message.model_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb_message::nations_t* nations_;
  ::pb_message::map_t* map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class oob_unit_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.oob_unit_t) */ {
 public:
  inline oob_unit_t() : oob_unit_t(nullptr) {}
  virtual ~oob_unit_t();

  oob_unit_t(const oob_unit_t& from);
  oob_unit_t(oob_unit_t&& from) noexcept
    : oob_unit_t() {
    *this = ::std::move(from);
  }

  inline oob_unit_t& operator=(const oob_unit_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline oob_unit_t& operator=(oob_unit_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oob_unit_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const oob_unit_t* internal_default_instance() {
    return reinterpret_cast<const oob_unit_t*>(
               &_oob_unit_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(oob_unit_t& a, oob_unit_t& b) {
    a.Swap(&b);
  }
  inline void Swap(oob_unit_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oob_unit_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oob_unit_t* New() const final {
    return CreateMaybeMessage<oob_unit_t>(nullptr);
  }

  oob_unit_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oob_unit_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oob_unit_t& from);
  void MergeFrom(const oob_unit_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oob_unit_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.oob_unit_t";
  }
  protected:
  explicit oob_unit_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // string unit = 1;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // int32 times = 2;
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.oob_unit_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class production_element_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.production_element_t) */ {
 public:
  inline production_element_t() : production_element_t(nullptr) {}
  virtual ~production_element_t();

  production_element_t(const production_element_t& from);
  production_element_t(production_element_t&& from) noexcept
    : production_element_t() {
    *this = ::std::move(from);
  }

  inline production_element_t& operator=(const production_element_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline production_element_t& operator=(production_element_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const production_element_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const production_element_t* internal_default_instance() {
    return reinterpret_cast<const production_element_t*>(
               &_production_element_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(production_element_t& a, production_element_t& b) {
    a.Swap(&b);
  }
  inline void Swap(production_element_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(production_element_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline production_element_t* New() const final {
    return CreateMaybeMessage<production_element_t>(nullptr);
  }

  production_element_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<production_element_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const production_element_t& from);
  void MergeFrom(const production_element_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(production_element_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.production_element_t";
  }
  protected:
  explicit production_element_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 3,
    kYearFieldNumber = 1,
    kSeasonFieldNumber = 2,
  };
  // repeated .pb_message.oob_unit_t units = 3;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  ::pb_message::oob_unit_t* mutable_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
      mutable_units();
  private:
  const ::pb_message::oob_unit_t& _internal_units(int index) const;
  ::pb_message::oob_unit_t* _internal_add_units();
  public:
  const ::pb_message::oob_unit_t& units(int index) const;
  ::pb_message::oob_unit_t* add_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
      units() const;

  // int32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.season_t season = 2;
  void clear_season();
  ::pb_message::season_t season() const;
  void set_season(::pb_message::season_t value);
  private:
  ::pb_message::season_t _internal_season() const;
  void _internal_set_season(::pb_message::season_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.production_element_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t > units_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  int season_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class starting_fleet_t_HexPlacementLimitsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<starting_fleet_t_HexPlacementLimitsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<starting_fleet_t_HexPlacementLimitsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  starting_fleet_t_HexPlacementLimitsEntry_DoNotUse();
  explicit starting_fleet_t_HexPlacementLimitsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const starting_fleet_t_HexPlacementLimitsEntry_DoNotUse& other);
  static const starting_fleet_t_HexPlacementLimitsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const starting_fleet_t_HexPlacementLimitsEntry_DoNotUse*>(&_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class starting_fleet_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.starting_fleet_t) */ {
 public:
  inline starting_fleet_t() : starting_fleet_t(nullptr) {}
  virtual ~starting_fleet_t();

  starting_fleet_t(const starting_fleet_t& from);
  starting_fleet_t(starting_fleet_t&& from) noexcept
    : starting_fleet_t() {
    *this = ::std::move(from);
  }

  inline starting_fleet_t& operator=(const starting_fleet_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline starting_fleet_t& operator=(starting_fleet_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const starting_fleet_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const starting_fleet_t* internal_default_instance() {
    return reinterpret_cast<const starting_fleet_t*>(
               &_starting_fleet_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(starting_fleet_t& a, starting_fleet_t& b) {
    a.Swap(&b);
  }
  inline void Swap(starting_fleet_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(starting_fleet_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline starting_fleet_t* New() const final {
    return CreateMaybeMessage<starting_fleet_t>(nullptr);
  }

  starting_fleet_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<starting_fleet_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const starting_fleet_t& from);
  void MergeFrom(const starting_fleet_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(starting_fleet_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.starting_fleet_t";
  }
  protected:
  explicit starting_fleet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHexesFieldNumber = 1,
    kUnitsFieldNumber = 2,
    kPrewarConstructionFieldNumber = 4,
    kHexPlacementLimitsFieldNumber = 7,
    kReserveFieldNumber = 3,
    kStrategicMoveArrivalYearFieldNumber = 5,
    kStrategicMoveArrivalSeasonFieldNumber = 6,
  };
  // repeated int32 hexes = 1 [packed = true];
  int hexes_size() const;
  private:
  int _internal_hexes_size() const;
  public:
  void clear_hexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hexes() const;
  void _internal_add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hexes(int index) const;
  void set_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hexes();

  // repeated .pb_message.oob_unit_t units = 2;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  ::pb_message::oob_unit_t* mutable_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
      mutable_units();
  private:
  const ::pb_message::oob_unit_t& _internal_units(int index) const;
  ::pb_message::oob_unit_t* _internal_add_units();
  public:
  const ::pb_message::oob_unit_t& units(int index) const;
  ::pb_message::oob_unit_t* add_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
      units() const;

  // repeated .pb_message.production_element_t prewar_construction = 4;
  int prewar_construction_size() const;
  private:
  int _internal_prewar_construction_size() const;
  public:
  void clear_prewar_construction();
  ::pb_message::production_element_t* mutable_prewar_construction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >*
      mutable_prewar_construction();
  private:
  const ::pb_message::production_element_t& _internal_prewar_construction(int index) const;
  ::pb_message::production_element_t* _internal_add_prewar_construction();
  public:
  const ::pb_message::production_element_t& prewar_construction(int index) const;
  ::pb_message::production_element_t* add_prewar_construction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >&
      prewar_construction() const;

  // map<int32, int32> hex_placement_limits = 7;
  int hex_placement_limits_size() const;
  private:
  int _internal_hex_placement_limits_size() const;
  public:
  void clear_hex_placement_limits();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hex_placement_limits() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hex_placement_limits();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      hex_placement_limits() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hex_placement_limits();

  // bool reserve = 3;
  void clear_reserve();
  bool reserve() const;
  void set_reserve(bool value);
  private:
  bool _internal_reserve() const;
  void _internal_set_reserve(bool value);
  public:

  // int32 strategic_move_arrival_year = 5;
  void clear_strategic_move_arrival_year();
  ::PROTOBUF_NAMESPACE_ID::int32 strategic_move_arrival_year() const;
  void set_strategic_move_arrival_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strategic_move_arrival_year() const;
  void _internal_set_strategic_move_arrival_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.season_t strategic_move_arrival_season = 6;
  void clear_strategic_move_arrival_season();
  ::pb_message::season_t strategic_move_arrival_season() const;
  void set_strategic_move_arrival_season(::pb_message::season_t value);
  private:
  ::pb_message::season_t _internal_strategic_move_arrival_season() const;
  void _internal_set_strategic_move_arrival_season(::pb_message::season_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.starting_fleet_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hexes_;
  mutable std::atomic<int> _hexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t > units_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t > prewar_construction_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      starting_fleet_t_HexPlacementLimitsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > hex_placement_limits_;
  bool reserve_;
  ::PROTOBUF_NAMESPACE_ID::int32 strategic_move_arrival_year_;
  int strategic_move_arrival_season_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class mothball_reserve_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.mothball_reserve_t) */ {
 public:
  inline mothball_reserve_t() : mothball_reserve_t(nullptr) {}
  virtual ~mothball_reserve_t();

  mothball_reserve_t(const mothball_reserve_t& from);
  mothball_reserve_t(mothball_reserve_t&& from) noexcept
    : mothball_reserve_t() {
    *this = ::std::move(from);
  }

  inline mothball_reserve_t& operator=(const mothball_reserve_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mothball_reserve_t& operator=(mothball_reserve_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mothball_reserve_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mothball_reserve_t* internal_default_instance() {
    return reinterpret_cast<const mothball_reserve_t*>(
               &_mothball_reserve_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(mothball_reserve_t& a, mothball_reserve_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mothball_reserve_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mothball_reserve_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mothball_reserve_t* New() const final {
    return CreateMaybeMessage<mothball_reserve_t>(nullptr);
  }

  mothball_reserve_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mothball_reserve_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mothball_reserve_t& from);
  void MergeFrom(const mothball_reserve_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mothball_reserve_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.mothball_reserve_t";
  }
  protected:
  explicit mothball_reserve_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
    kWarReleaseFieldNumber = 2,
    kLimitedWarReleaseFieldNumber = 3,
  };
  // repeated .pb_message.oob_unit_t units = 1;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  ::pb_message::oob_unit_t* mutable_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
      mutable_units();
  private:
  const ::pb_message::oob_unit_t& _internal_units(int index) const;
  ::pb_message::oob_unit_t* _internal_add_units();
  public:
  const ::pb_message::oob_unit_t& units(int index) const;
  ::pb_message::oob_unit_t* add_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
      units() const;

  // repeated .pb_message.oob_unit_t war_release = 2;
  int war_release_size() const;
  private:
  int _internal_war_release_size() const;
  public:
  void clear_war_release();
  ::pb_message::oob_unit_t* mutable_war_release(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
      mutable_war_release();
  private:
  const ::pb_message::oob_unit_t& _internal_war_release(int index) const;
  ::pb_message::oob_unit_t* _internal_add_war_release();
  public:
  const ::pb_message::oob_unit_t& war_release(int index) const;
  ::pb_message::oob_unit_t* add_war_release();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
      war_release() const;

  // repeated .pb_message.oob_unit_t limited_war_release = 3;
  int limited_war_release_size() const;
  private:
  int _internal_limited_war_release_size() const;
  public:
  void clear_limited_war_release();
  ::pb_message::oob_unit_t* mutable_limited_war_release(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
      mutable_limited_war_release();
  private:
  const ::pb_message::oob_unit_t& _internal_limited_war_release(int index) const;
  ::pb_message::oob_unit_t* _internal_add_limited_war_release();
  public:
  const ::pb_message::oob_unit_t& limited_war_release(int index) const;
  ::pb_message::oob_unit_t* add_limited_war_release();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
      limited_war_release() const;

  // @@protoc_insertion_point(class_scope:pb_message.mothball_reserve_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t > units_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t > war_release_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t > limited_war_release_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class order_of_battle_t_StartingFleetsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<order_of_battle_t_StartingFleetsEntry_DoNotUse, 
    std::string, ::pb_message::starting_fleet_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<order_of_battle_t_StartingFleetsEntry_DoNotUse, 
    std::string, ::pb_message::starting_fleet_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  order_of_battle_t_StartingFleetsEntry_DoNotUse();
  explicit order_of_battle_t_StartingFleetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const order_of_battle_t_StartingFleetsEntry_DoNotUse& other);
  static const order_of_battle_t_StartingFleetsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const order_of_battle_t_StartingFleetsEntry_DoNotUse*>(&_order_of_battle_t_StartingFleetsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.order_of_battle_t.StartingFleetsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[20];
  }

  public:
};

// -------------------------------------------------------------------

class order_of_battle_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.order_of_battle_t) */ {
 public:
  inline order_of_battle_t() : order_of_battle_t(nullptr) {}
  virtual ~order_of_battle_t();

  order_of_battle_t(const order_of_battle_t& from);
  order_of_battle_t(order_of_battle_t&& from) noexcept
    : order_of_battle_t() {
    *this = ::std::move(from);
  }

  inline order_of_battle_t& operator=(const order_of_battle_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline order_of_battle_t& operator=(order_of_battle_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const order_of_battle_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const order_of_battle_t* internal_default_instance() {
    return reinterpret_cast<const order_of_battle_t*>(
               &_order_of_battle_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(order_of_battle_t& a, order_of_battle_t& b) {
    a.Swap(&b);
  }
  inline void Swap(order_of_battle_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(order_of_battle_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline order_of_battle_t* New() const final {
    return CreateMaybeMessage<order_of_battle_t>(nullptr);
  }

  order_of_battle_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<order_of_battle_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const order_of_battle_t& from);
  void MergeFrom(const order_of_battle_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(order_of_battle_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.order_of_battle_t";
  }
  protected:
  explicit order_of_battle_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStartingFleetsFieldNumber = 1,
    kProductionFieldNumber = 3,
    kMothballReserveFieldNumber = 2,
  };
  // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
  int starting_fleets_size() const;
  private:
  int _internal_starting_fleets_size() const;
  public:
  void clear_starting_fleets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >&
      _internal_starting_fleets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >*
      _internal_mutable_starting_fleets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >&
      starting_fleets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >*
      mutable_starting_fleets();

  // repeated .pb_message.production_element_t production = 3;
  int production_size() const;
  private:
  int _internal_production_size() const;
  public:
  void clear_production();
  ::pb_message::production_element_t* mutable_production(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >*
      mutable_production();
  private:
  const ::pb_message::production_element_t& _internal_production(int index) const;
  ::pb_message::production_element_t* _internal_add_production();
  public:
  const ::pb_message::production_element_t& production(int index) const;
  ::pb_message::production_element_t* add_production();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >&
      production() const;

  // .pb_message.mothball_reserve_t mothball_reserve = 2;
  bool has_mothball_reserve() const;
  private:
  bool _internal_has_mothball_reserve() const;
  public:
  void clear_mothball_reserve();
  const ::pb_message::mothball_reserve_t& mothball_reserve() const;
  ::pb_message::mothball_reserve_t* release_mothball_reserve();
  ::pb_message::mothball_reserve_t* mutable_mothball_reserve();
  void set_allocated_mothball_reserve(::pb_message::mothball_reserve_t* mothball_reserve);
  private:
  const ::pb_message::mothball_reserve_t& _internal_mothball_reserve() const;
  ::pb_message::mothball_reserve_t* _internal_mutable_mothball_reserve();
  public:
  void unsafe_arena_set_allocated_mothball_reserve(
      ::pb_message::mothball_reserve_t* mothball_reserve);
  ::pb_message::mothball_reserve_t* unsafe_arena_release_mothball_reserve();

  // @@protoc_insertion_point(class_scope:pb_message.order_of_battle_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      order_of_battle_t_StartingFleetsEntry_DoNotUse,
      std::string, ::pb_message::starting_fleet_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > starting_fleets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t > production_;
  ::pb_message::mothball_reserve_t* mothball_reserve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class orders_of_battle_t_OobsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<orders_of_battle_t_OobsEntry_DoNotUse, 
    std::string, ::pb_message::order_of_battle_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<orders_of_battle_t_OobsEntry_DoNotUse, 
    std::string, ::pb_message::order_of_battle_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  orders_of_battle_t_OobsEntry_DoNotUse();
  explicit orders_of_battle_t_OobsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const orders_of_battle_t_OobsEntry_DoNotUse& other);
  static const orders_of_battle_t_OobsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const orders_of_battle_t_OobsEntry_DoNotUse*>(&_orders_of_battle_t_OobsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.orders_of_battle_t.OobsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[22];
  }

  public:
};

// -------------------------------------------------------------------

class orders_of_battle_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.orders_of_battle_t) */ {
 public:
  inline orders_of_battle_t() : orders_of_battle_t(nullptr) {}
  virtual ~orders_of_battle_t();

  orders_of_battle_t(const orders_of_battle_t& from);
  orders_of_battle_t(orders_of_battle_t&& from) noexcept
    : orders_of_battle_t() {
    *this = ::std::move(from);
  }

  inline orders_of_battle_t& operator=(const orders_of_battle_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline orders_of_battle_t& operator=(orders_of_battle_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const orders_of_battle_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const orders_of_battle_t* internal_default_instance() {
    return reinterpret_cast<const orders_of_battle_t*>(
               &_orders_of_battle_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(orders_of_battle_t& a, orders_of_battle_t& b) {
    a.Swap(&b);
  }
  inline void Swap(orders_of_battle_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(orders_of_battle_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline orders_of_battle_t* New() const final {
    return CreateMaybeMessage<orders_of_battle_t>(nullptr);
  }

  orders_of_battle_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<orders_of_battle_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const orders_of_battle_t& from);
  void MergeFrom(const orders_of_battle_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(orders_of_battle_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.orders_of_battle_t";
  }
  protected:
  explicit orders_of_battle_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOobsFieldNumber = 1,
  };
  // map<string, .pb_message.order_of_battle_t> oobs = 1;
  int oobs_size() const;
  private:
  int _internal_oobs_size() const;
  public:
  void clear_oobs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >&
      _internal_oobs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >*
      _internal_mutable_oobs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >&
      oobs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >*
      mutable_oobs();

  // @@protoc_insertion_point(class_scope:pb_message.orders_of_battle_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      orders_of_battle_t_OobsEntry_DoNotUse,
      std::string, ::pb_message::order_of_battle_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > oobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class unit_def_side_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.unit_def_side_t) */ {
 public:
  inline unit_def_side_t() : unit_def_side_t(nullptr) {}
  virtual ~unit_def_side_t();

  unit_def_side_t(const unit_def_side_t& from);
  unit_def_side_t(unit_def_side_t&& from) noexcept
    : unit_def_side_t() {
    *this = ::std::move(from);
  }

  inline unit_def_side_t& operator=(const unit_def_side_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline unit_def_side_t& operator=(unit_def_side_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const unit_def_side_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unit_def_side_t* internal_default_instance() {
    return reinterpret_cast<const unit_def_side_t*>(
               &_unit_def_side_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(unit_def_side_t& a, unit_def_side_t& b) {
    a.Swap(&b);
  }
  inline void Swap(unit_def_side_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unit_def_side_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline unit_def_side_t* New() const final {
    return CreateMaybeMessage<unit_def_side_t>(nullptr);
  }

  unit_def_side_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<unit_def_side_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const unit_def_side_t& from);
  void MergeFrom(const unit_def_side_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unit_def_side_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.unit_def_side_t";
  }
  protected:
  explicit unit_def_side_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTugMissionsFieldNumber = 9,
    kAttFieldNumber = 1,
    kDefFieldNumber = 2,
    kFightersFieldNumber = 4,
    kHeavyFighterBonusFieldNumber = 5,
    kScoutFieldNumber = 3,
    kMaulerFieldNumber = 8,
    kPfsFieldNumber = 6,
    kDronesFieldNumber = 7,
  };
  // repeated .pb_message.tug_mission_t tug_missions = 9;
  int tug_missions_size() const;
  private:
  int _internal_tug_missions_size() const;
  public:
  void clear_tug_missions();
  private:
  ::pb_message::tug_mission_t _internal_tug_missions(int index) const;
  void _internal_add_tug_missions(::pb_message::tug_mission_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_tug_missions();
  public:
  ::pb_message::tug_mission_t tug_missions(int index) const;
  void set_tug_missions(int index, ::pb_message::tug_mission_t value);
  void add_tug_missions(::pb_message::tug_mission_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& tug_missions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_tug_missions();

  // float att = 1;
  void clear_att();
  float att() const;
  void set_att(float value);
  private:
  float _internal_att() const;
  void _internal_set_att(float value);
  public:

  // float def = 2;
  void clear_def();
  float def() const;
  void set_def(float value);
  private:
  float _internal_def() const;
  void _internal_set_def(float value);
  public:

  // float fighters = 4;
  void clear_fighters();
  float fighters() const;
  void set_fighters(float value);
  private:
  float _internal_fighters() const;
  void _internal_set_fighters(float value);
  public:

  // float heavy_fighter_bonus = 5;
  void clear_heavy_fighter_bonus();
  float heavy_fighter_bonus() const;
  void set_heavy_fighter_bonus(float value);
  private:
  float _internal_heavy_fighter_bonus() const;
  void _internal_set_heavy_fighter_bonus(float value);
  public:

  // bool scout = 3;
  void clear_scout();
  bool scout() const;
  void set_scout(bool value);
  private:
  bool _internal_scout() const;
  void _internal_set_scout(bool value);
  public:

  // bool mauler = 8;
  void clear_mauler();
  bool mauler() const;
  void set_mauler(bool value);
  private:
  bool _internal_mauler() const;
  void _internal_set_mauler(bool value);
  public:

  // int32 pfs = 6;
  void clear_pfs();
  ::PROTOBUF_NAMESPACE_ID::int32 pfs() const;
  void set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pfs() const;
  void _internal_set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drones = 7;
  void clear_drones();
  ::PROTOBUF_NAMESPACE_ID::int32 drones() const;
  void set_drones(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drones() const;
  void _internal_set_drones(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.unit_def_side_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> tug_missions_;
  mutable std::atomic<int> _tug_missions_cached_byte_size_;
  float att_;
  float def_;
  float fighters_;
  float heavy_fighter_bonus_;
  bool scout_;
  bool mauler_;
  ::PROTOBUF_NAMESPACE_ID::int32 pfs_;
  ::PROTOBUF_NAMESPACE_ID::int32 drones_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class towable_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.towable_t) */ {
 public:
  inline towable_t() : towable_t(nullptr) {}
  virtual ~towable_t();

  towable_t(const towable_t& from);
  towable_t(towable_t&& from) noexcept
    : towable_t() {
    *this = ::std::move(from);
  }

  inline towable_t& operator=(const towable_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline towable_t& operator=(towable_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const towable_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const towable_t* internal_default_instance() {
    return reinterpret_cast<const towable_t*>(
               &_towable_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(towable_t& a, towable_t& b) {
    a.Swap(&b);
  }
  inline void Swap(towable_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(towable_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline towable_t* New() const final {
    return CreateMaybeMessage<towable_t>(nullptr);
  }

  towable_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<towable_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const towable_t& from);
  void MergeFrom(const towable_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(towable_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.towable_t";
  }
  protected:
  explicit towable_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveCostFieldNumber = 1,
    kStratMoveLimitFieldNumber = 2,
  };
  // int32 move_cost = 1;
  void clear_move_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 move_cost() const;
  void set_move_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_move_cost() const;
  void _internal_set_move_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strat_move_limit = 2;
  void clear_strat_move_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 strat_move_limit() const;
  void set_strat_move_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strat_move_limit() const;
  void _internal_set_strat_move_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.towable_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 move_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 strat_move_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class production_cost_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.production_cost_t) */ {
 public:
  inline production_cost_t() : production_cost_t(nullptr) {}
  virtual ~production_cost_t();

  production_cost_t(const production_cost_t& from);
  production_cost_t(production_cost_t&& from) noexcept
    : production_cost_t() {
    *this = ::std::move(from);
  }

  inline production_cost_t& operator=(const production_cost_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline production_cost_t& operator=(production_cost_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const production_cost_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const production_cost_t* internal_default_instance() {
    return reinterpret_cast<const production_cost_t*>(
               &_production_cost_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(production_cost_t& a, production_cost_t& b) {
    a.Swap(&b);
  }
  inline void Swap(production_cost_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(production_cost_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline production_cost_t* New() const final {
    return CreateMaybeMessage<production_cost_t>(nullptr);
  }

  production_cost_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<production_cost_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const production_cost_t& from);
  void MergeFrom(const production_cost_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(production_cost_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.production_cost_t";
  }
  protected:
  explicit production_cost_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostFieldNumber = 1,
    kFighterCostFieldNumber = 2,
  };
  // int32 cost = 1;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fighter_cost = 2;
  void clear_fighter_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 fighter_cost() const;
  void set_fighter_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fighter_cost() const;
  void _internal_set_fighter_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.production_cost_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 fighter_cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class unit_def_t_SubstitutionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<unit_def_t_SubstitutionsEntry_DoNotUse, 
    std::string, ::pb_message::production_cost_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<unit_def_t_SubstitutionsEntry_DoNotUse, 
    std::string, ::pb_message::production_cost_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  unit_def_t_SubstitutionsEntry_DoNotUse();
  explicit unit_def_t_SubstitutionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const unit_def_t_SubstitutionsEntry_DoNotUse& other);
  static const unit_def_t_SubstitutionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const unit_def_t_SubstitutionsEntry_DoNotUse*>(&_unit_def_t_SubstitutionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.unit_def_t.SubstitutionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[27];
  }

  public:
};

// -------------------------------------------------------------------

class unit_def_t_ConversionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<unit_def_t_ConversionsEntry_DoNotUse, 
    std::string, ::pb_message::production_cost_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<unit_def_t_ConversionsEntry_DoNotUse, 
    std::string, ::pb_message::production_cost_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  unit_def_t_ConversionsEntry_DoNotUse();
  explicit unit_def_t_ConversionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const unit_def_t_ConversionsEntry_DoNotUse& other);
  static const unit_def_t_ConversionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const unit_def_t_ConversionsEntry_DoNotUse*>(&_unit_def_t_ConversionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.unit_def_t.ConversionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[28];
  }

  public:
};

// -------------------------------------------------------------------

class unit_def_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.unit_def_t) */ {
 public:
  inline unit_def_t() : unit_def_t(nullptr) {}
  virtual ~unit_def_t();

  unit_def_t(const unit_def_t& from);
  unit_def_t(unit_def_t&& from) noexcept
    : unit_def_t() {
    *this = ::std::move(from);
  }

  inline unit_def_t& operator=(const unit_def_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline unit_def_t& operator=(unit_def_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const unit_def_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unit_def_t* internal_default_instance() {
    return reinterpret_cast<const unit_def_t*>(
               &_unit_def_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(unit_def_t& a, unit_def_t& b) {
    a.Swap(&b);
  }
  inline void Swap(unit_def_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unit_def_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline unit_def_t* New() const final {
    return CreateMaybeMessage<unit_def_t>(nullptr);
  }

  unit_def_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<unit_def_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const unit_def_t& from);
  void MergeFrom(const unit_def_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unit_def_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.unit_def_t";
  }
  protected:
  explicit unit_def_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSubstitutionsFieldNumber = 10,
    kConversionsFieldNumber = 11,
    kNameFieldNumber = 1,
    kNotesFieldNumber = 17,
    kUncrippledFieldNumber = 3,
    kCrippledFieldNumber = 4,
    kAvailableFieldNumber = 6,
    kConstructionFieldNumber = 9,
    kTowableFieldNumber = 15,
    kCmdFieldNumber = 2,
    kEscortTypeFieldNumber = 5,
    kMaxInServiceFieldNumber = 8,
    kPodFieldNumber = 7,
    kNotSpaceworthyFieldNumber = 14,
    kMoveFieldNumber = 12,
    kCarrierTypeFieldNumber = 13,
    kSalvageFieldNumber = 16,
  };
  // map<string, .pb_message.production_cost_t> substitutions = 10;
  int substitutions_size() const;
  private:
  int _internal_substitutions_size() const;
  public:
  void clear_substitutions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
      _internal_substitutions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
      _internal_mutable_substitutions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
      substitutions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
      mutable_substitutions();

  // map<string, .pb_message.production_cost_t> conversions = 11;
  int conversions_size() const;
  private:
  int _internal_conversions_size() const;
  public:
  void clear_conversions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
      _internal_conversions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
      _internal_mutable_conversions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
      conversions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
      mutable_conversions();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string notes = 17;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // .pb_message.unit_def_side_t uncrippled = 3;
  bool has_uncrippled() const;
  private:
  bool _internal_has_uncrippled() const;
  public:
  void clear_uncrippled();
  const ::pb_message::unit_def_side_t& uncrippled() const;
  ::pb_message::unit_def_side_t* release_uncrippled();
  ::pb_message::unit_def_side_t* mutable_uncrippled();
  void set_allocated_uncrippled(::pb_message::unit_def_side_t* uncrippled);
  private:
  const ::pb_message::unit_def_side_t& _internal_uncrippled() const;
  ::pb_message::unit_def_side_t* _internal_mutable_uncrippled();
  public:
  void unsafe_arena_set_allocated_uncrippled(
      ::pb_message::unit_def_side_t* uncrippled);
  ::pb_message::unit_def_side_t* unsafe_arena_release_uncrippled();

  // .pb_message.unit_def_side_t crippled = 4;
  bool has_crippled() const;
  private:
  bool _internal_has_crippled() const;
  public:
  void clear_crippled();
  const ::pb_message::unit_def_side_t& crippled() const;
  ::pb_message::unit_def_side_t* release_crippled();
  ::pb_message::unit_def_side_t* mutable_crippled();
  void set_allocated_crippled(::pb_message::unit_def_side_t* crippled);
  private:
  const ::pb_message::unit_def_side_t& _internal_crippled() const;
  ::pb_message::unit_def_side_t* _internal_mutable_crippled();
  public:
  void unsafe_arena_set_allocated_crippled(
      ::pb_message::unit_def_side_t* crippled);
  ::pb_message::unit_def_side_t* unsafe_arena_release_crippled();

  // .pb_message.turn_t available = 6;
  bool has_available() const;
  private:
  bool _internal_has_available() const;
  public:
  void clear_available();
  const ::pb_message::turn_t& available() const;
  ::pb_message::turn_t* release_available();
  ::pb_message::turn_t* mutable_available();
  void set_allocated_available(::pb_message::turn_t* available);
  private:
  const ::pb_message::turn_t& _internal_available() const;
  ::pb_message::turn_t* _internal_mutable_available();
  public:
  void unsafe_arena_set_allocated_available(
      ::pb_message::turn_t* available);
  ::pb_message::turn_t* unsafe_arena_release_available();

  // .pb_message.production_cost_t construction = 9;
  bool has_construction() const;
  private:
  bool _internal_has_construction() const;
  public:
  void clear_construction();
  const ::pb_message::production_cost_t& construction() const;
  ::pb_message::production_cost_t* release_construction();
  ::pb_message::production_cost_t* mutable_construction();
  void set_allocated_construction(::pb_message::production_cost_t* construction);
  private:
  const ::pb_message::production_cost_t& _internal_construction() const;
  ::pb_message::production_cost_t* _internal_mutable_construction();
  public:
  void unsafe_arena_set_allocated_construction(
      ::pb_message::production_cost_t* construction);
  ::pb_message::production_cost_t* unsafe_arena_release_construction();

  // .pb_message.towable_t towable = 15;
  bool has_towable() const;
  private:
  bool _internal_has_towable() const;
  public:
  void clear_towable();
  const ::pb_message::towable_t& towable() const;
  ::pb_message::towable_t* release_towable();
  ::pb_message::towable_t* mutable_towable();
  void set_allocated_towable(::pb_message::towable_t* towable);
  private:
  const ::pb_message::towable_t& _internal_towable() const;
  ::pb_message::towable_t* _internal_mutable_towable();
  public:
  void unsafe_arena_set_allocated_towable(
      ::pb_message::towable_t* towable);
  ::pb_message::towable_t* unsafe_arena_release_towable();

  // int32 cmd = 2;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.escort_type_t escort_type = 5;
  void clear_escort_type();
  ::pb_message::escort_type_t escort_type() const;
  void set_escort_type(::pb_message::escort_type_t value);
  private:
  ::pb_message::escort_type_t _internal_escort_type() const;
  void _internal_set_escort_type(::pb_message::escort_type_t value);
  public:

  // int32 max_in_service = 8;
  void clear_max_in_service();
  ::PROTOBUF_NAMESPACE_ID::int32 max_in_service() const;
  void set_max_in_service(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_in_service() const;
  void _internal_set_max_in_service(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool pod = 7;
  void clear_pod();
  bool pod() const;
  void set_pod(bool value);
  private:
  bool _internal_pod() const;
  void _internal_set_pod(bool value);
  public:

  // bool not_spaceworthy = 14;
  void clear_not_spaceworthy();
  bool not_spaceworthy() const;
  void set_not_spaceworthy(bool value);
  private:
  bool _internal_not_spaceworthy() const;
  void _internal_set_not_spaceworthy(bool value);
  public:

  // int32 move = 12;
  void clear_move();
  ::PROTOBUF_NAMESPACE_ID::int32 move() const;
  void set_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_move() const;
  void _internal_set_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pb_message.carrier_type_t carrier_type = 13;
  void clear_carrier_type();
  ::pb_message::carrier_type_t carrier_type() const;
  void set_carrier_type(::pb_message::carrier_type_t value);
  private:
  ::pb_message::carrier_type_t _internal_carrier_type() const;
  void _internal_set_carrier_type(::pb_message::carrier_type_t value);
  public:

  // int32 salvage = 16;
  void clear_salvage();
  ::PROTOBUF_NAMESPACE_ID::int32 salvage() const;
  void set_salvage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_salvage() const;
  void _internal_set_salvage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.unit_def_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      unit_def_t_SubstitutionsEntry_DoNotUse,
      std::string, ::pb_message::production_cost_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > substitutions_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      unit_def_t_ConversionsEntry_DoNotUse,
      std::string, ::pb_message::production_cost_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > conversions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::pb_message::unit_def_side_t* uncrippled_;
  ::pb_message::unit_def_side_t* crippled_;
  ::pb_message::turn_t* available_;
  ::pb_message::production_cost_t* construction_;
  ::pb_message::towable_t* towable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  int escort_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_in_service_;
  bool pod_;
  bool not_spaceworthy_;
  ::PROTOBUF_NAMESPACE_ID::int32 move_;
  int carrier_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 salvage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class nation_unit_defs_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.nation_unit_defs_t) */ {
 public:
  inline nation_unit_defs_t() : nation_unit_defs_t(nullptr) {}
  virtual ~nation_unit_defs_t();

  nation_unit_defs_t(const nation_unit_defs_t& from);
  nation_unit_defs_t(nation_unit_defs_t&& from) noexcept
    : nation_unit_defs_t() {
    *this = ::std::move(from);
  }

  inline nation_unit_defs_t& operator=(const nation_unit_defs_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline nation_unit_defs_t& operator=(nation_unit_defs_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nation_unit_defs_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nation_unit_defs_t* internal_default_instance() {
    return reinterpret_cast<const nation_unit_defs_t*>(
               &_nation_unit_defs_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(nation_unit_defs_t& a, nation_unit_defs_t& b) {
    a.Swap(&b);
  }
  inline void Swap(nation_unit_defs_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nation_unit_defs_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nation_unit_defs_t* New() const final {
    return CreateMaybeMessage<nation_unit_defs_t>(nullptr);
  }

  nation_unit_defs_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nation_unit_defs_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nation_unit_defs_t& from);
  void MergeFrom(const nation_unit_defs_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nation_unit_defs_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.nation_unit_defs_t";
  }
  protected:
  explicit nation_unit_defs_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitsFieldNumber = 1,
  };
  // repeated .pb_message.unit_def_t units = 1;
  int units_size() const;
  private:
  int _internal_units_size() const;
  public:
  void clear_units();
  ::pb_message::unit_def_t* mutable_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::unit_def_t >*
      mutable_units();
  private:
  const ::pb_message::unit_def_t& _internal_units(int index) const;
  ::pb_message::unit_def_t* _internal_add_units();
  public:
  const ::pb_message::unit_def_t& units(int index) const;
  ::pb_message::unit_def_t* add_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::unit_def_t >&
      units() const;

  // @@protoc_insertion_point(class_scope:pb_message.nation_unit_defs_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::unit_def_t > units_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class unit_defs_t_NationUnitsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<unit_defs_t_NationUnitsEntry_DoNotUse, 
    std::string, ::pb_message::nation_unit_defs_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<unit_defs_t_NationUnitsEntry_DoNotUse, 
    std::string, ::pb_message::nation_unit_defs_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  unit_defs_t_NationUnitsEntry_DoNotUse();
  explicit unit_defs_t_NationUnitsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const unit_defs_t_NationUnitsEntry_DoNotUse& other);
  static const unit_defs_t_NationUnitsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const unit_defs_t_NationUnitsEntry_DoNotUse*>(&_unit_defs_t_NationUnitsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.unit_defs_t.NationUnitsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[31];
  }

  public:
};

// -------------------------------------------------------------------

class unit_defs_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.unit_defs_t) */ {
 public:
  inline unit_defs_t() : unit_defs_t(nullptr) {}
  virtual ~unit_defs_t();

  unit_defs_t(const unit_defs_t& from);
  unit_defs_t(unit_defs_t&& from) noexcept
    : unit_defs_t() {
    *this = ::std::move(from);
  }

  inline unit_defs_t& operator=(const unit_defs_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline unit_defs_t& operator=(unit_defs_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const unit_defs_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unit_defs_t* internal_default_instance() {
    return reinterpret_cast<const unit_defs_t*>(
               &_unit_defs_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(unit_defs_t& a, unit_defs_t& b) {
    a.Swap(&b);
  }
  inline void Swap(unit_defs_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unit_defs_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline unit_defs_t* New() const final {
    return CreateMaybeMessage<unit_defs_t>(nullptr);
  }

  unit_defs_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<unit_defs_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const unit_defs_t& from);
  void MergeFrom(const unit_defs_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unit_defs_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.unit_defs_t";
  }
  protected:
  explicit unit_defs_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNationUnitsFieldNumber = 1,
  };
  // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
  int nation_units_size() const;
  private:
  int _internal_nation_units_size() const;
  public:
  void clear_nation_units();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >&
      _internal_nation_units() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >*
      _internal_mutable_nation_units();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >&
      nation_units() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >*
      mutable_nation_units();

  // @@protoc_insertion_point(class_scope:pb_message.unit_defs_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      unit_defs_t_NationUnitsEntry_DoNotUse,
      std::string, ::pb_message::nation_unit_defs_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nation_units_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class team_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.team_t) */ {
 public:
  inline team_t() : team_t(nullptr) {}
  virtual ~team_t();

  team_t(const team_t& from);
  team_t(team_t&& from) noexcept
    : team_t() {
    *this = ::std::move(from);
  }

  inline team_t& operator=(const team_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline team_t& operator=(team_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const team_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const team_t* internal_default_instance() {
    return reinterpret_cast<const team_t*>(
               &_team_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(team_t& a, team_t& b) {
    a.Swap(&b);
  }
  inline void Swap(team_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(team_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline team_t* New() const final {
    return CreateMaybeMessage<team_t>(nullptr);
  }

  team_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<team_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const team_t& from);
  void MergeFrom(const team_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(team_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.team_t";
  }
  protected:
  explicit team_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNationsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string nations = 2;
  int nations_size() const;
  private:
  int _internal_nations_size() const;
  public:
  void clear_nations();
  const std::string& nations(int index) const;
  std::string* mutable_nations(int index);
  void set_nations(int index, const std::string& value);
  void set_nations(int index, std::string&& value);
  void set_nations(int index, const char* value);
  void set_nations(int index, const char* value, size_t size);
  std::string* add_nations();
  void add_nations(const std::string& value);
  void add_nations(std::string&& value);
  void add_nations(const char* value);
  void add_nations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nations();
  private:
  const std::string& _internal_nations(int index) const;
  std::string* _internal_add_nations();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pb_message.team_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class scenario_condition_t_object_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.scenario_condition_t.object_t) */ {
 public:
  inline scenario_condition_t_object_t() : scenario_condition_t_object_t(nullptr) {}
  virtual ~scenario_condition_t_object_t();

  scenario_condition_t_object_t(const scenario_condition_t_object_t& from);
  scenario_condition_t_object_t(scenario_condition_t_object_t&& from) noexcept
    : scenario_condition_t_object_t() {
    *this = ::std::move(from);
  }

  inline scenario_condition_t_object_t& operator=(const scenario_condition_t_object_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scenario_condition_t_object_t& operator=(scenario_condition_t_object_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scenario_condition_t_object_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scenario_condition_t_object_t* internal_default_instance() {
    return reinterpret_cast<const scenario_condition_t_object_t*>(
               &_scenario_condition_t_object_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(scenario_condition_t_object_t& a, scenario_condition_t_object_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scenario_condition_t_object_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scenario_condition_t_object_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scenario_condition_t_object_t* New() const final {
    return CreateMaybeMessage<scenario_condition_t_object_t>(nullptr);
  }

  scenario_condition_t_object_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scenario_condition_t_object_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scenario_condition_t_object_t& from);
  void MergeFrom(const scenario_condition_t_object_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scenario_condition_t_object_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.scenario_condition_t.object_t";
  }
  protected:
  explicit scenario_condition_t_object_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kHexesFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated int32 hexes = 3;
  int hexes_size() const;
  private:
  int _internal_hexes_size() const;
  public:
  void clear_hexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hexes() const;
  void _internal_add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hexes(int index) const;
  void set_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hexes();

  // .pb_message.scenario_condition_t.object_type_t type = 1;
  void clear_type();
  ::pb_message::scenario_condition_t_object_type_t type() const;
  void set_type(::pb_message::scenario_condition_t_object_type_t value);
  private:
  ::pb_message::scenario_condition_t_object_type_t _internal_type() const;
  void _internal_set_type(::pb_message::scenario_condition_t_object_type_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.scenario_condition_t.object_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hexes_;
  mutable std::atomic<int> _hexes_cached_byte_size_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class scenario_condition_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.scenario_condition_t) */ {
 public:
  inline scenario_condition_t() : scenario_condition_t(nullptr) {}
  virtual ~scenario_condition_t();

  scenario_condition_t(const scenario_condition_t& from);
  scenario_condition_t(scenario_condition_t&& from) noexcept
    : scenario_condition_t() {
    *this = ::std::move(from);
  }

  inline scenario_condition_t& operator=(const scenario_condition_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scenario_condition_t& operator=(scenario_condition_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scenario_condition_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scenario_condition_t* internal_default_instance() {
    return reinterpret_cast<const scenario_condition_t*>(
               &_scenario_condition_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(scenario_condition_t& a, scenario_condition_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scenario_condition_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scenario_condition_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scenario_condition_t* New() const final {
    return CreateMaybeMessage<scenario_condition_t>(nullptr);
  }

  scenario_condition_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scenario_condition_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scenario_condition_t& from);
  void MergeFrom(const scenario_condition_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scenario_condition_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.scenario_condition_t";
  }
  protected:
  explicit scenario_condition_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef scenario_condition_t_object_t object_t;

  typedef scenario_condition_t_action_t action_t;
  static constexpr action_t occupies =
    scenario_condition_t_action_t_occupies;
  static constexpr action_t destroys =
    scenario_condition_t_action_t_destroys;
  static inline bool action_t_IsValid(int value) {
    return scenario_condition_t_action_t_IsValid(value);
  }
  static constexpr action_t action_t_MIN =
    scenario_condition_t_action_t_action_t_MIN;
  static constexpr action_t action_t_MAX =
    scenario_condition_t_action_t_action_t_MAX;
  static constexpr int action_t_ARRAYSIZE =
    scenario_condition_t_action_t_action_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  action_t_descriptor() {
    return scenario_condition_t_action_t_descriptor();
  }
  template<typename T>
  static inline const std::string& action_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, action_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function action_t_Name.");
    return scenario_condition_t_action_t_Name(enum_t_value);
  }
  static inline bool action_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      action_t* value) {
    return scenario_condition_t_action_t_Parse(name, value);
  }

  typedef scenario_condition_t_object_type_t object_type_t;
  static constexpr object_type_t hexes =
    scenario_condition_t_object_type_t_hexes;
  static constexpr object_type_t sb =
    scenario_condition_t_object_type_t_sb;
  static constexpr object_type_t fleet_area =
    scenario_condition_t_object_type_t_fleet_area;
  static constexpr object_type_t nation =
    scenario_condition_t_object_type_t_nation;
  static inline bool object_type_t_IsValid(int value) {
    return scenario_condition_t_object_type_t_IsValid(value);
  }
  static constexpr object_type_t object_type_t_MIN =
    scenario_condition_t_object_type_t_object_type_t_MIN;
  static constexpr object_type_t object_type_t_MAX =
    scenario_condition_t_object_type_t_object_type_t_MAX;
  static constexpr int object_type_t_ARRAYSIZE =
    scenario_condition_t_object_type_t_object_type_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  object_type_t_descriptor() {
    return scenario_condition_t_object_type_t_descriptor();
  }
  template<typename T>
  static inline const std::string& object_type_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, object_type_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function object_type_t_Name.");
    return scenario_condition_t_object_type_t_Name(enum_t_value);
  }
  static inline bool object_type_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      object_type_t* value) {
    return scenario_condition_t_object_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 1,
    kOneOfFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // repeated string actors = 1;
  int actors_size() const;
  private:
  int _internal_actors_size() const;
  public:
  void clear_actors();
  const std::string& actors(int index) const;
  std::string* mutable_actors(int index);
  void set_actors(int index, const std::string& value);
  void set_actors(int index, std::string&& value);
  void set_actors(int index, const char* value);
  void set_actors(int index, const char* value, size_t size);
  std::string* add_actors();
  void add_actors(const std::string& value);
  void add_actors(std::string&& value);
  void add_actors(const char* value);
  void add_actors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actors();
  private:
  const std::string& _internal_actors(int index) const;
  std::string* _internal_add_actors();
  public:

  // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
  int one_of_size() const;
  private:
  int _internal_one_of_size() const;
  public:
  void clear_one_of();
  ::pb_message::scenario_condition_t_object_t* mutable_one_of(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_condition_t_object_t >*
      mutable_one_of();
  private:
  const ::pb_message::scenario_condition_t_object_t& _internal_one_of(int index) const;
  ::pb_message::scenario_condition_t_object_t* _internal_add_one_of();
  public:
  const ::pb_message::scenario_condition_t_object_t& one_of(int index) const;
  ::pb_message::scenario_condition_t_object_t* add_one_of();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_condition_t_object_t >&
      one_of() const;

  // .pb_message.scenario_condition_t.action_t action = 2;
  void clear_action();
  ::pb_message::scenario_condition_t_action_t action() const;
  void set_action(::pb_message::scenario_condition_t_action_t value);
  private:
  ::pb_message::scenario_condition_t_action_t _internal_action() const;
  void _internal_set_action(::pb_message::scenario_condition_t_action_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.scenario_condition_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_condition_t_object_t > one_of_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class fleet_release_condition_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.fleet_release_condition_t) */ {
 public:
  inline fleet_release_condition_t() : fleet_release_condition_t(nullptr) {}
  virtual ~fleet_release_condition_t();

  fleet_release_condition_t(const fleet_release_condition_t& from);
  fleet_release_condition_t(fleet_release_condition_t&& from) noexcept
    : fleet_release_condition_t() {
    *this = ::std::move(from);
  }

  inline fleet_release_condition_t& operator=(const fleet_release_condition_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline fleet_release_condition_t& operator=(fleet_release_condition_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fleet_release_condition_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fleet_release_condition_t* internal_default_instance() {
    return reinterpret_cast<const fleet_release_condition_t*>(
               &_fleet_release_condition_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(fleet_release_condition_t& a, fleet_release_condition_t& b) {
    a.Swap(&b);
  }
  inline void Swap(fleet_release_condition_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fleet_release_condition_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fleet_release_condition_t* New() const final {
    return CreateMaybeMessage<fleet_release_condition_t>(nullptr);
  }

  fleet_release_condition_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fleet_release_condition_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fleet_release_condition_t& from);
  void MergeFrom(const fleet_release_condition_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fleet_release_condition_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.fleet_release_condition_t";
  }
  protected:
  explicit fleet_release_condition_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFleetFieldNumber = 1,
    kConditionFieldNumber = 2,
  };
  // string fleet = 1;
  void clear_fleet();
  const std::string& fleet() const;
  void set_fleet(const std::string& value);
  void set_fleet(std::string&& value);
  void set_fleet(const char* value);
  void set_fleet(const char* value, size_t size);
  std::string* mutable_fleet();
  std::string* release_fleet();
  void set_allocated_fleet(std::string* fleet);
  private:
  const std::string& _internal_fleet() const;
  void _internal_set_fleet(const std::string& value);
  std::string* _internal_mutable_fleet();
  public:

  // .pb_message.scenario_condition_t condition = 2;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::pb_message::scenario_condition_t& condition() const;
  ::pb_message::scenario_condition_t* release_condition();
  ::pb_message::scenario_condition_t* mutable_condition();
  void set_allocated_condition(::pb_message::scenario_condition_t* condition);
  private:
  const ::pb_message::scenario_condition_t& _internal_condition() const;
  ::pb_message::scenario_condition_t* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::pb_message::scenario_condition_t* condition);
  ::pb_message::scenario_condition_t* unsafe_arena_release_condition();

  // @@protoc_insertion_point(class_scope:pb_message.fleet_release_condition_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fleet_;
  ::pb_message::scenario_condition_t* condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class war_entry_condition_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.war_entry_condition_t) */ {
 public:
  inline war_entry_condition_t() : war_entry_condition_t(nullptr) {}
  virtual ~war_entry_condition_t();

  war_entry_condition_t(const war_entry_condition_t& from);
  war_entry_condition_t(war_entry_condition_t&& from) noexcept
    : war_entry_condition_t() {
    *this = ::std::move(from);
  }

  inline war_entry_condition_t& operator=(const war_entry_condition_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline war_entry_condition_t& operator=(war_entry_condition_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const war_entry_condition_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const war_entry_condition_t* internal_default_instance() {
    return reinterpret_cast<const war_entry_condition_t*>(
               &_war_entry_condition_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(war_entry_condition_t& a, war_entry_condition_t& b) {
    a.Swap(&b);
  }
  inline void Swap(war_entry_condition_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(war_entry_condition_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline war_entry_condition_t* New() const final {
    return CreateMaybeMessage<war_entry_condition_t>(nullptr);
  }

  war_entry_condition_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<war_entry_condition_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const war_entry_condition_t& from);
  void MergeFrom(const war_entry_condition_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(war_entry_condition_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.war_entry_condition_t";
  }
  protected:
  explicit war_entry_condition_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 2,
    kEconomyFieldNumber = 3,
  };
  // .pb_message.scenario_condition_t condition = 2;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::pb_message::scenario_condition_t& condition() const;
  ::pb_message::scenario_condition_t* release_condition();
  ::pb_message::scenario_condition_t* mutable_condition();
  void set_allocated_condition(::pb_message::scenario_condition_t* condition);
  private:
  const ::pb_message::scenario_condition_t& _internal_condition() const;
  ::pb_message::scenario_condition_t* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::pb_message::scenario_condition_t* condition);
  ::pb_message::scenario_condition_t* unsafe_arena_release_condition();

  // .pb_message.war_footing_t economy = 3;
  void clear_economy();
  ::pb_message::war_footing_t economy() const;
  void set_economy(::pb_message::war_footing_t value);
  private:
  ::pb_message::war_footing_t _internal_economy() const;
  void _internal_set_economy(::pb_message::war_footing_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.war_entry_condition_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb_message::scenario_condition_t* condition_;
  int economy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class scenario_turn_t_national_action_t_action_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.scenario_turn_t.national_action_t.action_t) */ {
 public:
  inline scenario_turn_t_national_action_t_action_t() : scenario_turn_t_national_action_t_action_t(nullptr) {}
  virtual ~scenario_turn_t_national_action_t_action_t();

  scenario_turn_t_national_action_t_action_t(const scenario_turn_t_national_action_t_action_t& from);
  scenario_turn_t_national_action_t_action_t(scenario_turn_t_national_action_t_action_t&& from) noexcept
    : scenario_turn_t_national_action_t_action_t() {
    *this = ::std::move(from);
  }

  inline scenario_turn_t_national_action_t_action_t& operator=(const scenario_turn_t_national_action_t_action_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scenario_turn_t_national_action_t_action_t& operator=(scenario_turn_t_national_action_t_action_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scenario_turn_t_national_action_t_action_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scenario_turn_t_national_action_t_action_t* internal_default_instance() {
    return reinterpret_cast<const scenario_turn_t_national_action_t_action_t*>(
               &_scenario_turn_t_national_action_t_action_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(scenario_turn_t_national_action_t_action_t& a, scenario_turn_t_national_action_t_action_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scenario_turn_t_national_action_t_action_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scenario_turn_t_national_action_t_action_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scenario_turn_t_national_action_t_action_t* New() const final {
    return CreateMaybeMessage<scenario_turn_t_national_action_t_action_t>(nullptr);
  }

  scenario_turn_t_national_action_t_action_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scenario_turn_t_national_action_t_action_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scenario_turn_t_national_action_t_action_t& from);
  void MergeFrom(const scenario_turn_t_national_action_t_action_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scenario_turn_t_national_action_t_action_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.scenario_turn_t.national_action_t.action_t";
  }
  protected:
  explicit scenario_turn_t_national_action_t_action_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
  void clear_type();
  ::pb_message::scenario_turn_t_national_action_t_action_type_t type() const;
  void set_type(::pb_message::scenario_turn_t_national_action_t_action_type_t value);
  private:
  ::pb_message::scenario_turn_t_national_action_t_action_type_t _internal_type() const;
  void _internal_set_type(::pb_message::scenario_turn_t_national_action_t_action_type_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.scenario_turn_t.national_action_t.action_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class scenario_turn_t_national_action_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.scenario_turn_t.national_action_t) */ {
 public:
  inline scenario_turn_t_national_action_t() : scenario_turn_t_national_action_t(nullptr) {}
  virtual ~scenario_turn_t_national_action_t();

  scenario_turn_t_national_action_t(const scenario_turn_t_national_action_t& from);
  scenario_turn_t_national_action_t(scenario_turn_t_national_action_t&& from) noexcept
    : scenario_turn_t_national_action_t() {
    *this = ::std::move(from);
  }

  inline scenario_turn_t_national_action_t& operator=(const scenario_turn_t_national_action_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scenario_turn_t_national_action_t& operator=(scenario_turn_t_national_action_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scenario_turn_t_national_action_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scenario_turn_t_national_action_t* internal_default_instance() {
    return reinterpret_cast<const scenario_turn_t_national_action_t*>(
               &_scenario_turn_t_national_action_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(scenario_turn_t_national_action_t& a, scenario_turn_t_national_action_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scenario_turn_t_national_action_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scenario_turn_t_national_action_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scenario_turn_t_national_action_t* New() const final {
    return CreateMaybeMessage<scenario_turn_t_national_action_t>(nullptr);
  }

  scenario_turn_t_national_action_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scenario_turn_t_national_action_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scenario_turn_t_national_action_t& from);
  void MergeFrom(const scenario_turn_t_national_action_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scenario_turn_t_national_action_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.scenario_turn_t.national_action_t";
  }
  protected:
  explicit scenario_turn_t_national_action_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef scenario_turn_t_national_action_t_action_t action_t;

  typedef scenario_turn_t_national_action_t_action_type_t action_type_t;
  static constexpr action_type_t release_fleets =
    scenario_turn_t_national_action_t_action_type_t_release_fleets;
  static constexpr action_type_t declare_war =
    scenario_turn_t_national_action_t_action_type_t_declare_war;
  static inline bool action_type_t_IsValid(int value) {
    return scenario_turn_t_national_action_t_action_type_t_IsValid(value);
  }
  static constexpr action_type_t action_type_t_MIN =
    scenario_turn_t_national_action_t_action_type_t_action_type_t_MIN;
  static constexpr action_type_t action_type_t_MAX =
    scenario_turn_t_national_action_t_action_type_t_action_type_t_MAX;
  static constexpr int action_type_t_ARRAYSIZE =
    scenario_turn_t_national_action_t_action_type_t_action_type_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  action_type_t_descriptor() {
    return scenario_turn_t_national_action_t_action_type_t_descriptor();
  }
  template<typename T>
  static inline const std::string& action_type_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, action_type_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function action_type_t_Name.");
    return scenario_turn_t_national_action_t_action_type_t_Name(enum_t_value);
  }
  static inline bool action_type_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      action_type_t* value) {
    return scenario_turn_t_national_action_t_action_type_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::pb_message::scenario_turn_t_national_action_t_action_t* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t_national_action_t_action_t >*
      mutable_actions();
  private:
  const ::pb_message::scenario_turn_t_national_action_t_action_t& _internal_actions(int index) const;
  ::pb_message::scenario_turn_t_national_action_t_action_t* _internal_add_actions();
  public:
  const ::pb_message::scenario_turn_t_national_action_t_action_t& actions(int index) const;
  ::pb_message::scenario_turn_t_national_action_t_action_t* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t_national_action_t_action_t >&
      actions() const;

  // @@protoc_insertion_point(class_scope:pb_message.scenario_turn_t.national_action_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t_national_action_t_action_t > actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class scenario_turn_t_NationalActionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<scenario_turn_t_NationalActionsEntry_DoNotUse, 
    std::string, ::pb_message::scenario_turn_t_national_action_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<scenario_turn_t_NationalActionsEntry_DoNotUse, 
    std::string, ::pb_message::scenario_turn_t_national_action_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  scenario_turn_t_NationalActionsEntry_DoNotUse();
  explicit scenario_turn_t_NationalActionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const scenario_turn_t_NationalActionsEntry_DoNotUse& other);
  static const scenario_turn_t_NationalActionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const scenario_turn_t_NationalActionsEntry_DoNotUse*>(&_scenario_turn_t_NationalActionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.scenario_turn_t.NationalActionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[40];
  }

  public:
};

// -------------------------------------------------------------------

class scenario_turn_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.scenario_turn_t) */ {
 public:
  inline scenario_turn_t() : scenario_turn_t(nullptr) {}
  virtual ~scenario_turn_t();

  scenario_turn_t(const scenario_turn_t& from);
  scenario_turn_t(scenario_turn_t&& from) noexcept
    : scenario_turn_t() {
    *this = ::std::move(from);
  }

  inline scenario_turn_t& operator=(const scenario_turn_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scenario_turn_t& operator=(scenario_turn_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scenario_turn_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scenario_turn_t* internal_default_instance() {
    return reinterpret_cast<const scenario_turn_t*>(
               &_scenario_turn_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(scenario_turn_t& a, scenario_turn_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scenario_turn_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scenario_turn_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scenario_turn_t* New() const final {
    return CreateMaybeMessage<scenario_turn_t>(nullptr);
  }

  scenario_turn_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scenario_turn_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scenario_turn_t& from);
  void MergeFrom(const scenario_turn_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scenario_turn_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.scenario_turn_t";
  }
  protected:
  explicit scenario_turn_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef scenario_turn_t_national_action_t national_action_t;

  // accessors -------------------------------------------------------

  enum : int {
    kNationalActionsFieldNumber = 2,
    kTurnFieldNumber = 1,
  };
  // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
  int national_actions_size() const;
  private:
  int _internal_national_actions_size() const;
  public:
  void clear_national_actions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >&
      _internal_national_actions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >*
      _internal_mutable_national_actions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >&
      national_actions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >*
      mutable_national_actions();

  // int32 turn = 1;
  void clear_turn();
  ::PROTOBUF_NAMESPACE_ID::int32 turn() const;
  void set_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_turn() const;
  void _internal_set_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.scenario_turn_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      scenario_turn_t_NationalActionsEntry_DoNotUse,
      std::string, ::pb_message::scenario_turn_t_national_action_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > national_actions_;
  ::PROTOBUF_NAMESPACE_ID::int32 turn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class scenario_t_nation_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.scenario_t.nation_t) */ {
 public:
  inline scenario_t_nation_t() : scenario_t_nation_t(nullptr) {}
  virtual ~scenario_t_nation_t();

  scenario_t_nation_t(const scenario_t_nation_t& from);
  scenario_t_nation_t(scenario_t_nation_t&& from) noexcept
    : scenario_t_nation_t() {
    *this = ::std::move(from);
  }

  inline scenario_t_nation_t& operator=(const scenario_t_nation_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scenario_t_nation_t& operator=(scenario_t_nation_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scenario_t_nation_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scenario_t_nation_t* internal_default_instance() {
    return reinterpret_cast<const scenario_t_nation_t*>(
               &_scenario_t_nation_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(scenario_t_nation_t& a, scenario_t_nation_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scenario_t_nation_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scenario_t_nation_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scenario_t_nation_t* New() const final {
    return CreateMaybeMessage<scenario_t_nation_t>(nullptr);
  }

  scenario_t_nation_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scenario_t_nation_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scenario_t_nation_t& from);
  void MergeFrom(const scenario_t_nation_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scenario_t_nation_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.scenario_t.nation_t";
  }
  protected:
  explicit scenario_t_nation_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtWarWithFieldNumber = 1,
    kFutureBelligerentsFieldNumber = 2,
    kReleaseConditionsFieldNumber = 6,
    kWarEntryConditionsFieldNumber = 7,
    kEconomyFieldNumber = 3,
    kExhaustionTurnsFieldNumber = 4,
    kAccumulateExhaustionAtPeaceFieldNumber = 5,
  };
  // repeated string at_war_with = 1;
  int at_war_with_size() const;
  private:
  int _internal_at_war_with_size() const;
  public:
  void clear_at_war_with();
  const std::string& at_war_with(int index) const;
  std::string* mutable_at_war_with(int index);
  void set_at_war_with(int index, const std::string& value);
  void set_at_war_with(int index, std::string&& value);
  void set_at_war_with(int index, const char* value);
  void set_at_war_with(int index, const char* value, size_t size);
  std::string* add_at_war_with();
  void add_at_war_with(const std::string& value);
  void add_at_war_with(std::string&& value);
  void add_at_war_with(const char* value);
  void add_at_war_with(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& at_war_with() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_at_war_with();
  private:
  const std::string& _internal_at_war_with(int index) const;
  std::string* _internal_add_at_war_with();
  public:

  // repeated string future_belligerents = 2;
  int future_belligerents_size() const;
  private:
  int _internal_future_belligerents_size() const;
  public:
  void clear_future_belligerents();
  const std::string& future_belligerents(int index) const;
  std::string* mutable_future_belligerents(int index);
  void set_future_belligerents(int index, const std::string& value);
  void set_future_belligerents(int index, std::string&& value);
  void set_future_belligerents(int index, const char* value);
  void set_future_belligerents(int index, const char* value, size_t size);
  std::string* add_future_belligerents();
  void add_future_belligerents(const std::string& value);
  void add_future_belligerents(std::string&& value);
  void add_future_belligerents(const char* value);
  void add_future_belligerents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& future_belligerents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_future_belligerents();
  private:
  const std::string& _internal_future_belligerents(int index) const;
  std::string* _internal_add_future_belligerents();
  public:

  // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
  int release_conditions_size() const;
  private:
  int _internal_release_conditions_size() const;
  public:
  void clear_release_conditions();
  ::pb_message::fleet_release_condition_t* mutable_release_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::fleet_release_condition_t >*
      mutable_release_conditions();
  private:
  const ::pb_message::fleet_release_condition_t& _internal_release_conditions(int index) const;
  ::pb_message::fleet_release_condition_t* _internal_add_release_conditions();
  public:
  const ::pb_message::fleet_release_condition_t& release_conditions(int index) const;
  ::pb_message::fleet_release_condition_t* add_release_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::fleet_release_condition_t >&
      release_conditions() const;

  // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
  int war_entry_conditions_size() const;
  private:
  int _internal_war_entry_conditions_size() const;
  public:
  void clear_war_entry_conditions();
  ::pb_message::war_entry_condition_t* mutable_war_entry_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::war_entry_condition_t >*
      mutable_war_entry_conditions();
  private:
  const ::pb_message::war_entry_condition_t& _internal_war_entry_conditions(int index) const;
  ::pb_message::war_entry_condition_t* _internal_add_war_entry_conditions();
  public:
  const ::pb_message::war_entry_condition_t& war_entry_conditions(int index) const;
  ::pb_message::war_entry_condition_t* add_war_entry_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::war_entry_condition_t >&
      war_entry_conditions() const;

  // .pb_message.war_footing_t economy = 3;
  void clear_economy();
  ::pb_message::war_footing_t economy() const;
  void set_economy(::pb_message::war_footing_t value);
  private:
  ::pb_message::war_footing_t _internal_economy() const;
  void _internal_set_economy(::pb_message::war_footing_t value);
  public:

  // int32 exhaustion_turns = 4;
  void clear_exhaustion_turns();
  ::PROTOBUF_NAMESPACE_ID::int32 exhaustion_turns() const;
  void set_exhaustion_turns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exhaustion_turns() const;
  void _internal_set_exhaustion_turns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool accumulate_exhaustion_at_peace = 5;
  void clear_accumulate_exhaustion_at_peace();
  bool accumulate_exhaustion_at_peace() const;
  void set_accumulate_exhaustion_at_peace(bool value);
  private:
  bool _internal_accumulate_exhaustion_at_peace() const;
  void _internal_set_accumulate_exhaustion_at_peace(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb_message.scenario_t.nation_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> at_war_with_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> future_belligerents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::fleet_release_condition_t > release_conditions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::war_entry_condition_t > war_entry_conditions_;
  int economy_;
  ::PROTOBUF_NAMESPACE_ID::int32 exhaustion_turns_;
  bool accumulate_exhaustion_at_peace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// -------------------------------------------------------------------

class scenario_t_NationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<scenario_t_NationsEntry_DoNotUse, 
    std::string, ::pb_message::scenario_t_nation_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<scenario_t_NationsEntry_DoNotUse, 
    std::string, ::pb_message::scenario_t_nation_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  scenario_t_NationsEntry_DoNotUse();
  explicit scenario_t_NationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const scenario_t_NationsEntry_DoNotUse& other);
  static const scenario_t_NationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const scenario_t_NationsEntry_DoNotUse*>(&_scenario_t_NationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pb_message.scenario_t.NationsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[43];
  }

  public:
};

// -------------------------------------------------------------------

class scenario_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb_message.scenario_t) */ {
 public:
  inline scenario_t() : scenario_t(nullptr) {}
  virtual ~scenario_t();

  scenario_t(const scenario_t& from);
  scenario_t(scenario_t&& from) noexcept
    : scenario_t() {
    *this = ::std::move(from);
  }

  inline scenario_t& operator=(const scenario_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline scenario_t& operator=(scenario_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scenario_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scenario_t* internal_default_instance() {
    return reinterpret_cast<const scenario_t*>(
               &_scenario_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(scenario_t& a, scenario_t& b) {
    a.Swap(&b);
  }
  inline void Swap(scenario_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scenario_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scenario_t* New() const final {
    return CreateMaybeMessage<scenario_t>(nullptr);
  }

  scenario_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scenario_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scenario_t& from);
  void MergeFrom(const scenario_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scenario_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb_message.scenario_t";
  }
  protected:
  explicit scenario_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_start_5fdata_2eproto);
    return ::descriptor_table_start_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef scenario_t_nation_t nation_t;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 4,
    kTeamTurnOrderFieldNumber = 5,
    kSetupOrderFieldNumber = 8,
    kNationsFieldNumber = 9,
    kTurnsFieldNumber = 10,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kMapFieldNumber = 6,
    kOrderOfBattleFieldNumber = 7,
    kStartTurnFieldNumber = 3,
  };
  // repeated .pb_message.team_t teams = 4;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::pb_message::team_t* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::team_t >*
      mutable_teams();
  private:
  const ::pb_message::team_t& _internal_teams(int index) const;
  ::pb_message::team_t* _internal_add_teams();
  public:
  const ::pb_message::team_t& teams(int index) const;
  ::pb_message::team_t* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::team_t >&
      teams() const;

  // repeated string team_turn_order = 5;
  int team_turn_order_size() const;
  private:
  int _internal_team_turn_order_size() const;
  public:
  void clear_team_turn_order();
  const std::string& team_turn_order(int index) const;
  std::string* mutable_team_turn_order(int index);
  void set_team_turn_order(int index, const std::string& value);
  void set_team_turn_order(int index, std::string&& value);
  void set_team_turn_order(int index, const char* value);
  void set_team_turn_order(int index, const char* value, size_t size);
  std::string* add_team_turn_order();
  void add_team_turn_order(const std::string& value);
  void add_team_turn_order(std::string&& value);
  void add_team_turn_order(const char* value);
  void add_team_turn_order(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& team_turn_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_team_turn_order();
  private:
  const std::string& _internal_team_turn_order(int index) const;
  std::string* _internal_add_team_turn_order();
  public:

  // repeated string setup_order = 8;
  int setup_order_size() const;
  private:
  int _internal_setup_order_size() const;
  public:
  void clear_setup_order();
  const std::string& setup_order(int index) const;
  std::string* mutable_setup_order(int index);
  void set_setup_order(int index, const std::string& value);
  void set_setup_order(int index, std::string&& value);
  void set_setup_order(int index, const char* value);
  void set_setup_order(int index, const char* value, size_t size);
  std::string* add_setup_order();
  void add_setup_order(const std::string& value);
  void add_setup_order(std::string&& value);
  void add_setup_order(const char* value);
  void add_setup_order(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& setup_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_setup_order();
  private:
  const std::string& _internal_setup_order(int index) const;
  std::string* _internal_add_setup_order();
  public:

  // map<string, .pb_message.scenario_t.nation_t> nations = 9;
  int nations_size() const;
  private:
  int _internal_nations_size() const;
  public:
  void clear_nations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >&
      _internal_nations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >*
      _internal_mutable_nations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >&
      nations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >*
      mutable_nations();

  // repeated .pb_message.scenario_turn_t turns = 10;
  int turns_size() const;
  private:
  int _internal_turns_size() const;
  public:
  void clear_turns();
  ::pb_message::scenario_turn_t* mutable_turns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t >*
      mutable_turns();
  private:
  const ::pb_message::scenario_turn_t& _internal_turns(int index) const;
  ::pb_message::scenario_turn_t* _internal_add_turns();
  public:
  const ::pb_message::scenario_turn_t& turns(int index) const;
  ::pb_message::scenario_turn_t* add_turns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t >&
      turns() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string map = 6;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // string order_of_battle = 7;
  void clear_order_of_battle();
  const std::string& order_of_battle() const;
  void set_order_of_battle(const std::string& value);
  void set_order_of_battle(std::string&& value);
  void set_order_of_battle(const char* value);
  void set_order_of_battle(const char* value, size_t size);
  std::string* mutable_order_of_battle();
  std::string* release_order_of_battle();
  void set_allocated_order_of_battle(std::string* order_of_battle);
  private:
  const std::string& _internal_order_of_battle() const;
  void _internal_set_order_of_battle(const std::string& value);
  std::string* _internal_mutable_order_of_battle();
  public:

  // .pb_message.turn_t start_turn = 3;
  bool has_start_turn() const;
  private:
  bool _internal_has_start_turn() const;
  public:
  void clear_start_turn();
  const ::pb_message::turn_t& start_turn() const;
  ::pb_message::turn_t* release_start_turn();
  ::pb_message::turn_t* mutable_start_turn();
  void set_allocated_start_turn(::pb_message::turn_t* start_turn);
  private:
  const ::pb_message::turn_t& _internal_start_turn() const;
  ::pb_message::turn_t* _internal_mutable_start_turn();
  public:
  void unsafe_arena_set_allocated_start_turn(
      ::pb_message::turn_t* start_turn);
  ::pb_message::turn_t* unsafe_arena_release_start_turn();

  // @@protoc_insertion_point(class_scope:pb_message.scenario_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::team_t > teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> team_turn_order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> setup_order_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      scenario_t_NationsEntry_DoNotUse,
      std::string, ::pb_message::scenario_t_nation_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t > turns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_of_battle_;
  ::pb_message::turn_t* start_turn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_start_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// capital_hex_zone_t

// string name = 1;
inline void capital_hex_zone_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& capital_hex_zone_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_zone_t.name)
  return _internal_name();
}
inline void capital_hex_zone_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.capital_hex_zone_t.name)
}
inline std::string* capital_hex_zone_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.capital_hex_zone_t.name)
  return _internal_mutable_name();
}
inline const std::string& capital_hex_zone_t::_internal_name() const {
  return name_.Get();
}
inline void capital_hex_zone_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void capital_hex_zone_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.capital_hex_zone_t.name)
}
inline void capital_hex_zone_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.capital_hex_zone_t.name)
}
inline void capital_hex_zone_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.capital_hex_zone_t.name)
}
inline std::string* capital_hex_zone_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* capital_hex_zone_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.capital_hex_zone_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void capital_hex_zone_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.capital_hex_zone_t.name)
}

// repeated .pb_message.feature_t features = 2 [packed = true];
inline int capital_hex_zone_t::_internal_features_size() const {
  return features_.size();
}
inline int capital_hex_zone_t::features_size() const {
  return _internal_features_size();
}
inline void capital_hex_zone_t::clear_features() {
  features_.Clear();
}
inline ::pb_message::feature_t capital_hex_zone_t::_internal_features(int index) const {
  return static_cast< ::pb_message::feature_t >(features_.Get(index));
}
inline ::pb_message::feature_t capital_hex_zone_t::features(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_zone_t.features)
  return _internal_features(index);
}
inline void capital_hex_zone_t::set_features(int index, ::pb_message::feature_t value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.capital_hex_zone_t.features)
}
inline void capital_hex_zone_t::_internal_add_features(::pb_message::feature_t value) {
  features_.Add(value);
}
inline void capital_hex_zone_t::add_features(::pb_message::feature_t value) {
  // @@protoc_insertion_point(field_add:pb_message.capital_hex_zone_t.features)
  _internal_add_features(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
capital_hex_zone_t::features() const {
  // @@protoc_insertion_point(field_list:pb_message.capital_hex_zone_t.features)
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
capital_hex_zone_t::_internal_mutable_features() {
  return &features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
capital_hex_zone_t::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.capital_hex_zone_t.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// capital_hex_t

// int32 coord = 1;
inline void capital_hex_t::clear_coord() {
  coord_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 capital_hex_t::_internal_coord() const {
  return coord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 capital_hex_t::coord() const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_t.coord)
  return _internal_coord();
}
inline void capital_hex_t::_internal_set_coord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coord_ = value;
}
inline void capital_hex_t::set_coord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coord(value);
  // @@protoc_insertion_point(field_set:pb_message.capital_hex_t.coord)
}

// repeated .pb_message.capital_hex_zone_t zones = 2;
inline int capital_hex_t::_internal_zones_size() const {
  return zones_.size();
}
inline int capital_hex_t::zones_size() const {
  return _internal_zones_size();
}
inline void capital_hex_t::clear_zones() {
  zones_.Clear();
}
inline ::pb_message::capital_hex_zone_t* capital_hex_t::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.capital_hex_t.zones)
  return zones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_zone_t >*
capital_hex_t::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.capital_hex_t.zones)
  return &zones_;
}
inline const ::pb_message::capital_hex_zone_t& capital_hex_t::_internal_zones(int index) const {
  return zones_.Get(index);
}
inline const ::pb_message::capital_hex_zone_t& capital_hex_t::zones(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.capital_hex_t.zones)
  return _internal_zones(index);
}
inline ::pb_message::capital_hex_zone_t* capital_hex_t::_internal_add_zones() {
  return zones_.Add();
}
inline ::pb_message::capital_hex_zone_t* capital_hex_t::add_zones() {
  // @@protoc_insertion_point(field_add:pb_message.capital_hex_t.zones)
  return _internal_add_zones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_zone_t >&
capital_hex_t::zones() const {
  // @@protoc_insertion_point(field_list:pb_message.capital_hex_t.zones)
  return zones_;
}

// -------------------------------------------------------------------

// capital_t

// repeated .pb_message.capital_hex_t hexes = 1;
inline int capital_t::_internal_hexes_size() const {
  return hexes_.size();
}
inline int capital_t::hexes_size() const {
  return _internal_hexes_size();
}
inline void capital_t::clear_hexes() {
  hexes_.Clear();
}
inline ::pb_message::capital_hex_t* capital_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.capital_t.hexes)
  return hexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_t >*
capital_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.capital_t.hexes)
  return &hexes_;
}
inline const ::pb_message::capital_hex_t& capital_t::_internal_hexes(int index) const {
  return hexes_.Get(index);
}
inline const ::pb_message::capital_hex_t& capital_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.capital_t.hexes)
  return _internal_hexes(index);
}
inline ::pb_message::capital_hex_t* capital_t::_internal_add_hexes() {
  return hexes_.Add();
}
inline ::pb_message::capital_hex_t* capital_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.capital_t.hexes)
  return _internal_add_hexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::capital_hex_t >&
capital_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.capital_t.hexes)
  return hexes_;
}

// -------------------------------------------------------------------

// offmap_possesions_t

// int32 provinces = 1;
inline void offmap_possesions_t::clear_provinces() {
  provinces_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::_internal_provinces() const {
  return provinces_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::provinces() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.provinces)
  return _internal_provinces();
}
inline void offmap_possesions_t::_internal_set_provinces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  provinces_ = value;
}
inline void offmap_possesions_t::set_provinces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_provinces(value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.provinces)
}

// int32 mins = 2;
inline void offmap_possesions_t::clear_mins() {
  mins_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::_internal_mins() const {
  return mins_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::mins() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.mins)
  return _internal_mins();
}
inline void offmap_possesions_t::_internal_set_mins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mins_ = value;
}
inline void offmap_possesions_t::set_mins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mins(value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.mins)
}

// int32 majs = 3;
inline void offmap_possesions_t::clear_majs() {
  majs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::_internal_majs() const {
  return majs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::majs() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.majs)
  return _internal_majs();
}
inline void offmap_possesions_t::_internal_set_majs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  majs_ = value;
}
inline void offmap_possesions_t::set_majs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_majs(value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.majs)
}

// int32 survey_ships = 4;
inline void offmap_possesions_t::clear_survey_ships() {
  survey_ships_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::_internal_survey_ships() const {
  return survey_ships_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_possesions_t::survey_ships() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.survey_ships)
  return _internal_survey_ships();
}
inline void offmap_possesions_t::_internal_set_survey_ships(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  survey_ships_ = value;
}
inline void offmap_possesions_t::set_survey_ships(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_survey_ships(value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.survey_ships)
}

// bool cannot_build_offmap_capital = 5;
inline void offmap_possesions_t::clear_cannot_build_offmap_capital() {
  cannot_build_offmap_capital_ = false;
}
inline bool offmap_possesions_t::_internal_cannot_build_offmap_capital() const {
  return cannot_build_offmap_capital_;
}
inline bool offmap_possesions_t::cannot_build_offmap_capital() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.cannot_build_offmap_capital)
  return _internal_cannot_build_offmap_capital();
}
inline void offmap_possesions_t::_internal_set_cannot_build_offmap_capital(bool value) {
  
  cannot_build_offmap_capital_ = value;
}
inline void offmap_possesions_t::set_cannot_build_offmap_capital(bool value) {
  _internal_set_cannot_build_offmap_capital(value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.cannot_build_offmap_capital)
}

// bool old_shipyard = 6;
inline void offmap_possesions_t::clear_old_shipyard() {
  old_shipyard_ = false;
}
inline bool offmap_possesions_t::_internal_old_shipyard() const {
  return old_shipyard_;
}
inline bool offmap_possesions_t::old_shipyard() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_possesions_t.old_shipyard)
  return _internal_old_shipyard();
}
inline void offmap_possesions_t::_internal_set_old_shipyard(bool value) {
  
  old_shipyard_ = value;
}
inline void offmap_possesions_t::set_old_shipyard(bool value) {
  _internal_set_old_shipyard(value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_possesions_t.old_shipyard)
}

// -------------------------------------------------------------------

// nation_t

// string name = 1;
inline void nation_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& nation_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.name)
  return _internal_name();
}
inline void nation_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.nation_t.name)
}
inline std::string* nation_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.name)
  return _internal_mutable_name();
}
inline const std::string& nation_t::_internal_name() const {
  return name_.Get();
}
inline void nation_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void nation_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.nation_t.name)
}
inline void nation_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.nation_t.name)
}
inline void nation_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.nation_t.name)
}
inline std::string* nation_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* nation_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.nation_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void nation_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.name)
}

// string short_name = 2;
inline void nation_t::clear_short_name() {
  short_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& nation_t::short_name() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.short_name)
  return _internal_short_name();
}
inline void nation_t::set_short_name(const std::string& value) {
  _internal_set_short_name(value);
  // @@protoc_insertion_point(field_set:pb_message.nation_t.short_name)
}
inline std::string* nation_t::mutable_short_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.short_name)
  return _internal_mutable_short_name();
}
inline const std::string& nation_t::_internal_short_name() const {
  return short_name_.Get();
}
inline void nation_t::_internal_set_short_name(const std::string& value) {
  
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void nation_t::set_short_name(std::string&& value) {
  
  short_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.nation_t.short_name)
}
inline void nation_t::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.nation_t.short_name)
}
inline void nation_t::set_short_name(const char* value,
    size_t size) {
  
  short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.nation_t.short_name)
}
inline std::string* nation_t::_internal_mutable_short_name() {
  
  return short_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* nation_t::release_short_name() {
  // @@protoc_insertion_point(field_release:pb_message.nation_t.short_name)
  return short_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void nation_t::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    
  } else {
    
  }
  short_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.short_name)
}

// .pb_message.capital_t capital = 3;
inline bool nation_t::_internal_has_capital() const {
  return this != internal_default_instance() && capital_ != nullptr;
}
inline bool nation_t::has_capital() const {
  return _internal_has_capital();
}
inline void nation_t::clear_capital() {
  if (GetArena() == nullptr && capital_ != nullptr) {
    delete capital_;
  }
  capital_ = nullptr;
}
inline const ::pb_message::capital_t& nation_t::_internal_capital() const {
  const ::pb_message::capital_t* p = capital_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::capital_t*>(
      &::pb_message::_capital_t_default_instance_);
}
inline const ::pb_message::capital_t& nation_t::capital() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.capital)
  return _internal_capital();
}
inline void nation_t::unsafe_arena_set_allocated_capital(
    ::pb_message::capital_t* capital) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capital_);
  }
  capital_ = capital;
  if (capital) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.nation_t.capital)
}
inline ::pb_message::capital_t* nation_t::release_capital() {
  
  ::pb_message::capital_t* temp = capital_;
  capital_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::capital_t* nation_t::unsafe_arena_release_capital() {
  // @@protoc_insertion_point(field_release:pb_message.nation_t.capital)
  
  ::pb_message::capital_t* temp = capital_;
  capital_ = nullptr;
  return temp;
}
inline ::pb_message::capital_t* nation_t::_internal_mutable_capital() {
  
  if (capital_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::capital_t>(GetArena());
    capital_ = p;
  }
  return capital_;
}
inline ::pb_message::capital_t* nation_t::mutable_capital() {
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.capital)
  return _internal_mutable_capital();
}
inline void nation_t::set_allocated_capital(::pb_message::capital_t* capital) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capital_;
  }
  if (capital) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capital);
    if (message_arena != submessage_arena) {
      capital = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capital, submessage_arena);
    }
    
  } else {
    
  }
  capital_ = capital;
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.capital)
}

// int32 free_strategic_moves = 4;
inline void nation_t::clear_free_strategic_moves() {
  free_strategic_moves_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nation_t::_internal_free_strategic_moves() const {
  return free_strategic_moves_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nation_t::free_strategic_moves() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.free_strategic_moves)
  return _internal_free_strategic_moves();
}
inline void nation_t::_internal_set_free_strategic_moves(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  free_strategic_moves_ = value;
}
inline void nation_t::set_free_strategic_moves(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_free_strategic_moves(value);
  // @@protoc_insertion_point(field_set:pb_message.nation_t.free_strategic_moves)
}

// int32 capital_star_points = 5;
inline void nation_t::clear_capital_star_points() {
  capital_star_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nation_t::_internal_capital_star_points() const {
  return capital_star_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nation_t::capital_star_points() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.capital_star_points)
  return _internal_capital_star_points();
}
inline void nation_t::_internal_set_capital_star_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  capital_star_points_ = value;
}
inline void nation_t::set_capital_star_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_capital_star_points(value);
  // @@protoc_insertion_point(field_set:pb_message.nation_t.capital_star_points)
}

// .pb_message.offmap_possesions_t offmap_possesions = 6;
inline bool nation_t::_internal_has_offmap_possesions() const {
  return this != internal_default_instance() && offmap_possesions_ != nullptr;
}
inline bool nation_t::has_offmap_possesions() const {
  return _internal_has_offmap_possesions();
}
inline void nation_t::clear_offmap_possesions() {
  if (GetArena() == nullptr && offmap_possesions_ != nullptr) {
    delete offmap_possesions_;
  }
  offmap_possesions_ = nullptr;
}
inline const ::pb_message::offmap_possesions_t& nation_t::_internal_offmap_possesions() const {
  const ::pb_message::offmap_possesions_t* p = offmap_possesions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::offmap_possesions_t*>(
      &::pb_message::_offmap_possesions_t_default_instance_);
}
inline const ::pb_message::offmap_possesions_t& nation_t::offmap_possesions() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.offmap_possesions)
  return _internal_offmap_possesions();
}
inline void nation_t::unsafe_arena_set_allocated_offmap_possesions(
    ::pb_message::offmap_possesions_t* offmap_possesions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offmap_possesions_);
  }
  offmap_possesions_ = offmap_possesions;
  if (offmap_possesions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.nation_t.offmap_possesions)
}
inline ::pb_message::offmap_possesions_t* nation_t::release_offmap_possesions() {
  
  ::pb_message::offmap_possesions_t* temp = offmap_possesions_;
  offmap_possesions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::offmap_possesions_t* nation_t::unsafe_arena_release_offmap_possesions() {
  // @@protoc_insertion_point(field_release:pb_message.nation_t.offmap_possesions)
  
  ::pb_message::offmap_possesions_t* temp = offmap_possesions_;
  offmap_possesions_ = nullptr;
  return temp;
}
inline ::pb_message::offmap_possesions_t* nation_t::_internal_mutable_offmap_possesions() {
  
  if (offmap_possesions_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::offmap_possesions_t>(GetArena());
    offmap_possesions_ = p;
  }
  return offmap_possesions_;
}
inline ::pb_message::offmap_possesions_t* nation_t::mutable_offmap_possesions() {
  // @@protoc_insertion_point(field_mutable:pb_message.nation_t.offmap_possesions)
  return _internal_mutable_offmap_possesions();
}
inline void nation_t::set_allocated_offmap_possesions(::pb_message::offmap_possesions_t* offmap_possesions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete offmap_possesions_;
  }
  if (offmap_possesions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(offmap_possesions);
    if (message_arena != submessage_arena) {
      offmap_possesions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offmap_possesions, submessage_arena);
    }
    
  } else {
    
  }
  offmap_possesions_ = offmap_possesions;
  // @@protoc_insertion_point(field_set_allocated:pb_message.nation_t.offmap_possesions)
}

// int32 nation_id = 7;
inline void nation_t::clear_nation_id() {
  nation_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nation_t::_internal_nation_id() const {
  return nation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nation_t::nation_id() const {
  // @@protoc_insertion_point(field_get:pb_message.nation_t.nation_id)
  return _internal_nation_id();
}
inline void nation_t::_internal_set_nation_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nation_id_ = value;
}
inline void nation_t::set_nation_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nation_id(value);
  // @@protoc_insertion_point(field_set:pb_message.nation_t.nation_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// nations_t

// map<string, .pb_message.nation_t> nations = 1;
inline int nations_t::_internal_nations_size() const {
  return nations_.size();
}
inline int nations_t::nations_size() const {
  return _internal_nations_size();
}
inline void nations_t::clear_nations() {
  nations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >&
nations_t::_internal_nations() const {
  return nations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >&
nations_t::nations() const {
  // @@protoc_insertion_point(field_map:pb_message.nations_t.nations)
  return _internal_nations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >*
nations_t::_internal_mutable_nations() {
  return nations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >*
nations_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.nations_t.nations)
  return _internal_mutable_nations();
}

// -------------------------------------------------------------------

// hex_t

// .pb_message.hex_coord_t coord = 1;
inline bool hex_t::_internal_has_coord() const {
  return this != internal_default_instance() && coord_ != nullptr;
}
inline bool hex_t::has_coord() const {
  return _internal_has_coord();
}
inline const ::pb_message::hex_coord_t& hex_t::_internal_coord() const {
  const ::pb_message::hex_coord_t* p = coord_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::hex_coord_t*>(
      &::pb_message::_hex_coord_t_default_instance_);
}
inline const ::pb_message::hex_coord_t& hex_t::coord() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_t.coord)
  return _internal_coord();
}
inline void hex_t::unsafe_arena_set_allocated_coord(
    ::pb_message::hex_coord_t* coord) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_);
  }
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.hex_t.coord)
}
inline ::pb_message::hex_coord_t* hex_t::release_coord() {
  
  ::pb_message::hex_coord_t* temp = coord_;
  coord_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::hex_coord_t* hex_t::unsafe_arena_release_coord() {
  // @@protoc_insertion_point(field_release:pb_message.hex_t.coord)
  
  ::pb_message::hex_coord_t* temp = coord_;
  coord_ = nullptr;
  return temp;
}
inline ::pb_message::hex_coord_t* hex_t::_internal_mutable_coord() {
  
  if (coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::hex_coord_t>(GetArena());
    coord_ = p;
  }
  return coord_;
}
inline ::pb_message::hex_coord_t* hex_t::mutable_coord() {
  // @@protoc_insertion_point(field_mutable:pb_message.hex_t.coord)
  return _internal_mutable_coord();
}
inline void hex_t::set_allocated_coord(::pb_message::hex_coord_t* coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord_);
  }
  if (coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coord)->GetArena();
    if (message_arena != submessage_arena) {
      coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coord, submessage_arena);
    }
    
  } else {
    
  }
  coord_ = coord;
  // @@protoc_insertion_point(field_set_allocated:pb_message.hex_t.coord)
}

// int32 owner = 2;
inline void hex_t::clear_owner() {
  owner_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hex_t::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hex_t::owner() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_t.owner)
  return _internal_owner();
}
inline void hex_t::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_ = value;
}
inline void hex_t::set_owner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:pb_message.hex_t.owner)
}

// .pb_message.feature_t feature = 3;
inline void hex_t::clear_feature() {
  feature_ = 0;
}
inline ::pb_message::feature_t hex_t::_internal_feature() const {
  return static_cast< ::pb_message::feature_t >(feature_);
}
inline ::pb_message::feature_t hex_t::feature() const {
  // @@protoc_insertion_point(field_get:pb_message.hex_t.feature)
  return _internal_feature();
}
inline void hex_t::_internal_set_feature(::pb_message::feature_t value) {
  
  feature_ = value;
}
inline void hex_t::set_feature(::pb_message::feature_t value) {
  _internal_set_feature(value);
  // @@protoc_insertion_point(field_set:pb_message.hex_t.feature)
}

// -------------------------------------------------------------------

// province_hex_t

// int32 hex = 1;
inline void province_hex_t::clear_hex() {
  hex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_hex_t::_internal_hex() const {
  return hex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 province_hex_t::hex() const {
  // @@protoc_insertion_point(field_get:pb_message.province_hex_t.hex)
  return _internal_hex();
}
inline void province_hex_t::_internal_set_hex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hex_ = value;
}
inline void province_hex_t::set_hex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hex(value);
  // @@protoc_insertion_point(field_set:pb_message.province_hex_t.hex)
}

// .pb_message.feature_t feature = 2;
inline void province_hex_t::clear_feature() {
  feature_ = 0;
}
inline ::pb_message::feature_t province_hex_t::_internal_feature() const {
  return static_cast< ::pb_message::feature_t >(feature_);
}
inline ::pb_message::feature_t province_hex_t::feature() const {
  // @@protoc_insertion_point(field_get:pb_message.province_hex_t.feature)
  return _internal_feature();
}
inline void province_hex_t::_internal_set_feature(::pb_message::feature_t value) {
  
  feature_ = value;
}
inline void province_hex_t::set_feature(::pb_message::feature_t value) {
  _internal_set_feature(value);
  // @@protoc_insertion_point(field_set:pb_message.province_hex_t.feature)
}

// -------------------------------------------------------------------

// province_t

// repeated .pb_message.province_hex_t hexes = 1;
inline int province_t::_internal_hexes_size() const {
  return hexes_.size();
}
inline int province_t::hexes_size() const {
  return _internal_hexes_size();
}
inline void province_t::clear_hexes() {
  hexes_.Clear();
}
inline ::pb_message::province_hex_t* province_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.province_t.hexes)
  return hexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_hex_t >*
province_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.province_t.hexes)
  return &hexes_;
}
inline const ::pb_message::province_hex_t& province_t::_internal_hexes(int index) const {
  return hexes_.Get(index);
}
inline const ::pb_message::province_hex_t& province_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.province_t.hexes)
  return _internal_hexes(index);
}
inline ::pb_message::province_hex_t* province_t::_internal_add_hexes() {
  return hexes_.Add();
}
inline ::pb_message::province_hex_t* province_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.province_t.hexes)
  return _internal_add_hexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_hex_t >&
province_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.province_t.hexes)
  return hexes_;
}

// -------------------------------------------------------------------

// offmap_area_t

// string name = 1;
inline void offmap_area_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& offmap_area_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.name)
  return _internal_name();
}
inline void offmap_area_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.name)
}
inline std::string* offmap_area_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.offmap_area_t.name)
  return _internal_mutable_name();
}
inline const std::string& offmap_area_t::_internal_name() const {
  return name_.Get();
}
inline void offmap_area_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void offmap_area_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.offmap_area_t.name)
}
inline void offmap_area_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.offmap_area_t.name)
}
inline void offmap_area_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.offmap_area_t.name)
}
inline std::string* offmap_area_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* offmap_area_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.offmap_area_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void offmap_area_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.offmap_area_t.name)
}

// repeated .pb_message.feature_t features = 2 [packed = true];
inline int offmap_area_t::_internal_features_size() const {
  return features_.size();
}
inline int offmap_area_t::features_size() const {
  return _internal_features_size();
}
inline void offmap_area_t::clear_features() {
  features_.Clear();
}
inline ::pb_message::feature_t offmap_area_t::_internal_features(int index) const {
  return static_cast< ::pb_message::feature_t >(features_.Get(index));
}
inline ::pb_message::feature_t offmap_area_t::features(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.features)
  return _internal_features(index);
}
inline void offmap_area_t::set_features(int index, ::pb_message::feature_t value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.features)
}
inline void offmap_area_t::_internal_add_features(::pb_message::feature_t value) {
  features_.Add(value);
}
inline void offmap_area_t::add_features(::pb_message::feature_t value) {
  // @@protoc_insertion_point(field_add:pb_message.offmap_area_t.features)
  _internal_add_features(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
offmap_area_t::features() const {
  // @@protoc_insertion_point(field_list:pb_message.offmap_area_t.features)
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
offmap_area_t::_internal_mutable_features() {
  return &features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
offmap_area_t::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.offmap_area_t.features)
  return _internal_mutable_features();
}

// repeated int32 feature_hexes = 3 [packed = true];
inline int offmap_area_t::_internal_feature_hexes_size() const {
  return feature_hexes_.size();
}
inline int offmap_area_t::feature_hexes_size() const {
  return _internal_feature_hexes_size();
}
inline void offmap_area_t::clear_feature_hexes() {
  feature_hexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_area_t::_internal_feature_hexes(int index) const {
  return feature_hexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_area_t::feature_hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.feature_hexes)
  return _internal_feature_hexes(index);
}
inline void offmap_area_t::set_feature_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  feature_hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.feature_hexes)
}
inline void offmap_area_t::_internal_add_feature_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  feature_hexes_.Add(value);
}
inline void offmap_area_t::add_feature_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_feature_hexes(value);
  // @@protoc_insertion_point(field_add:pb_message.offmap_area_t.feature_hexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
offmap_area_t::_internal_feature_hexes() const {
  return feature_hexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
offmap_area_t::feature_hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.offmap_area_t.feature_hexes)
  return _internal_feature_hexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
offmap_area_t::_internal_mutable_feature_hexes() {
  return &feature_hexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
offmap_area_t::mutable_feature_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.offmap_area_t.feature_hexes)
  return _internal_mutable_feature_hexes();
}

// repeated int32 adjacent_hexes = 4 [packed = true];
inline int offmap_area_t::_internal_adjacent_hexes_size() const {
  return adjacent_hexes_.size();
}
inline int offmap_area_t::adjacent_hexes_size() const {
  return _internal_adjacent_hexes_size();
}
inline void offmap_area_t::clear_adjacent_hexes() {
  adjacent_hexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_area_t::_internal_adjacent_hexes(int index) const {
  return adjacent_hexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offmap_area_t::adjacent_hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.offmap_area_t.adjacent_hexes)
  return _internal_adjacent_hexes(index);
}
inline void offmap_area_t::set_adjacent_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  adjacent_hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.offmap_area_t.adjacent_hexes)
}
inline void offmap_area_t::_internal_add_adjacent_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  adjacent_hexes_.Add(value);
}
inline void offmap_area_t::add_adjacent_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_adjacent_hexes(value);
  // @@protoc_insertion_point(field_add:pb_message.offmap_area_t.adjacent_hexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
offmap_area_t::_internal_adjacent_hexes() const {
  return adjacent_hexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
offmap_area_t::adjacent_hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.offmap_area_t.adjacent_hexes)
  return _internal_adjacent_hexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
offmap_area_t::_internal_mutable_adjacent_hexes() {
  return &adjacent_hexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
offmap_area_t::mutable_adjacent_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.offmap_area_t.adjacent_hexes)
  return _internal_mutable_adjacent_hexes();
}

// -------------------------------------------------------------------

// starting_national_holdings_t

// repeated .pb_message.province_t provinces = 1;
inline int starting_national_holdings_t::_internal_provinces_size() const {
  return provinces_.size();
}
inline int starting_national_holdings_t::provinces_size() const {
  return _internal_provinces_size();
}
inline void starting_national_holdings_t::clear_provinces() {
  provinces_.Clear();
}
inline ::pb_message::province_t* starting_national_holdings_t::mutable_provinces(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.starting_national_holdings_t.provinces)
  return provinces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_t >*
starting_national_holdings_t::mutable_provinces() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_national_holdings_t.provinces)
  return &provinces_;
}
inline const ::pb_message::province_t& starting_national_holdings_t::_internal_provinces(int index) const {
  return provinces_.Get(index);
}
inline const ::pb_message::province_t& starting_national_holdings_t::provinces(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_national_holdings_t.provinces)
  return _internal_provinces(index);
}
inline ::pb_message::province_t* starting_national_holdings_t::_internal_add_provinces() {
  return provinces_.Add();
}
inline ::pb_message::province_t* starting_national_holdings_t::add_provinces() {
  // @@protoc_insertion_point(field_add:pb_message.starting_national_holdings_t.provinces)
  return _internal_add_provinces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::province_t >&
starting_national_holdings_t::provinces() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_national_holdings_t.provinces)
  return provinces_;
}

// .pb_message.offmap_area_t offmap_area = 2;
inline bool starting_national_holdings_t::_internal_has_offmap_area() const {
  return this != internal_default_instance() && offmap_area_ != nullptr;
}
inline bool starting_national_holdings_t::has_offmap_area() const {
  return _internal_has_offmap_area();
}
inline void starting_national_holdings_t::clear_offmap_area() {
  if (GetArena() == nullptr && offmap_area_ != nullptr) {
    delete offmap_area_;
  }
  offmap_area_ = nullptr;
}
inline const ::pb_message::offmap_area_t& starting_national_holdings_t::_internal_offmap_area() const {
  const ::pb_message::offmap_area_t* p = offmap_area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::offmap_area_t*>(
      &::pb_message::_offmap_area_t_default_instance_);
}
inline const ::pb_message::offmap_area_t& starting_national_holdings_t::offmap_area() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_national_holdings_t.offmap_area)
  return _internal_offmap_area();
}
inline void starting_national_holdings_t::unsafe_arena_set_allocated_offmap_area(
    ::pb_message::offmap_area_t* offmap_area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offmap_area_);
  }
  offmap_area_ = offmap_area;
  if (offmap_area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.starting_national_holdings_t.offmap_area)
}
inline ::pb_message::offmap_area_t* starting_national_holdings_t::release_offmap_area() {
  
  ::pb_message::offmap_area_t* temp = offmap_area_;
  offmap_area_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::offmap_area_t* starting_national_holdings_t::unsafe_arena_release_offmap_area() {
  // @@protoc_insertion_point(field_release:pb_message.starting_national_holdings_t.offmap_area)
  
  ::pb_message::offmap_area_t* temp = offmap_area_;
  offmap_area_ = nullptr;
  return temp;
}
inline ::pb_message::offmap_area_t* starting_national_holdings_t::_internal_mutable_offmap_area() {
  
  if (offmap_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::offmap_area_t>(GetArena());
    offmap_area_ = p;
  }
  return offmap_area_;
}
inline ::pb_message::offmap_area_t* starting_national_holdings_t::mutable_offmap_area() {
  // @@protoc_insertion_point(field_mutable:pb_message.starting_national_holdings_t.offmap_area)
  return _internal_mutable_offmap_area();
}
inline void starting_national_holdings_t::set_allocated_offmap_area(::pb_message::offmap_area_t* offmap_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete offmap_area_;
  }
  if (offmap_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(offmap_area);
    if (message_arena != submessage_arena) {
      offmap_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offmap_area, submessage_arena);
    }
    
  } else {
    
  }
  offmap_area_ = offmap_area;
  // @@protoc_insertion_point(field_set_allocated:pb_message.starting_national_holdings_t.offmap_area)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// map_t

// int32 width = 1;
inline void map_t::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::width() const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.width)
  return _internal_width();
}
inline void map_t::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void map_t::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pb_message.map_t.width)
}

// int32 height = 2;
inline void map_t::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::height() const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.height)
  return _internal_height();
}
inline void map_t::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void map_t::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:pb_message.map_t.height)
}

// repeated int32 nz_planets = 3 [packed = true];
inline int map_t::_internal_nz_planets_size() const {
  return nz_planets_.size();
}
inline int map_t::nz_planets_size() const {
  return _internal_nz_planets_size();
}
inline void map_t::clear_nz_planets() {
  nz_planets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::_internal_nz_planets(int index) const {
  return nz_planets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::nz_planets(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.nz_planets)
  return _internal_nz_planets(index);
}
inline void map_t::set_nz_planets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  nz_planets_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.map_t.nz_planets)
}
inline void map_t::_internal_add_nz_planets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  nz_planets_.Add(value);
}
inline void map_t::add_nz_planets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_nz_planets(value);
  // @@protoc_insertion_point(field_add:pb_message.map_t.nz_planets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
map_t::_internal_nz_planets() const {
  return nz_planets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
map_t::nz_planets() const {
  // @@protoc_insertion_point(field_list:pb_message.map_t.nz_planets)
  return _internal_nz_planets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
map_t::_internal_mutable_nz_planets() {
  return &nz_planets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
map_t::mutable_nz_planets() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.map_t.nz_planets)
  return _internal_mutable_nz_planets();
}

// repeated int32 nz_hexes = 4 [packed = true];
inline int map_t::_internal_nz_hexes_size() const {
  return nz_hexes_.size();
}
inline int map_t::nz_hexes_size() const {
  return _internal_nz_hexes_size();
}
inline void map_t::clear_nz_hexes() {
  nz_hexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::_internal_nz_hexes(int index) const {
  return nz_hexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_t::nz_hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.nz_hexes)
  return _internal_nz_hexes(index);
}
inline void map_t::set_nz_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  nz_hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.map_t.nz_hexes)
}
inline void map_t::_internal_add_nz_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  nz_hexes_.Add(value);
}
inline void map_t::add_nz_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_nz_hexes(value);
  // @@protoc_insertion_point(field_add:pb_message.map_t.nz_hexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
map_t::_internal_nz_hexes() const {
  return nz_hexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
map_t::nz_hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.map_t.nz_hexes)
  return _internal_nz_hexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
map_t::_internal_mutable_nz_hexes() {
  return &nz_hexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
map_t::mutable_nz_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.map_t.nz_hexes)
  return _internal_mutable_nz_hexes();
}

// map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
inline int map_t::_internal_starting_national_holdings_size() const {
  return starting_national_holdings_.size();
}
inline int map_t::starting_national_holdings_size() const {
  return _internal_starting_national_holdings_size();
}
inline void map_t::clear_starting_national_holdings() {
  starting_national_holdings_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >&
map_t::_internal_starting_national_holdings() const {
  return starting_national_holdings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >&
map_t::starting_national_holdings() const {
  // @@protoc_insertion_point(field_map:pb_message.map_t.starting_national_holdings)
  return _internal_starting_national_holdings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >*
map_t::_internal_mutable_starting_national_holdings() {
  return starting_national_holdings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >*
map_t::mutable_starting_national_holdings() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.map_t.starting_national_holdings)
  return _internal_mutable_starting_national_holdings();
}

// repeated .pb_message.hex_t hexes = 6;
inline int map_t::_internal_hexes_size() const {
  return hexes_.size();
}
inline int map_t::hexes_size() const {
  return _internal_hexes_size();
}
inline void map_t::clear_hexes() {
  hexes_.Clear();
}
inline ::pb_message::hex_t* map_t::mutable_hexes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.map_t.hexes)
  return hexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::hex_t >*
map_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.map_t.hexes)
  return &hexes_;
}
inline const ::pb_message::hex_t& map_t::_internal_hexes(int index) const {
  return hexes_.Get(index);
}
inline const ::pb_message::hex_t& map_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.map_t.hexes)
  return _internal_hexes(index);
}
inline ::pb_message::hex_t* map_t::_internal_add_hexes() {
  return hexes_.Add();
}
inline ::pb_message::hex_t* map_t::add_hexes() {
  // @@protoc_insertion_point(field_add:pb_message.map_t.hexes)
  return _internal_add_hexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::hex_t >&
map_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.map_t.hexes)
  return hexes_;
}

// -------------------------------------------------------------------

// model_t

// .pb_message.nations_t nations = 1;
inline bool model_t::_internal_has_nations() const {
  return this != internal_default_instance() && nations_ != nullptr;
}
inline bool model_t::has_nations() const {
  return _internal_has_nations();
}
inline void model_t::clear_nations() {
  if (GetArena() == nullptr && nations_ != nullptr) {
    delete nations_;
  }
  nations_ = nullptr;
}
inline const ::pb_message::nations_t& model_t::_internal_nations() const {
  const ::pb_message::nations_t* p = nations_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::nations_t*>(
      &::pb_message::_nations_t_default_instance_);
}
inline const ::pb_message::nations_t& model_t::nations() const {
  // @@protoc_insertion_point(field_get:pb_message.model_t.nations)
  return _internal_nations();
}
inline void model_t::unsafe_arena_set_allocated_nations(
    ::pb_message::nations_t* nations) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nations_);
  }
  nations_ = nations;
  if (nations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.model_t.nations)
}
inline ::pb_message::nations_t* model_t::release_nations() {
  
  ::pb_message::nations_t* temp = nations_;
  nations_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::nations_t* model_t::unsafe_arena_release_nations() {
  // @@protoc_insertion_point(field_release:pb_message.model_t.nations)
  
  ::pb_message::nations_t* temp = nations_;
  nations_ = nullptr;
  return temp;
}
inline ::pb_message::nations_t* model_t::_internal_mutable_nations() {
  
  if (nations_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::nations_t>(GetArena());
    nations_ = p;
  }
  return nations_;
}
inline ::pb_message::nations_t* model_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable:pb_message.model_t.nations)
  return _internal_mutable_nations();
}
inline void model_t::set_allocated_nations(::pb_message::nations_t* nations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nations_;
  }
  if (nations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nations);
    if (message_arena != submessage_arena) {
      nations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nations, submessage_arena);
    }
    
  } else {
    
  }
  nations_ = nations;
  // @@protoc_insertion_point(field_set_allocated:pb_message.model_t.nations)
}

// .pb_message.map_t map = 2;
inline bool model_t::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool model_t::has_map() const {
  return _internal_has_map();
}
inline void model_t::clear_map() {
  if (GetArena() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::pb_message::map_t& model_t::_internal_map() const {
  const ::pb_message::map_t* p = map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::map_t*>(
      &::pb_message::_map_t_default_instance_);
}
inline const ::pb_message::map_t& model_t::map() const {
  // @@protoc_insertion_point(field_get:pb_message.model_t.map)
  return _internal_map();
}
inline void model_t::unsafe_arena_set_allocated_map(
    ::pb_message::map_t* map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.model_t.map)
}
inline ::pb_message::map_t* model_t::release_map() {
  
  ::pb_message::map_t* temp = map_;
  map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::map_t* model_t::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:pb_message.model_t.map)
  
  ::pb_message::map_t* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::pb_message::map_t* model_t::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::map_t>(GetArena());
    map_ = p;
  }
  return map_;
}
inline ::pb_message::map_t* model_t::mutable_map() {
  // @@protoc_insertion_point(field_mutable:pb_message.model_t.map)
  return _internal_mutable_map();
}
inline void model_t::set_allocated_map(::pb_message::map_t* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:pb_message.model_t.map)
}

// -------------------------------------------------------------------

// oob_unit_t

// string unit = 1;
inline void oob_unit_t::clear_unit() {
  unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& oob_unit_t::unit() const {
  // @@protoc_insertion_point(field_get:pb_message.oob_unit_t.unit)
  return _internal_unit();
}
inline void oob_unit_t::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:pb_message.oob_unit_t.unit)
}
inline std::string* oob_unit_t::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:pb_message.oob_unit_t.unit)
  return _internal_mutable_unit();
}
inline const std::string& oob_unit_t::_internal_unit() const {
  return unit_.Get();
}
inline void oob_unit_t::_internal_set_unit(const std::string& value) {
  
  unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void oob_unit_t::set_unit(std::string&& value) {
  
  unit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.oob_unit_t.unit)
}
inline void oob_unit_t::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.oob_unit_t.unit)
}
inline void oob_unit_t::set_unit(const char* value,
    size_t size) {
  
  unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.oob_unit_t.unit)
}
inline std::string* oob_unit_t::_internal_mutable_unit() {
  
  return unit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* oob_unit_t::release_unit() {
  // @@protoc_insertion_point(field_release:pb_message.oob_unit_t.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void oob_unit_t::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.oob_unit_t.unit)
}

// int32 times = 2;
inline void oob_unit_t::clear_times() {
  times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oob_unit_t::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oob_unit_t::times() const {
  // @@protoc_insertion_point(field_get:pb_message.oob_unit_t.times)
  return _internal_times();
}
inline void oob_unit_t::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_ = value;
}
inline void oob_unit_t::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:pb_message.oob_unit_t.times)
}

// -------------------------------------------------------------------

// production_element_t

// int32 year = 1;
inline void production_element_t::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 production_element_t::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 production_element_t::year() const {
  // @@protoc_insertion_point(field_get:pb_message.production_element_t.year)
  return _internal_year();
}
inline void production_element_t::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
}
inline void production_element_t::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:pb_message.production_element_t.year)
}

// .pb_message.season_t season = 2;
inline void production_element_t::clear_season() {
  season_ = 0;
}
inline ::pb_message::season_t production_element_t::_internal_season() const {
  return static_cast< ::pb_message::season_t >(season_);
}
inline ::pb_message::season_t production_element_t::season() const {
  // @@protoc_insertion_point(field_get:pb_message.production_element_t.season)
  return _internal_season();
}
inline void production_element_t::_internal_set_season(::pb_message::season_t value) {
  
  season_ = value;
}
inline void production_element_t::set_season(::pb_message::season_t value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:pb_message.production_element_t.season)
}

// repeated .pb_message.oob_unit_t units = 3;
inline int production_element_t::_internal_units_size() const {
  return units_.size();
}
inline int production_element_t::units_size() const {
  return _internal_units_size();
}
inline void production_element_t::clear_units() {
  units_.Clear();
}
inline ::pb_message::oob_unit_t* production_element_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.production_element_t.units)
  return units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
production_element_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.production_element_t.units)
  return &units_;
}
inline const ::pb_message::oob_unit_t& production_element_t::_internal_units(int index) const {
  return units_.Get(index);
}
inline const ::pb_message::oob_unit_t& production_element_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.production_element_t.units)
  return _internal_units(index);
}
inline ::pb_message::oob_unit_t* production_element_t::_internal_add_units() {
  return units_.Add();
}
inline ::pb_message::oob_unit_t* production_element_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.production_element_t.units)
  return _internal_add_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
production_element_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.production_element_t.units)
  return units_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// starting_fleet_t

// repeated int32 hexes = 1 [packed = true];
inline int starting_fleet_t::_internal_hexes_size() const {
  return hexes_.size();
}
inline int starting_fleet_t::hexes_size() const {
  return _internal_hexes_size();
}
inline void starting_fleet_t::clear_hexes() {
  hexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 starting_fleet_t::_internal_hexes(int index) const {
  return hexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 starting_fleet_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.hexes)
  return _internal_hexes(index);
}
inline void starting_fleet_t::set_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.hexes)
}
inline void starting_fleet_t::_internal_add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hexes_.Add(value);
}
inline void starting_fleet_t::add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hexes(value);
  // @@protoc_insertion_point(field_add:pb_message.starting_fleet_t.hexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
starting_fleet_t::_internal_hexes() const {
  return hexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
starting_fleet_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_fleet_t.hexes)
  return _internal_hexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
starting_fleet_t::_internal_mutable_hexes() {
  return &hexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
starting_fleet_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_fleet_t.hexes)
  return _internal_mutable_hexes();
}

// repeated .pb_message.oob_unit_t units = 2;
inline int starting_fleet_t::_internal_units_size() const {
  return units_.size();
}
inline int starting_fleet_t::units_size() const {
  return _internal_units_size();
}
inline void starting_fleet_t::clear_units() {
  units_.Clear();
}
inline ::pb_message::oob_unit_t* starting_fleet_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.starting_fleet_t.units)
  return units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
starting_fleet_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_fleet_t.units)
  return &units_;
}
inline const ::pb_message::oob_unit_t& starting_fleet_t::_internal_units(int index) const {
  return units_.Get(index);
}
inline const ::pb_message::oob_unit_t& starting_fleet_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.units)
  return _internal_units(index);
}
inline ::pb_message::oob_unit_t* starting_fleet_t::_internal_add_units() {
  return units_.Add();
}
inline ::pb_message::oob_unit_t* starting_fleet_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.starting_fleet_t.units)
  return _internal_add_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
starting_fleet_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_fleet_t.units)
  return units_;
}

// bool reserve = 3;
inline void starting_fleet_t::clear_reserve() {
  reserve_ = false;
}
inline bool starting_fleet_t::_internal_reserve() const {
  return reserve_;
}
inline bool starting_fleet_t::reserve() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.reserve)
  return _internal_reserve();
}
inline void starting_fleet_t::_internal_set_reserve(bool value) {
  
  reserve_ = value;
}
inline void starting_fleet_t::set_reserve(bool value) {
  _internal_set_reserve(value);
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.reserve)
}

// repeated .pb_message.production_element_t prewar_construction = 4;
inline int starting_fleet_t::_internal_prewar_construction_size() const {
  return prewar_construction_.size();
}
inline int starting_fleet_t::prewar_construction_size() const {
  return _internal_prewar_construction_size();
}
inline void starting_fleet_t::clear_prewar_construction() {
  prewar_construction_.Clear();
}
inline ::pb_message::production_element_t* starting_fleet_t::mutable_prewar_construction(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.starting_fleet_t.prewar_construction)
  return prewar_construction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >*
starting_fleet_t::mutable_prewar_construction() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.starting_fleet_t.prewar_construction)
  return &prewar_construction_;
}
inline const ::pb_message::production_element_t& starting_fleet_t::_internal_prewar_construction(int index) const {
  return prewar_construction_.Get(index);
}
inline const ::pb_message::production_element_t& starting_fleet_t::prewar_construction(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.prewar_construction)
  return _internal_prewar_construction(index);
}
inline ::pb_message::production_element_t* starting_fleet_t::_internal_add_prewar_construction() {
  return prewar_construction_.Add();
}
inline ::pb_message::production_element_t* starting_fleet_t::add_prewar_construction() {
  // @@protoc_insertion_point(field_add:pb_message.starting_fleet_t.prewar_construction)
  return _internal_add_prewar_construction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >&
starting_fleet_t::prewar_construction() const {
  // @@protoc_insertion_point(field_list:pb_message.starting_fleet_t.prewar_construction)
  return prewar_construction_;
}

// int32 strategic_move_arrival_year = 5;
inline void starting_fleet_t::clear_strategic_move_arrival_year() {
  strategic_move_arrival_year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 starting_fleet_t::_internal_strategic_move_arrival_year() const {
  return strategic_move_arrival_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 starting_fleet_t::strategic_move_arrival_year() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.strategic_move_arrival_year)
  return _internal_strategic_move_arrival_year();
}
inline void starting_fleet_t::_internal_set_strategic_move_arrival_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strategic_move_arrival_year_ = value;
}
inline void starting_fleet_t::set_strategic_move_arrival_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strategic_move_arrival_year(value);
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.strategic_move_arrival_year)
}

// .pb_message.season_t strategic_move_arrival_season = 6;
inline void starting_fleet_t::clear_strategic_move_arrival_season() {
  strategic_move_arrival_season_ = 0;
}
inline ::pb_message::season_t starting_fleet_t::_internal_strategic_move_arrival_season() const {
  return static_cast< ::pb_message::season_t >(strategic_move_arrival_season_);
}
inline ::pb_message::season_t starting_fleet_t::strategic_move_arrival_season() const {
  // @@protoc_insertion_point(field_get:pb_message.starting_fleet_t.strategic_move_arrival_season)
  return _internal_strategic_move_arrival_season();
}
inline void starting_fleet_t::_internal_set_strategic_move_arrival_season(::pb_message::season_t value) {
  
  strategic_move_arrival_season_ = value;
}
inline void starting_fleet_t::set_strategic_move_arrival_season(::pb_message::season_t value) {
  _internal_set_strategic_move_arrival_season(value);
  // @@protoc_insertion_point(field_set:pb_message.starting_fleet_t.strategic_move_arrival_season)
}

// map<int32, int32> hex_placement_limits = 7;
inline int starting_fleet_t::_internal_hex_placement_limits_size() const {
  return hex_placement_limits_.size();
}
inline int starting_fleet_t::hex_placement_limits_size() const {
  return _internal_hex_placement_limits_size();
}
inline void starting_fleet_t::clear_hex_placement_limits() {
  hex_placement_limits_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
starting_fleet_t::_internal_hex_placement_limits() const {
  return hex_placement_limits_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
starting_fleet_t::hex_placement_limits() const {
  // @@protoc_insertion_point(field_map:pb_message.starting_fleet_t.hex_placement_limits)
  return _internal_hex_placement_limits();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
starting_fleet_t::_internal_mutable_hex_placement_limits() {
  return hex_placement_limits_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
starting_fleet_t::mutable_hex_placement_limits() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.starting_fleet_t.hex_placement_limits)
  return _internal_mutable_hex_placement_limits();
}

// -------------------------------------------------------------------

// mothball_reserve_t

// repeated .pb_message.oob_unit_t units = 1;
inline int mothball_reserve_t::_internal_units_size() const {
  return units_.size();
}
inline int mothball_reserve_t::units_size() const {
  return _internal_units_size();
}
inline void mothball_reserve_t::clear_units() {
  units_.Clear();
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.mothball_reserve_t.units)
  return units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
mothball_reserve_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.mothball_reserve_t.units)
  return &units_;
}
inline const ::pb_message::oob_unit_t& mothball_reserve_t::_internal_units(int index) const {
  return units_.Get(index);
}
inline const ::pb_message::oob_unit_t& mothball_reserve_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.mothball_reserve_t.units)
  return _internal_units(index);
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::_internal_add_units() {
  return units_.Add();
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.mothball_reserve_t.units)
  return _internal_add_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
mothball_reserve_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.mothball_reserve_t.units)
  return units_;
}

// repeated .pb_message.oob_unit_t war_release = 2;
inline int mothball_reserve_t::_internal_war_release_size() const {
  return war_release_.size();
}
inline int mothball_reserve_t::war_release_size() const {
  return _internal_war_release_size();
}
inline void mothball_reserve_t::clear_war_release() {
  war_release_.Clear();
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::mutable_war_release(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.mothball_reserve_t.war_release)
  return war_release_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
mothball_reserve_t::mutable_war_release() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.mothball_reserve_t.war_release)
  return &war_release_;
}
inline const ::pb_message::oob_unit_t& mothball_reserve_t::_internal_war_release(int index) const {
  return war_release_.Get(index);
}
inline const ::pb_message::oob_unit_t& mothball_reserve_t::war_release(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.mothball_reserve_t.war_release)
  return _internal_war_release(index);
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::_internal_add_war_release() {
  return war_release_.Add();
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::add_war_release() {
  // @@protoc_insertion_point(field_add:pb_message.mothball_reserve_t.war_release)
  return _internal_add_war_release();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
mothball_reserve_t::war_release() const {
  // @@protoc_insertion_point(field_list:pb_message.mothball_reserve_t.war_release)
  return war_release_;
}

// repeated .pb_message.oob_unit_t limited_war_release = 3;
inline int mothball_reserve_t::_internal_limited_war_release_size() const {
  return limited_war_release_.size();
}
inline int mothball_reserve_t::limited_war_release_size() const {
  return _internal_limited_war_release_size();
}
inline void mothball_reserve_t::clear_limited_war_release() {
  limited_war_release_.Clear();
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::mutable_limited_war_release(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.mothball_reserve_t.limited_war_release)
  return limited_war_release_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >*
mothball_reserve_t::mutable_limited_war_release() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.mothball_reserve_t.limited_war_release)
  return &limited_war_release_;
}
inline const ::pb_message::oob_unit_t& mothball_reserve_t::_internal_limited_war_release(int index) const {
  return limited_war_release_.Get(index);
}
inline const ::pb_message::oob_unit_t& mothball_reserve_t::limited_war_release(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.mothball_reserve_t.limited_war_release)
  return _internal_limited_war_release(index);
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::_internal_add_limited_war_release() {
  return limited_war_release_.Add();
}
inline ::pb_message::oob_unit_t* mothball_reserve_t::add_limited_war_release() {
  // @@protoc_insertion_point(field_add:pb_message.mothball_reserve_t.limited_war_release)
  return _internal_add_limited_war_release();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::oob_unit_t >&
mothball_reserve_t::limited_war_release() const {
  // @@protoc_insertion_point(field_list:pb_message.mothball_reserve_t.limited_war_release)
  return limited_war_release_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// order_of_battle_t

// map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
inline int order_of_battle_t::_internal_starting_fleets_size() const {
  return starting_fleets_.size();
}
inline int order_of_battle_t::starting_fleets_size() const {
  return _internal_starting_fleets_size();
}
inline void order_of_battle_t::clear_starting_fleets() {
  starting_fleets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >&
order_of_battle_t::_internal_starting_fleets() const {
  return starting_fleets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >&
order_of_battle_t::starting_fleets() const {
  // @@protoc_insertion_point(field_map:pb_message.order_of_battle_t.starting_fleets)
  return _internal_starting_fleets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >*
order_of_battle_t::_internal_mutable_starting_fleets() {
  return starting_fleets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >*
order_of_battle_t::mutable_starting_fleets() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.order_of_battle_t.starting_fleets)
  return _internal_mutable_starting_fleets();
}

// .pb_message.mothball_reserve_t mothball_reserve = 2;
inline bool order_of_battle_t::_internal_has_mothball_reserve() const {
  return this != internal_default_instance() && mothball_reserve_ != nullptr;
}
inline bool order_of_battle_t::has_mothball_reserve() const {
  return _internal_has_mothball_reserve();
}
inline void order_of_battle_t::clear_mothball_reserve() {
  if (GetArena() == nullptr && mothball_reserve_ != nullptr) {
    delete mothball_reserve_;
  }
  mothball_reserve_ = nullptr;
}
inline const ::pb_message::mothball_reserve_t& order_of_battle_t::_internal_mothball_reserve() const {
  const ::pb_message::mothball_reserve_t* p = mothball_reserve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::mothball_reserve_t*>(
      &::pb_message::_mothball_reserve_t_default_instance_);
}
inline const ::pb_message::mothball_reserve_t& order_of_battle_t::mothball_reserve() const {
  // @@protoc_insertion_point(field_get:pb_message.order_of_battle_t.mothball_reserve)
  return _internal_mothball_reserve();
}
inline void order_of_battle_t::unsafe_arena_set_allocated_mothball_reserve(
    ::pb_message::mothball_reserve_t* mothball_reserve) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mothball_reserve_);
  }
  mothball_reserve_ = mothball_reserve;
  if (mothball_reserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.order_of_battle_t.mothball_reserve)
}
inline ::pb_message::mothball_reserve_t* order_of_battle_t::release_mothball_reserve() {
  
  ::pb_message::mothball_reserve_t* temp = mothball_reserve_;
  mothball_reserve_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::mothball_reserve_t* order_of_battle_t::unsafe_arena_release_mothball_reserve() {
  // @@protoc_insertion_point(field_release:pb_message.order_of_battle_t.mothball_reserve)
  
  ::pb_message::mothball_reserve_t* temp = mothball_reserve_;
  mothball_reserve_ = nullptr;
  return temp;
}
inline ::pb_message::mothball_reserve_t* order_of_battle_t::_internal_mutable_mothball_reserve() {
  
  if (mothball_reserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::mothball_reserve_t>(GetArena());
    mothball_reserve_ = p;
  }
  return mothball_reserve_;
}
inline ::pb_message::mothball_reserve_t* order_of_battle_t::mutable_mothball_reserve() {
  // @@protoc_insertion_point(field_mutable:pb_message.order_of_battle_t.mothball_reserve)
  return _internal_mutable_mothball_reserve();
}
inline void order_of_battle_t::set_allocated_mothball_reserve(::pb_message::mothball_reserve_t* mothball_reserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mothball_reserve_;
  }
  if (mothball_reserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mothball_reserve);
    if (message_arena != submessage_arena) {
      mothball_reserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mothball_reserve, submessage_arena);
    }
    
  } else {
    
  }
  mothball_reserve_ = mothball_reserve;
  // @@protoc_insertion_point(field_set_allocated:pb_message.order_of_battle_t.mothball_reserve)
}

// repeated .pb_message.production_element_t production = 3;
inline int order_of_battle_t::_internal_production_size() const {
  return production_.size();
}
inline int order_of_battle_t::production_size() const {
  return _internal_production_size();
}
inline void order_of_battle_t::clear_production() {
  production_.Clear();
}
inline ::pb_message::production_element_t* order_of_battle_t::mutable_production(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.order_of_battle_t.production)
  return production_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >*
order_of_battle_t::mutable_production() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.order_of_battle_t.production)
  return &production_;
}
inline const ::pb_message::production_element_t& order_of_battle_t::_internal_production(int index) const {
  return production_.Get(index);
}
inline const ::pb_message::production_element_t& order_of_battle_t::production(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.order_of_battle_t.production)
  return _internal_production(index);
}
inline ::pb_message::production_element_t* order_of_battle_t::_internal_add_production() {
  return production_.Add();
}
inline ::pb_message::production_element_t* order_of_battle_t::add_production() {
  // @@protoc_insertion_point(field_add:pb_message.order_of_battle_t.production)
  return _internal_add_production();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::production_element_t >&
order_of_battle_t::production() const {
  // @@protoc_insertion_point(field_list:pb_message.order_of_battle_t.production)
  return production_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// orders_of_battle_t

// map<string, .pb_message.order_of_battle_t> oobs = 1;
inline int orders_of_battle_t::_internal_oobs_size() const {
  return oobs_.size();
}
inline int orders_of_battle_t::oobs_size() const {
  return _internal_oobs_size();
}
inline void orders_of_battle_t::clear_oobs() {
  oobs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >&
orders_of_battle_t::_internal_oobs() const {
  return oobs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >&
orders_of_battle_t::oobs() const {
  // @@protoc_insertion_point(field_map:pb_message.orders_of_battle_t.oobs)
  return _internal_oobs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >*
orders_of_battle_t::_internal_mutable_oobs() {
  return oobs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >*
orders_of_battle_t::mutable_oobs() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.orders_of_battle_t.oobs)
  return _internal_mutable_oobs();
}

// -------------------------------------------------------------------

// unit_def_side_t

// float att = 1;
inline void unit_def_side_t::clear_att() {
  att_ = 0;
}
inline float unit_def_side_t::_internal_att() const {
  return att_;
}
inline float unit_def_side_t::att() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.att)
  return _internal_att();
}
inline void unit_def_side_t::_internal_set_att(float value) {
  
  att_ = value;
}
inline void unit_def_side_t::set_att(float value) {
  _internal_set_att(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.att)
}

// float def = 2;
inline void unit_def_side_t::clear_def() {
  def_ = 0;
}
inline float unit_def_side_t::_internal_def() const {
  return def_;
}
inline float unit_def_side_t::def() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.def)
  return _internal_def();
}
inline void unit_def_side_t::_internal_set_def(float value) {
  
  def_ = value;
}
inline void unit_def_side_t::set_def(float value) {
  _internal_set_def(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.def)
}

// bool scout = 3;
inline void unit_def_side_t::clear_scout() {
  scout_ = false;
}
inline bool unit_def_side_t::_internal_scout() const {
  return scout_;
}
inline bool unit_def_side_t::scout() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.scout)
  return _internal_scout();
}
inline void unit_def_side_t::_internal_set_scout(bool value) {
  
  scout_ = value;
}
inline void unit_def_side_t::set_scout(bool value) {
  _internal_set_scout(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.scout)
}

// float fighters = 4;
inline void unit_def_side_t::clear_fighters() {
  fighters_ = 0;
}
inline float unit_def_side_t::_internal_fighters() const {
  return fighters_;
}
inline float unit_def_side_t::fighters() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.fighters)
  return _internal_fighters();
}
inline void unit_def_side_t::_internal_set_fighters(float value) {
  
  fighters_ = value;
}
inline void unit_def_side_t::set_fighters(float value) {
  _internal_set_fighters(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.fighters)
}

// float heavy_fighter_bonus = 5;
inline void unit_def_side_t::clear_heavy_fighter_bonus() {
  heavy_fighter_bonus_ = 0;
}
inline float unit_def_side_t::_internal_heavy_fighter_bonus() const {
  return heavy_fighter_bonus_;
}
inline float unit_def_side_t::heavy_fighter_bonus() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.heavy_fighter_bonus)
  return _internal_heavy_fighter_bonus();
}
inline void unit_def_side_t::_internal_set_heavy_fighter_bonus(float value) {
  
  heavy_fighter_bonus_ = value;
}
inline void unit_def_side_t::set_heavy_fighter_bonus(float value) {
  _internal_set_heavy_fighter_bonus(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.heavy_fighter_bonus)
}

// int32 pfs = 6;
inline void unit_def_side_t::clear_pfs() {
  pfs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_side_t::_internal_pfs() const {
  return pfs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_side_t::pfs() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.pfs)
  return _internal_pfs();
}
inline void unit_def_side_t::_internal_set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pfs_ = value;
}
inline void unit_def_side_t::set_pfs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pfs(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.pfs)
}

// int32 drones = 7;
inline void unit_def_side_t::clear_drones() {
  drones_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_side_t::_internal_drones() const {
  return drones_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_side_t::drones() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.drones)
  return _internal_drones();
}
inline void unit_def_side_t::_internal_set_drones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drones_ = value;
}
inline void unit_def_side_t::set_drones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drones(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.drones)
}

// bool mauler = 8;
inline void unit_def_side_t::clear_mauler() {
  mauler_ = false;
}
inline bool unit_def_side_t::_internal_mauler() const {
  return mauler_;
}
inline bool unit_def_side_t::mauler() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.mauler)
  return _internal_mauler();
}
inline void unit_def_side_t::_internal_set_mauler(bool value) {
  
  mauler_ = value;
}
inline void unit_def_side_t::set_mauler(bool value) {
  _internal_set_mauler(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.mauler)
}

// repeated .pb_message.tug_mission_t tug_missions = 9;
inline int unit_def_side_t::_internal_tug_missions_size() const {
  return tug_missions_.size();
}
inline int unit_def_side_t::tug_missions_size() const {
  return _internal_tug_missions_size();
}
inline void unit_def_side_t::clear_tug_missions() {
  tug_missions_.Clear();
}
inline ::pb_message::tug_mission_t unit_def_side_t::_internal_tug_missions(int index) const {
  return static_cast< ::pb_message::tug_mission_t >(tug_missions_.Get(index));
}
inline ::pb_message::tug_mission_t unit_def_side_t::tug_missions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_side_t.tug_missions)
  return _internal_tug_missions(index);
}
inline void unit_def_side_t::set_tug_missions(int index, ::pb_message::tug_mission_t value) {
  tug_missions_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_side_t.tug_missions)
}
inline void unit_def_side_t::_internal_add_tug_missions(::pb_message::tug_mission_t value) {
  tug_missions_.Add(value);
}
inline void unit_def_side_t::add_tug_missions(::pb_message::tug_mission_t value) {
  // @@protoc_insertion_point(field_add:pb_message.unit_def_side_t.tug_missions)
  _internal_add_tug_missions(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
unit_def_side_t::tug_missions() const {
  // @@protoc_insertion_point(field_list:pb_message.unit_def_side_t.tug_missions)
  return tug_missions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
unit_def_side_t::_internal_mutable_tug_missions() {
  return &tug_missions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
unit_def_side_t::mutable_tug_missions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.unit_def_side_t.tug_missions)
  return _internal_mutable_tug_missions();
}

// -------------------------------------------------------------------

// towable_t

// int32 move_cost = 1;
inline void towable_t::clear_move_cost() {
  move_cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 towable_t::_internal_move_cost() const {
  return move_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 towable_t::move_cost() const {
  // @@protoc_insertion_point(field_get:pb_message.towable_t.move_cost)
  return _internal_move_cost();
}
inline void towable_t::_internal_set_move_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  move_cost_ = value;
}
inline void towable_t::set_move_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_move_cost(value);
  // @@protoc_insertion_point(field_set:pb_message.towable_t.move_cost)
}

// int32 strat_move_limit = 2;
inline void towable_t::clear_strat_move_limit() {
  strat_move_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 towable_t::_internal_strat_move_limit() const {
  return strat_move_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 towable_t::strat_move_limit() const {
  // @@protoc_insertion_point(field_get:pb_message.towable_t.strat_move_limit)
  return _internal_strat_move_limit();
}
inline void towable_t::_internal_set_strat_move_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strat_move_limit_ = value;
}
inline void towable_t::set_strat_move_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strat_move_limit(value);
  // @@protoc_insertion_point(field_set:pb_message.towable_t.strat_move_limit)
}

// -------------------------------------------------------------------

// production_cost_t

// int32 cost = 1;
inline void production_cost_t::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 production_cost_t::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 production_cost_t::cost() const {
  // @@protoc_insertion_point(field_get:pb_message.production_cost_t.cost)
  return _internal_cost();
}
inline void production_cost_t::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void production_cost_t::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:pb_message.production_cost_t.cost)
}

// int32 fighter_cost = 2;
inline void production_cost_t::clear_fighter_cost() {
  fighter_cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 production_cost_t::_internal_fighter_cost() const {
  return fighter_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 production_cost_t::fighter_cost() const {
  // @@protoc_insertion_point(field_get:pb_message.production_cost_t.fighter_cost)
  return _internal_fighter_cost();
}
inline void production_cost_t::_internal_set_fighter_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fighter_cost_ = value;
}
inline void production_cost_t::set_fighter_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fighter_cost(value);
  // @@protoc_insertion_point(field_set:pb_message.production_cost_t.fighter_cost)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// unit_def_t

// string name = 1;
inline void unit_def_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& unit_def_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.name)
  return _internal_name();
}
inline void unit_def_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.name)
}
inline std::string* unit_def_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.name)
  return _internal_mutable_name();
}
inline const std::string& unit_def_t::_internal_name() const {
  return name_.Get();
}
inline void unit_def_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void unit_def_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.unit_def_t.name)
}
inline void unit_def_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.unit_def_t.name)
}
inline void unit_def_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.unit_def_t.name)
}
inline std::string* unit_def_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* unit_def_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.unit_def_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void unit_def_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.name)
}

// int32 cmd = 2;
inline void unit_def_t::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::cmd() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.cmd)
  return _internal_cmd();
}
inline void unit_def_t::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
}
inline void unit_def_t::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.cmd)
}

// .pb_message.unit_def_side_t uncrippled = 3;
inline bool unit_def_t::_internal_has_uncrippled() const {
  return this != internal_default_instance() && uncrippled_ != nullptr;
}
inline bool unit_def_t::has_uncrippled() const {
  return _internal_has_uncrippled();
}
inline void unit_def_t::clear_uncrippled() {
  if (GetArena() == nullptr && uncrippled_ != nullptr) {
    delete uncrippled_;
  }
  uncrippled_ = nullptr;
}
inline const ::pb_message::unit_def_side_t& unit_def_t::_internal_uncrippled() const {
  const ::pb_message::unit_def_side_t* p = uncrippled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::unit_def_side_t*>(
      &::pb_message::_unit_def_side_t_default_instance_);
}
inline const ::pb_message::unit_def_side_t& unit_def_t::uncrippled() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.uncrippled)
  return _internal_uncrippled();
}
inline void unit_def_t::unsafe_arena_set_allocated_uncrippled(
    ::pb_message::unit_def_side_t* uncrippled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uncrippled_);
  }
  uncrippled_ = uncrippled;
  if (uncrippled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.unit_def_t.uncrippled)
}
inline ::pb_message::unit_def_side_t* unit_def_t::release_uncrippled() {
  
  ::pb_message::unit_def_side_t* temp = uncrippled_;
  uncrippled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::unit_def_side_t* unit_def_t::unsafe_arena_release_uncrippled() {
  // @@protoc_insertion_point(field_release:pb_message.unit_def_t.uncrippled)
  
  ::pb_message::unit_def_side_t* temp = uncrippled_;
  uncrippled_ = nullptr;
  return temp;
}
inline ::pb_message::unit_def_side_t* unit_def_t::_internal_mutable_uncrippled() {
  
  if (uncrippled_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::unit_def_side_t>(GetArena());
    uncrippled_ = p;
  }
  return uncrippled_;
}
inline ::pb_message::unit_def_side_t* unit_def_t::mutable_uncrippled() {
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.uncrippled)
  return _internal_mutable_uncrippled();
}
inline void unit_def_t::set_allocated_uncrippled(::pb_message::unit_def_side_t* uncrippled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uncrippled_;
  }
  if (uncrippled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uncrippled);
    if (message_arena != submessage_arena) {
      uncrippled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uncrippled, submessage_arena);
    }
    
  } else {
    
  }
  uncrippled_ = uncrippled;
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.uncrippled)
}

// .pb_message.unit_def_side_t crippled = 4;
inline bool unit_def_t::_internal_has_crippled() const {
  return this != internal_default_instance() && crippled_ != nullptr;
}
inline bool unit_def_t::has_crippled() const {
  return _internal_has_crippled();
}
inline void unit_def_t::clear_crippled() {
  if (GetArena() == nullptr && crippled_ != nullptr) {
    delete crippled_;
  }
  crippled_ = nullptr;
}
inline const ::pb_message::unit_def_side_t& unit_def_t::_internal_crippled() const {
  const ::pb_message::unit_def_side_t* p = crippled_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::unit_def_side_t*>(
      &::pb_message::_unit_def_side_t_default_instance_);
}
inline const ::pb_message::unit_def_side_t& unit_def_t::crippled() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.crippled)
  return _internal_crippled();
}
inline void unit_def_t::unsafe_arena_set_allocated_crippled(
    ::pb_message::unit_def_side_t* crippled) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crippled_);
  }
  crippled_ = crippled;
  if (crippled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.unit_def_t.crippled)
}
inline ::pb_message::unit_def_side_t* unit_def_t::release_crippled() {
  
  ::pb_message::unit_def_side_t* temp = crippled_;
  crippled_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::unit_def_side_t* unit_def_t::unsafe_arena_release_crippled() {
  // @@protoc_insertion_point(field_release:pb_message.unit_def_t.crippled)
  
  ::pb_message::unit_def_side_t* temp = crippled_;
  crippled_ = nullptr;
  return temp;
}
inline ::pb_message::unit_def_side_t* unit_def_t::_internal_mutable_crippled() {
  
  if (crippled_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::unit_def_side_t>(GetArena());
    crippled_ = p;
  }
  return crippled_;
}
inline ::pb_message::unit_def_side_t* unit_def_t::mutable_crippled() {
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.crippled)
  return _internal_mutable_crippled();
}
inline void unit_def_t::set_allocated_crippled(::pb_message::unit_def_side_t* crippled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crippled_;
  }
  if (crippled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crippled);
    if (message_arena != submessage_arena) {
      crippled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crippled, submessage_arena);
    }
    
  } else {
    
  }
  crippled_ = crippled;
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.crippled)
}

// .pb_message.escort_type_t escort_type = 5;
inline void unit_def_t::clear_escort_type() {
  escort_type_ = 0;
}
inline ::pb_message::escort_type_t unit_def_t::_internal_escort_type() const {
  return static_cast< ::pb_message::escort_type_t >(escort_type_);
}
inline ::pb_message::escort_type_t unit_def_t::escort_type() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.escort_type)
  return _internal_escort_type();
}
inline void unit_def_t::_internal_set_escort_type(::pb_message::escort_type_t value) {
  
  escort_type_ = value;
}
inline void unit_def_t::set_escort_type(::pb_message::escort_type_t value) {
  _internal_set_escort_type(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.escort_type)
}

// .pb_message.turn_t available = 6;
inline bool unit_def_t::_internal_has_available() const {
  return this != internal_default_instance() && available_ != nullptr;
}
inline bool unit_def_t::has_available() const {
  return _internal_has_available();
}
inline const ::pb_message::turn_t& unit_def_t::_internal_available() const {
  const ::pb_message::turn_t* p = available_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::turn_t*>(
      &::pb_message::_turn_t_default_instance_);
}
inline const ::pb_message::turn_t& unit_def_t::available() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.available)
  return _internal_available();
}
inline void unit_def_t::unsafe_arena_set_allocated_available(
    ::pb_message::turn_t* available) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(available_);
  }
  available_ = available;
  if (available) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.unit_def_t.available)
}
inline ::pb_message::turn_t* unit_def_t::release_available() {
  
  ::pb_message::turn_t* temp = available_;
  available_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::turn_t* unit_def_t::unsafe_arena_release_available() {
  // @@protoc_insertion_point(field_release:pb_message.unit_def_t.available)
  
  ::pb_message::turn_t* temp = available_;
  available_ = nullptr;
  return temp;
}
inline ::pb_message::turn_t* unit_def_t::_internal_mutable_available() {
  
  if (available_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::turn_t>(GetArena());
    available_ = p;
  }
  return available_;
}
inline ::pb_message::turn_t* unit_def_t::mutable_available() {
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.available)
  return _internal_mutable_available();
}
inline void unit_def_t::set_allocated_available(::pb_message::turn_t* available) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(available_);
  }
  if (available) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(available)->GetArena();
    if (message_arena != submessage_arena) {
      available = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, available, submessage_arena);
    }
    
  } else {
    
  }
  available_ = available;
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.available)
}

// bool pod = 7;
inline void unit_def_t::clear_pod() {
  pod_ = false;
}
inline bool unit_def_t::_internal_pod() const {
  return pod_;
}
inline bool unit_def_t::pod() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.pod)
  return _internal_pod();
}
inline void unit_def_t::_internal_set_pod(bool value) {
  
  pod_ = value;
}
inline void unit_def_t::set_pod(bool value) {
  _internal_set_pod(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.pod)
}

// int32 max_in_service = 8;
inline void unit_def_t::clear_max_in_service() {
  max_in_service_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::_internal_max_in_service() const {
  return max_in_service_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::max_in_service() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.max_in_service)
  return _internal_max_in_service();
}
inline void unit_def_t::_internal_set_max_in_service(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_in_service_ = value;
}
inline void unit_def_t::set_max_in_service(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_in_service(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.max_in_service)
}

// .pb_message.production_cost_t construction = 9;
inline bool unit_def_t::_internal_has_construction() const {
  return this != internal_default_instance() && construction_ != nullptr;
}
inline bool unit_def_t::has_construction() const {
  return _internal_has_construction();
}
inline void unit_def_t::clear_construction() {
  if (GetArena() == nullptr && construction_ != nullptr) {
    delete construction_;
  }
  construction_ = nullptr;
}
inline const ::pb_message::production_cost_t& unit_def_t::_internal_construction() const {
  const ::pb_message::production_cost_t* p = construction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::production_cost_t*>(
      &::pb_message::_production_cost_t_default_instance_);
}
inline const ::pb_message::production_cost_t& unit_def_t::construction() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.construction)
  return _internal_construction();
}
inline void unit_def_t::unsafe_arena_set_allocated_construction(
    ::pb_message::production_cost_t* construction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(construction_);
  }
  construction_ = construction;
  if (construction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.unit_def_t.construction)
}
inline ::pb_message::production_cost_t* unit_def_t::release_construction() {
  
  ::pb_message::production_cost_t* temp = construction_;
  construction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::production_cost_t* unit_def_t::unsafe_arena_release_construction() {
  // @@protoc_insertion_point(field_release:pb_message.unit_def_t.construction)
  
  ::pb_message::production_cost_t* temp = construction_;
  construction_ = nullptr;
  return temp;
}
inline ::pb_message::production_cost_t* unit_def_t::_internal_mutable_construction() {
  
  if (construction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::production_cost_t>(GetArena());
    construction_ = p;
  }
  return construction_;
}
inline ::pb_message::production_cost_t* unit_def_t::mutable_construction() {
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.construction)
  return _internal_mutable_construction();
}
inline void unit_def_t::set_allocated_construction(::pb_message::production_cost_t* construction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete construction_;
  }
  if (construction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(construction);
    if (message_arena != submessage_arena) {
      construction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, construction, submessage_arena);
    }
    
  } else {
    
  }
  construction_ = construction;
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.construction)
}

// map<string, .pb_message.production_cost_t> substitutions = 10;
inline int unit_def_t::_internal_substitutions_size() const {
  return substitutions_.size();
}
inline int unit_def_t::substitutions_size() const {
  return _internal_substitutions_size();
}
inline void unit_def_t::clear_substitutions() {
  substitutions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
unit_def_t::_internal_substitutions() const {
  return substitutions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
unit_def_t::substitutions() const {
  // @@protoc_insertion_point(field_map:pb_message.unit_def_t.substitutions)
  return _internal_substitutions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
unit_def_t::_internal_mutable_substitutions() {
  return substitutions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
unit_def_t::mutable_substitutions() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.unit_def_t.substitutions)
  return _internal_mutable_substitutions();
}

// map<string, .pb_message.production_cost_t> conversions = 11;
inline int unit_def_t::_internal_conversions_size() const {
  return conversions_.size();
}
inline int unit_def_t::conversions_size() const {
  return _internal_conversions_size();
}
inline void unit_def_t::clear_conversions() {
  conversions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
unit_def_t::_internal_conversions() const {
  return conversions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >&
unit_def_t::conversions() const {
  // @@protoc_insertion_point(field_map:pb_message.unit_def_t.conversions)
  return _internal_conversions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
unit_def_t::_internal_mutable_conversions() {
  return conversions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >*
unit_def_t::mutable_conversions() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.unit_def_t.conversions)
  return _internal_mutable_conversions();
}

// int32 move = 12;
inline void unit_def_t::clear_move() {
  move_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::_internal_move() const {
  return move_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::move() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.move)
  return _internal_move();
}
inline void unit_def_t::_internal_set_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  move_ = value;
}
inline void unit_def_t::set_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_move(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.move)
}

// .pb_message.carrier_type_t carrier_type = 13;
inline void unit_def_t::clear_carrier_type() {
  carrier_type_ = 0;
}
inline ::pb_message::carrier_type_t unit_def_t::_internal_carrier_type() const {
  return static_cast< ::pb_message::carrier_type_t >(carrier_type_);
}
inline ::pb_message::carrier_type_t unit_def_t::carrier_type() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.carrier_type)
  return _internal_carrier_type();
}
inline void unit_def_t::_internal_set_carrier_type(::pb_message::carrier_type_t value) {
  
  carrier_type_ = value;
}
inline void unit_def_t::set_carrier_type(::pb_message::carrier_type_t value) {
  _internal_set_carrier_type(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.carrier_type)
}

// bool not_spaceworthy = 14;
inline void unit_def_t::clear_not_spaceworthy() {
  not_spaceworthy_ = false;
}
inline bool unit_def_t::_internal_not_spaceworthy() const {
  return not_spaceworthy_;
}
inline bool unit_def_t::not_spaceworthy() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.not_spaceworthy)
  return _internal_not_spaceworthy();
}
inline void unit_def_t::_internal_set_not_spaceworthy(bool value) {
  
  not_spaceworthy_ = value;
}
inline void unit_def_t::set_not_spaceworthy(bool value) {
  _internal_set_not_spaceworthy(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.not_spaceworthy)
}

// .pb_message.towable_t towable = 15;
inline bool unit_def_t::_internal_has_towable() const {
  return this != internal_default_instance() && towable_ != nullptr;
}
inline bool unit_def_t::has_towable() const {
  return _internal_has_towable();
}
inline void unit_def_t::clear_towable() {
  if (GetArena() == nullptr && towable_ != nullptr) {
    delete towable_;
  }
  towable_ = nullptr;
}
inline const ::pb_message::towable_t& unit_def_t::_internal_towable() const {
  const ::pb_message::towable_t* p = towable_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::towable_t*>(
      &::pb_message::_towable_t_default_instance_);
}
inline const ::pb_message::towable_t& unit_def_t::towable() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.towable)
  return _internal_towable();
}
inline void unit_def_t::unsafe_arena_set_allocated_towable(
    ::pb_message::towable_t* towable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(towable_);
  }
  towable_ = towable;
  if (towable) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.unit_def_t.towable)
}
inline ::pb_message::towable_t* unit_def_t::release_towable() {
  
  ::pb_message::towable_t* temp = towable_;
  towable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::towable_t* unit_def_t::unsafe_arena_release_towable() {
  // @@protoc_insertion_point(field_release:pb_message.unit_def_t.towable)
  
  ::pb_message::towable_t* temp = towable_;
  towable_ = nullptr;
  return temp;
}
inline ::pb_message::towable_t* unit_def_t::_internal_mutable_towable() {
  
  if (towable_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::towable_t>(GetArena());
    towable_ = p;
  }
  return towable_;
}
inline ::pb_message::towable_t* unit_def_t::mutable_towable() {
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.towable)
  return _internal_mutable_towable();
}
inline void unit_def_t::set_allocated_towable(::pb_message::towable_t* towable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete towable_;
  }
  if (towable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(towable);
    if (message_arena != submessage_arena) {
      towable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, towable, submessage_arena);
    }
    
  } else {
    
  }
  towable_ = towable;
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.towable)
}

// int32 salvage = 16;
inline void unit_def_t::clear_salvage() {
  salvage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::_internal_salvage() const {
  return salvage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unit_def_t::salvage() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.salvage)
  return _internal_salvage();
}
inline void unit_def_t::_internal_set_salvage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  salvage_ = value;
}
inline void unit_def_t::set_salvage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_salvage(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.salvage)
}

// string notes = 17;
inline void unit_def_t::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& unit_def_t::notes() const {
  // @@protoc_insertion_point(field_get:pb_message.unit_def_t.notes)
  return _internal_notes();
}
inline void unit_def_t::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:pb_message.unit_def_t.notes)
}
inline std::string* unit_def_t::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:pb_message.unit_def_t.notes)
  return _internal_mutable_notes();
}
inline const std::string& unit_def_t::_internal_notes() const {
  return notes_.Get();
}
inline void unit_def_t::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void unit_def_t::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.unit_def_t.notes)
}
inline void unit_def_t::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.unit_def_t.notes)
}
inline void unit_def_t::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.unit_def_t.notes)
}
inline std::string* unit_def_t::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* unit_def_t::release_notes() {
  // @@protoc_insertion_point(field_release:pb_message.unit_def_t.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void unit_def_t::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.unit_def_t.notes)
}

// -------------------------------------------------------------------

// nation_unit_defs_t

// repeated .pb_message.unit_def_t units = 1;
inline int nation_unit_defs_t::_internal_units_size() const {
  return units_.size();
}
inline int nation_unit_defs_t::units_size() const {
  return _internal_units_size();
}
inline void nation_unit_defs_t::clear_units() {
  units_.Clear();
}
inline ::pb_message::unit_def_t* nation_unit_defs_t::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.nation_unit_defs_t.units)
  return units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::unit_def_t >*
nation_unit_defs_t::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.nation_unit_defs_t.units)
  return &units_;
}
inline const ::pb_message::unit_def_t& nation_unit_defs_t::_internal_units(int index) const {
  return units_.Get(index);
}
inline const ::pb_message::unit_def_t& nation_unit_defs_t::units(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.nation_unit_defs_t.units)
  return _internal_units(index);
}
inline ::pb_message::unit_def_t* nation_unit_defs_t::_internal_add_units() {
  return units_.Add();
}
inline ::pb_message::unit_def_t* nation_unit_defs_t::add_units() {
  // @@protoc_insertion_point(field_add:pb_message.nation_unit_defs_t.units)
  return _internal_add_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::unit_def_t >&
nation_unit_defs_t::units() const {
  // @@protoc_insertion_point(field_list:pb_message.nation_unit_defs_t.units)
  return units_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// unit_defs_t

// map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
inline int unit_defs_t::_internal_nation_units_size() const {
  return nation_units_.size();
}
inline int unit_defs_t::nation_units_size() const {
  return _internal_nation_units_size();
}
inline void unit_defs_t::clear_nation_units() {
  nation_units_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >&
unit_defs_t::_internal_nation_units() const {
  return nation_units_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >&
unit_defs_t::nation_units() const {
  // @@protoc_insertion_point(field_map:pb_message.unit_defs_t.nation_units)
  return _internal_nation_units();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >*
unit_defs_t::_internal_mutable_nation_units() {
  return nation_units_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >*
unit_defs_t::mutable_nation_units() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.unit_defs_t.nation_units)
  return _internal_mutable_nation_units();
}

// -------------------------------------------------------------------

// team_t

// string name = 1;
inline void team_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& team_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.team_t.name)
  return _internal_name();
}
inline void team_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.team_t.name)
}
inline std::string* team_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.team_t.name)
  return _internal_mutable_name();
}
inline const std::string& team_t::_internal_name() const {
  return name_.Get();
}
inline void team_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void team_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.team_t.name)
}
inline void team_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.team_t.name)
}
inline void team_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.team_t.name)
}
inline std::string* team_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* team_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.team_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void team_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.team_t.name)
}

// repeated string nations = 2;
inline int team_t::_internal_nations_size() const {
  return nations_.size();
}
inline int team_t::nations_size() const {
  return _internal_nations_size();
}
inline void team_t::clear_nations() {
  nations_.Clear();
}
inline std::string* team_t::add_nations() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.team_t.nations)
  return _internal_add_nations();
}
inline const std::string& team_t::_internal_nations(int index) const {
  return nations_.Get(index);
}
inline const std::string& team_t::nations(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.team_t.nations)
  return _internal_nations(index);
}
inline std::string* team_t::mutable_nations(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.team_t.nations)
  return nations_.Mutable(index);
}
inline void team_t::set_nations(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.team_t.nations)
  nations_.Mutable(index)->assign(value);
}
inline void team_t::set_nations(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.team_t.nations)
  nations_.Mutable(index)->assign(std::move(value));
}
inline void team_t::set_nations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.team_t.nations)
}
inline void team_t::set_nations(int index, const char* value, size_t size) {
  nations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.team_t.nations)
}
inline std::string* team_t::_internal_add_nations() {
  return nations_.Add();
}
inline void team_t::add_nations(const std::string& value) {
  nations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.team_t.nations)
}
inline void team_t::add_nations(std::string&& value) {
  nations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.team_t.nations)
}
inline void team_t::add_nations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.team_t.nations)
}
inline void team_t::add_nations(const char* value, size_t size) {
  nations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.team_t.nations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
team_t::nations() const {
  // @@protoc_insertion_point(field_list:pb_message.team_t.nations)
  return nations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
team_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.team_t.nations)
  return &nations_;
}

// -------------------------------------------------------------------

// scenario_condition_t_object_t

// .pb_message.scenario_condition_t.object_type_t type = 1;
inline void scenario_condition_t_object_t::clear_type() {
  type_ = 0;
}
inline ::pb_message::scenario_condition_t_object_type_t scenario_condition_t_object_t::_internal_type() const {
  return static_cast< ::pb_message::scenario_condition_t_object_type_t >(type_);
}
inline ::pb_message::scenario_condition_t_object_type_t scenario_condition_t_object_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.object_t.type)
  return _internal_type();
}
inline void scenario_condition_t_object_t::_internal_set_type(::pb_message::scenario_condition_t_object_type_t value) {
  
  type_ = value;
}
inline void scenario_condition_t_object_t::set_type(::pb_message::scenario_condition_t_object_type_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.object_t.type)
}

// repeated string names = 2;
inline int scenario_condition_t_object_t::_internal_names_size() const {
  return names_.size();
}
inline int scenario_condition_t_object_t::names_size() const {
  return _internal_names_size();
}
inline void scenario_condition_t_object_t::clear_names() {
  names_.Clear();
}
inline std::string* scenario_condition_t_object_t::add_names() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.scenario_condition_t.object_t.names)
  return _internal_add_names();
}
inline const std::string& scenario_condition_t_object_t::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& scenario_condition_t_object_t::names(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.object_t.names)
  return _internal_names(index);
}
inline std::string* scenario_condition_t_object_t::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_condition_t.object_t.names)
  return names_.Mutable(index);
}
inline void scenario_condition_t_object_t::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.object_t.names)
  names_.Mutable(index)->assign(value);
}
inline void scenario_condition_t_object_t::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.object_t.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void scenario_condition_t_object_t::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_condition_t.object_t.names)
}
inline void scenario_condition_t_object_t::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_condition_t.object_t.names)
}
inline std::string* scenario_condition_t_object_t::_internal_add_names() {
  return names_.Add();
}
inline void scenario_condition_t_object_t::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.object_t.names)
}
inline void scenario_condition_t_object_t::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.object_t.names)
}
inline void scenario_condition_t_object_t::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_condition_t.object_t.names)
}
inline void scenario_condition_t_object_t::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_condition_t.object_t.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
scenario_condition_t_object_t::names() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.object_t.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
scenario_condition_t_object_t::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.object_t.names)
  return &names_;
}

// repeated int32 hexes = 3;
inline int scenario_condition_t_object_t::_internal_hexes_size() const {
  return hexes_.size();
}
inline int scenario_condition_t_object_t::hexes_size() const {
  return _internal_hexes_size();
}
inline void scenario_condition_t_object_t::clear_hexes() {
  hexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scenario_condition_t_object_t::_internal_hexes(int index) const {
  return hexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scenario_condition_t_object_t::hexes(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.object_t.hexes)
  return _internal_hexes(index);
}
inline void scenario_condition_t_object_t::set_hexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.object_t.hexes)
}
inline void scenario_condition_t_object_t::_internal_add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hexes_.Add(value);
}
inline void scenario_condition_t_object_t::add_hexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hexes(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.object_t.hexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
scenario_condition_t_object_t::_internal_hexes() const {
  return hexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
scenario_condition_t_object_t::hexes() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.object_t.hexes)
  return _internal_hexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
scenario_condition_t_object_t::_internal_mutable_hexes() {
  return &hexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
scenario_condition_t_object_t::mutable_hexes() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.object_t.hexes)
  return _internal_mutable_hexes();
}

// -------------------------------------------------------------------

// scenario_condition_t

// repeated string actors = 1;
inline int scenario_condition_t::_internal_actors_size() const {
  return actors_.size();
}
inline int scenario_condition_t::actors_size() const {
  return _internal_actors_size();
}
inline void scenario_condition_t::clear_actors() {
  actors_.Clear();
}
inline std::string* scenario_condition_t::add_actors() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.scenario_condition_t.actors)
  return _internal_add_actors();
}
inline const std::string& scenario_condition_t::_internal_actors(int index) const {
  return actors_.Get(index);
}
inline const std::string& scenario_condition_t::actors(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.actors)
  return _internal_actors(index);
}
inline std::string* scenario_condition_t::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_condition_t.actors)
  return actors_.Mutable(index);
}
inline void scenario_condition_t::set_actors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.actors)
  actors_.Mutable(index)->assign(value);
}
inline void scenario_condition_t::set_actors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.actors)
  actors_.Mutable(index)->assign(std::move(value));
}
inline void scenario_condition_t::set_actors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_condition_t.actors)
}
inline void scenario_condition_t::set_actors(int index, const char* value, size_t size) {
  actors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_condition_t.actors)
}
inline std::string* scenario_condition_t::_internal_add_actors() {
  return actors_.Add();
}
inline void scenario_condition_t::add_actors(const std::string& value) {
  actors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.actors)
}
inline void scenario_condition_t::add_actors(std::string&& value) {
  actors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.actors)
}
inline void scenario_condition_t::add_actors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_condition_t.actors)
}
inline void scenario_condition_t::add_actors(const char* value, size_t size) {
  actors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_condition_t.actors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
scenario_condition_t::actors() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.actors)
  return actors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
scenario_condition_t::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.actors)
  return &actors_;
}

// .pb_message.scenario_condition_t.action_t action = 2;
inline void scenario_condition_t::clear_action() {
  action_ = 0;
}
inline ::pb_message::scenario_condition_t_action_t scenario_condition_t::_internal_action() const {
  return static_cast< ::pb_message::scenario_condition_t_action_t >(action_);
}
inline ::pb_message::scenario_condition_t_action_t scenario_condition_t::action() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.action)
  return _internal_action();
}
inline void scenario_condition_t::_internal_set_action(::pb_message::scenario_condition_t_action_t value) {
  
  action_ = value;
}
inline void scenario_condition_t::set_action(::pb_message::scenario_condition_t_action_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_condition_t.action)
}

// repeated .pb_message.scenario_condition_t.object_t one_of = 3;
inline int scenario_condition_t::_internal_one_of_size() const {
  return one_of_.size();
}
inline int scenario_condition_t::one_of_size() const {
  return _internal_one_of_size();
}
inline void scenario_condition_t::clear_one_of() {
  one_of_.Clear();
}
inline ::pb_message::scenario_condition_t_object_t* scenario_condition_t::mutable_one_of(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_condition_t.one_of)
  return one_of_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_condition_t_object_t >*
scenario_condition_t::mutable_one_of() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_condition_t.one_of)
  return &one_of_;
}
inline const ::pb_message::scenario_condition_t_object_t& scenario_condition_t::_internal_one_of(int index) const {
  return one_of_.Get(index);
}
inline const ::pb_message::scenario_condition_t_object_t& scenario_condition_t::one_of(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_condition_t.one_of)
  return _internal_one_of(index);
}
inline ::pb_message::scenario_condition_t_object_t* scenario_condition_t::_internal_add_one_of() {
  return one_of_.Add();
}
inline ::pb_message::scenario_condition_t_object_t* scenario_condition_t::add_one_of() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_condition_t.one_of)
  return _internal_add_one_of();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_condition_t_object_t >&
scenario_condition_t::one_of() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_condition_t.one_of)
  return one_of_;
}

// -------------------------------------------------------------------

// fleet_release_condition_t

// string fleet = 1;
inline void fleet_release_condition_t::clear_fleet() {
  fleet_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& fleet_release_condition_t::fleet() const {
  // @@protoc_insertion_point(field_get:pb_message.fleet_release_condition_t.fleet)
  return _internal_fleet();
}
inline void fleet_release_condition_t::set_fleet(const std::string& value) {
  _internal_set_fleet(value);
  // @@protoc_insertion_point(field_set:pb_message.fleet_release_condition_t.fleet)
}
inline std::string* fleet_release_condition_t::mutable_fleet() {
  // @@protoc_insertion_point(field_mutable:pb_message.fleet_release_condition_t.fleet)
  return _internal_mutable_fleet();
}
inline const std::string& fleet_release_condition_t::_internal_fleet() const {
  return fleet_.Get();
}
inline void fleet_release_condition_t::_internal_set_fleet(const std::string& value) {
  
  fleet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void fleet_release_condition_t::set_fleet(std::string&& value) {
  
  fleet_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.fleet_release_condition_t.fleet)
}
inline void fleet_release_condition_t::set_fleet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fleet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.fleet_release_condition_t.fleet)
}
inline void fleet_release_condition_t::set_fleet(const char* value,
    size_t size) {
  
  fleet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.fleet_release_condition_t.fleet)
}
inline std::string* fleet_release_condition_t::_internal_mutable_fleet() {
  
  return fleet_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* fleet_release_condition_t::release_fleet() {
  // @@protoc_insertion_point(field_release:pb_message.fleet_release_condition_t.fleet)
  return fleet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void fleet_release_condition_t::set_allocated_fleet(std::string* fleet) {
  if (fleet != nullptr) {
    
  } else {
    
  }
  fleet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fleet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.fleet_release_condition_t.fleet)
}

// .pb_message.scenario_condition_t condition = 2;
inline bool fleet_release_condition_t::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool fleet_release_condition_t::has_condition() const {
  return _internal_has_condition();
}
inline void fleet_release_condition_t::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::pb_message::scenario_condition_t& fleet_release_condition_t::_internal_condition() const {
  const ::pb_message::scenario_condition_t* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::scenario_condition_t*>(
      &::pb_message::_scenario_condition_t_default_instance_);
}
inline const ::pb_message::scenario_condition_t& fleet_release_condition_t::condition() const {
  // @@protoc_insertion_point(field_get:pb_message.fleet_release_condition_t.condition)
  return _internal_condition();
}
inline void fleet_release_condition_t::unsafe_arena_set_allocated_condition(
    ::pb_message::scenario_condition_t* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.fleet_release_condition_t.condition)
}
inline ::pb_message::scenario_condition_t* fleet_release_condition_t::release_condition() {
  
  ::pb_message::scenario_condition_t* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::scenario_condition_t* fleet_release_condition_t::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:pb_message.fleet_release_condition_t.condition)
  
  ::pb_message::scenario_condition_t* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::pb_message::scenario_condition_t* fleet_release_condition_t::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::scenario_condition_t>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::pb_message::scenario_condition_t* fleet_release_condition_t::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:pb_message.fleet_release_condition_t.condition)
  return _internal_mutable_condition();
}
inline void fleet_release_condition_t::set_allocated_condition(::pb_message::scenario_condition_t* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:pb_message.fleet_release_condition_t.condition)
}

// -------------------------------------------------------------------

// war_entry_condition_t

// .pb_message.war_footing_t economy = 3;
inline void war_entry_condition_t::clear_economy() {
  economy_ = 0;
}
inline ::pb_message::war_footing_t war_entry_condition_t::_internal_economy() const {
  return static_cast< ::pb_message::war_footing_t >(economy_);
}
inline ::pb_message::war_footing_t war_entry_condition_t::economy() const {
  // @@protoc_insertion_point(field_get:pb_message.war_entry_condition_t.economy)
  return _internal_economy();
}
inline void war_entry_condition_t::_internal_set_economy(::pb_message::war_footing_t value) {
  
  economy_ = value;
}
inline void war_entry_condition_t::set_economy(::pb_message::war_footing_t value) {
  _internal_set_economy(value);
  // @@protoc_insertion_point(field_set:pb_message.war_entry_condition_t.economy)
}

// .pb_message.scenario_condition_t condition = 2;
inline bool war_entry_condition_t::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool war_entry_condition_t::has_condition() const {
  return _internal_has_condition();
}
inline void war_entry_condition_t::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::pb_message::scenario_condition_t& war_entry_condition_t::_internal_condition() const {
  const ::pb_message::scenario_condition_t* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::scenario_condition_t*>(
      &::pb_message::_scenario_condition_t_default_instance_);
}
inline const ::pb_message::scenario_condition_t& war_entry_condition_t::condition() const {
  // @@protoc_insertion_point(field_get:pb_message.war_entry_condition_t.condition)
  return _internal_condition();
}
inline void war_entry_condition_t::unsafe_arena_set_allocated_condition(
    ::pb_message::scenario_condition_t* condition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.war_entry_condition_t.condition)
}
inline ::pb_message::scenario_condition_t* war_entry_condition_t::release_condition() {
  
  ::pb_message::scenario_condition_t* temp = condition_;
  condition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::scenario_condition_t* war_entry_condition_t::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:pb_message.war_entry_condition_t.condition)
  
  ::pb_message::scenario_condition_t* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::pb_message::scenario_condition_t* war_entry_condition_t::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::scenario_condition_t>(GetArena());
    condition_ = p;
  }
  return condition_;
}
inline ::pb_message::scenario_condition_t* war_entry_condition_t::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:pb_message.war_entry_condition_t.condition)
  return _internal_mutable_condition();
}
inline void war_entry_condition_t::set_allocated_condition(::pb_message::scenario_condition_t* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:pb_message.war_entry_condition_t.condition)
}

// -------------------------------------------------------------------

// scenario_turn_t_national_action_t_action_t

// .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
inline void scenario_turn_t_national_action_t_action_t::clear_type() {
  type_ = 0;
}
inline ::pb_message::scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t_action_t::_internal_type() const {
  return static_cast< ::pb_message::scenario_turn_t_national_action_t_action_type_t >(type_);
}
inline ::pb_message::scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t_action_t::type() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.national_action_t.action_t.type)
  return _internal_type();
}
inline void scenario_turn_t_national_action_t_action_t::_internal_set_type(::pb_message::scenario_turn_t_national_action_t_action_type_t value) {
  
  type_ = value;
}
inline void scenario_turn_t_national_action_t_action_t::set_type(::pb_message::scenario_turn_t_national_action_t_action_type_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_turn_t.national_action_t.action_t.type)
}

// repeated string names = 2;
inline int scenario_turn_t_national_action_t_action_t::_internal_names_size() const {
  return names_.size();
}
inline int scenario_turn_t_national_action_t_action_t::names_size() const {
  return _internal_names_size();
}
inline void scenario_turn_t_national_action_t_action_t::clear_names() {
  names_.Clear();
}
inline std::string* scenario_turn_t_national_action_t_action_t::add_names() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return _internal_add_names();
}
inline const std::string& scenario_turn_t_national_action_t_action_t::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& scenario_turn_t_national_action_t_action_t::names(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return _internal_names(index);
}
inline std::string* scenario_turn_t_national_action_t_action_t::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return names_.Mutable(index);
}
inline void scenario_turn_t_national_action_t_action_t::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_turn_t.national_action_t.action_t.names)
  names_.Mutable(index)->assign(value);
}
inline void scenario_turn_t_national_action_t_action_t::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_turn_t.national_action_t.action_t.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void scenario_turn_t_national_action_t_action_t::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
inline void scenario_turn_t_national_action_t_action_t::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
inline std::string* scenario_turn_t_national_action_t_action_t::_internal_add_names() {
  return names_.Add();
}
inline void scenario_turn_t_national_action_t_action_t::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
inline void scenario_turn_t_national_action_t_action_t::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
inline void scenario_turn_t_national_action_t_action_t::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
inline void scenario_turn_t_national_action_t_action_t::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_turn_t.national_action_t.action_t.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
scenario_turn_t_national_action_t_action_t::names() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
scenario_turn_t_national_action_t_action_t::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_turn_t.national_action_t.action_t.names)
  return &names_;
}

// -------------------------------------------------------------------

// scenario_turn_t_national_action_t

// repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
inline int scenario_turn_t_national_action_t::_internal_actions_size() const {
  return actions_.size();
}
inline int scenario_turn_t_national_action_t::actions_size() const {
  return _internal_actions_size();
}
inline void scenario_turn_t_national_action_t::clear_actions() {
  actions_.Clear();
}
inline ::pb_message::scenario_turn_t_national_action_t_action_t* scenario_turn_t_national_action_t::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_turn_t.national_action_t.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t_national_action_t_action_t >*
scenario_turn_t_national_action_t::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_turn_t.national_action_t.actions)
  return &actions_;
}
inline const ::pb_message::scenario_turn_t_national_action_t_action_t& scenario_turn_t_national_action_t::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::pb_message::scenario_turn_t_national_action_t_action_t& scenario_turn_t_national_action_t::actions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.national_action_t.actions)
  return _internal_actions(index);
}
inline ::pb_message::scenario_turn_t_national_action_t_action_t* scenario_turn_t_national_action_t::_internal_add_actions() {
  return actions_.Add();
}
inline ::pb_message::scenario_turn_t_national_action_t_action_t* scenario_turn_t_national_action_t::add_actions() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_turn_t.national_action_t.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t_national_action_t_action_t >&
scenario_turn_t_national_action_t::actions() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_turn_t.national_action_t.actions)
  return actions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// scenario_turn_t

// int32 turn = 1;
inline void scenario_turn_t::clear_turn() {
  turn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scenario_turn_t::_internal_turn() const {
  return turn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scenario_turn_t::turn() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_turn_t.turn)
  return _internal_turn();
}
inline void scenario_turn_t::_internal_set_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  turn_ = value;
}
inline void scenario_turn_t::set_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_turn_t.turn)
}

// map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
inline int scenario_turn_t::_internal_national_actions_size() const {
  return national_actions_.size();
}
inline int scenario_turn_t::national_actions_size() const {
  return _internal_national_actions_size();
}
inline void scenario_turn_t::clear_national_actions() {
  national_actions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >&
scenario_turn_t::_internal_national_actions() const {
  return national_actions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >&
scenario_turn_t::national_actions() const {
  // @@protoc_insertion_point(field_map:pb_message.scenario_turn_t.national_actions)
  return _internal_national_actions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >*
scenario_turn_t::_internal_mutable_national_actions() {
  return national_actions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >*
scenario_turn_t::mutable_national_actions() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.scenario_turn_t.national_actions)
  return _internal_mutable_national_actions();
}

// -------------------------------------------------------------------

// scenario_t_nation_t

// repeated string at_war_with = 1;
inline int scenario_t_nation_t::_internal_at_war_with_size() const {
  return at_war_with_.size();
}
inline int scenario_t_nation_t::at_war_with_size() const {
  return _internal_at_war_with_size();
}
inline void scenario_t_nation_t::clear_at_war_with() {
  at_war_with_.Clear();
}
inline std::string* scenario_t_nation_t::add_at_war_with() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.scenario_t.nation_t.at_war_with)
  return _internal_add_at_war_with();
}
inline const std::string& scenario_t_nation_t::_internal_at_war_with(int index) const {
  return at_war_with_.Get(index);
}
inline const std::string& scenario_t_nation_t::at_war_with(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.at_war_with)
  return _internal_at_war_with(index);
}
inline std::string* scenario_t_nation_t::mutable_at_war_with(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.at_war_with)
  return at_war_with_.Mutable(index);
}
inline void scenario_t_nation_t::set_at_war_with(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.at_war_with)
  at_war_with_.Mutable(index)->assign(value);
}
inline void scenario_t_nation_t::set_at_war_with(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.at_war_with)
  at_war_with_.Mutable(index)->assign(std::move(value));
}
inline void scenario_t_nation_t::set_at_war_with(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  at_war_with_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.nation_t.at_war_with)
}
inline void scenario_t_nation_t::set_at_war_with(int index, const char* value, size_t size) {
  at_war_with_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.nation_t.at_war_with)
}
inline std::string* scenario_t_nation_t::_internal_add_at_war_with() {
  return at_war_with_.Add();
}
inline void scenario_t_nation_t::add_at_war_with(const std::string& value) {
  at_war_with_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.at_war_with)
}
inline void scenario_t_nation_t::add_at_war_with(std::string&& value) {
  at_war_with_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.at_war_with)
}
inline void scenario_t_nation_t::add_at_war_with(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  at_war_with_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.nation_t.at_war_with)
}
inline void scenario_t_nation_t::add_at_war_with(const char* value, size_t size) {
  at_war_with_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.nation_t.at_war_with)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
scenario_t_nation_t::at_war_with() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.at_war_with)
  return at_war_with_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
scenario_t_nation_t::mutable_at_war_with() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.at_war_with)
  return &at_war_with_;
}

// repeated string future_belligerents = 2;
inline int scenario_t_nation_t::_internal_future_belligerents_size() const {
  return future_belligerents_.size();
}
inline int scenario_t_nation_t::future_belligerents_size() const {
  return _internal_future_belligerents_size();
}
inline void scenario_t_nation_t::clear_future_belligerents() {
  future_belligerents_.Clear();
}
inline std::string* scenario_t_nation_t::add_future_belligerents() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.scenario_t.nation_t.future_belligerents)
  return _internal_add_future_belligerents();
}
inline const std::string& scenario_t_nation_t::_internal_future_belligerents(int index) const {
  return future_belligerents_.Get(index);
}
inline const std::string& scenario_t_nation_t::future_belligerents(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.future_belligerents)
  return _internal_future_belligerents(index);
}
inline std::string* scenario_t_nation_t::mutable_future_belligerents(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.future_belligerents)
  return future_belligerents_.Mutable(index);
}
inline void scenario_t_nation_t::set_future_belligerents(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.future_belligerents)
  future_belligerents_.Mutable(index)->assign(value);
}
inline void scenario_t_nation_t::set_future_belligerents(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.future_belligerents)
  future_belligerents_.Mutable(index)->assign(std::move(value));
}
inline void scenario_t_nation_t::set_future_belligerents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  future_belligerents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.nation_t.future_belligerents)
}
inline void scenario_t_nation_t::set_future_belligerents(int index, const char* value, size_t size) {
  future_belligerents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.nation_t.future_belligerents)
}
inline std::string* scenario_t_nation_t::_internal_add_future_belligerents() {
  return future_belligerents_.Add();
}
inline void scenario_t_nation_t::add_future_belligerents(const std::string& value) {
  future_belligerents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.future_belligerents)
}
inline void scenario_t_nation_t::add_future_belligerents(std::string&& value) {
  future_belligerents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.future_belligerents)
}
inline void scenario_t_nation_t::add_future_belligerents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  future_belligerents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.nation_t.future_belligerents)
}
inline void scenario_t_nation_t::add_future_belligerents(const char* value, size_t size) {
  future_belligerents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.nation_t.future_belligerents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
scenario_t_nation_t::future_belligerents() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.future_belligerents)
  return future_belligerents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
scenario_t_nation_t::mutable_future_belligerents() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.future_belligerents)
  return &future_belligerents_;
}

// .pb_message.war_footing_t economy = 3;
inline void scenario_t_nation_t::clear_economy() {
  economy_ = 0;
}
inline ::pb_message::war_footing_t scenario_t_nation_t::_internal_economy() const {
  return static_cast< ::pb_message::war_footing_t >(economy_);
}
inline ::pb_message::war_footing_t scenario_t_nation_t::economy() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.economy)
  return _internal_economy();
}
inline void scenario_t_nation_t::_internal_set_economy(::pb_message::war_footing_t value) {
  
  economy_ = value;
}
inline void scenario_t_nation_t::set_economy(::pb_message::war_footing_t value) {
  _internal_set_economy(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.economy)
}

// int32 exhaustion_turns = 4;
inline void scenario_t_nation_t::clear_exhaustion_turns() {
  exhaustion_turns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scenario_t_nation_t::_internal_exhaustion_turns() const {
  return exhaustion_turns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 scenario_t_nation_t::exhaustion_turns() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.exhaustion_turns)
  return _internal_exhaustion_turns();
}
inline void scenario_t_nation_t::_internal_set_exhaustion_turns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exhaustion_turns_ = value;
}
inline void scenario_t_nation_t::set_exhaustion_turns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exhaustion_turns(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.exhaustion_turns)
}

// bool accumulate_exhaustion_at_peace = 5;
inline void scenario_t_nation_t::clear_accumulate_exhaustion_at_peace() {
  accumulate_exhaustion_at_peace_ = false;
}
inline bool scenario_t_nation_t::_internal_accumulate_exhaustion_at_peace() const {
  return accumulate_exhaustion_at_peace_;
}
inline bool scenario_t_nation_t::accumulate_exhaustion_at_peace() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.accumulate_exhaustion_at_peace)
  return _internal_accumulate_exhaustion_at_peace();
}
inline void scenario_t_nation_t::_internal_set_accumulate_exhaustion_at_peace(bool value) {
  
  accumulate_exhaustion_at_peace_ = value;
}
inline void scenario_t_nation_t::set_accumulate_exhaustion_at_peace(bool value) {
  _internal_set_accumulate_exhaustion_at_peace(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.nation_t.accumulate_exhaustion_at_peace)
}

// repeated .pb_message.fleet_release_condition_t release_conditions = 6;
inline int scenario_t_nation_t::_internal_release_conditions_size() const {
  return release_conditions_.size();
}
inline int scenario_t_nation_t::release_conditions_size() const {
  return _internal_release_conditions_size();
}
inline void scenario_t_nation_t::clear_release_conditions() {
  release_conditions_.Clear();
}
inline ::pb_message::fleet_release_condition_t* scenario_t_nation_t::mutable_release_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.release_conditions)
  return release_conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::fleet_release_condition_t >*
scenario_t_nation_t::mutable_release_conditions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.release_conditions)
  return &release_conditions_;
}
inline const ::pb_message::fleet_release_condition_t& scenario_t_nation_t::_internal_release_conditions(int index) const {
  return release_conditions_.Get(index);
}
inline const ::pb_message::fleet_release_condition_t& scenario_t_nation_t::release_conditions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.release_conditions)
  return _internal_release_conditions(index);
}
inline ::pb_message::fleet_release_condition_t* scenario_t_nation_t::_internal_add_release_conditions() {
  return release_conditions_.Add();
}
inline ::pb_message::fleet_release_condition_t* scenario_t_nation_t::add_release_conditions() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.release_conditions)
  return _internal_add_release_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::fleet_release_condition_t >&
scenario_t_nation_t::release_conditions() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.release_conditions)
  return release_conditions_;
}

// repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
inline int scenario_t_nation_t::_internal_war_entry_conditions_size() const {
  return war_entry_conditions_.size();
}
inline int scenario_t_nation_t::war_entry_conditions_size() const {
  return _internal_war_entry_conditions_size();
}
inline void scenario_t_nation_t::clear_war_entry_conditions() {
  war_entry_conditions_.Clear();
}
inline ::pb_message::war_entry_condition_t* scenario_t_nation_t::mutable_war_entry_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.nation_t.war_entry_conditions)
  return war_entry_conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::war_entry_condition_t >*
scenario_t_nation_t::mutable_war_entry_conditions() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.nation_t.war_entry_conditions)
  return &war_entry_conditions_;
}
inline const ::pb_message::war_entry_condition_t& scenario_t_nation_t::_internal_war_entry_conditions(int index) const {
  return war_entry_conditions_.Get(index);
}
inline const ::pb_message::war_entry_condition_t& scenario_t_nation_t::war_entry_conditions(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.nation_t.war_entry_conditions)
  return _internal_war_entry_conditions(index);
}
inline ::pb_message::war_entry_condition_t* scenario_t_nation_t::_internal_add_war_entry_conditions() {
  return war_entry_conditions_.Add();
}
inline ::pb_message::war_entry_condition_t* scenario_t_nation_t::add_war_entry_conditions() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.nation_t.war_entry_conditions)
  return _internal_add_war_entry_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::war_entry_condition_t >&
scenario_t_nation_t::war_entry_conditions() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.nation_t.war_entry_conditions)
  return war_entry_conditions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// scenario_t

// string name = 1;
inline void scenario_t::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& scenario_t::name() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.name)
  return _internal_name();
}
inline void scenario_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.name)
}
inline std::string* scenario_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.name)
  return _internal_mutable_name();
}
inline const std::string& scenario_t::_internal_name() const {
  return name_.Get();
}
inline void scenario_t::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void scenario_t::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.scenario_t.name)
}
inline void scenario_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.name)
}
inline void scenario_t::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.name)
}
inline std::string* scenario_t::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* scenario_t::release_name() {
  // @@protoc_insertion_point(field_release:pb_message.scenario_t.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void scenario_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.name)
}

// string description = 2;
inline void scenario_t::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& scenario_t::description() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.description)
  return _internal_description();
}
inline void scenario_t::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.description)
}
inline std::string* scenario_t::mutable_description() {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.description)
  return _internal_mutable_description();
}
inline const std::string& scenario_t::_internal_description() const {
  return description_.Get();
}
inline void scenario_t::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void scenario_t::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.scenario_t.description)
}
inline void scenario_t::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.description)
}
inline void scenario_t::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.description)
}
inline std::string* scenario_t::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* scenario_t::release_description() {
  // @@protoc_insertion_point(field_release:pb_message.scenario_t.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void scenario_t::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.description)
}

// .pb_message.turn_t start_turn = 3;
inline bool scenario_t::_internal_has_start_turn() const {
  return this != internal_default_instance() && start_turn_ != nullptr;
}
inline bool scenario_t::has_start_turn() const {
  return _internal_has_start_turn();
}
inline const ::pb_message::turn_t& scenario_t::_internal_start_turn() const {
  const ::pb_message::turn_t* p = start_turn_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb_message::turn_t*>(
      &::pb_message::_turn_t_default_instance_);
}
inline const ::pb_message::turn_t& scenario_t::start_turn() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.start_turn)
  return _internal_start_turn();
}
inline void scenario_t::unsafe_arena_set_allocated_start_turn(
    ::pb_message::turn_t* start_turn) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_turn_);
  }
  start_turn_ = start_turn;
  if (start_turn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_message.scenario_t.start_turn)
}
inline ::pb_message::turn_t* scenario_t::release_start_turn() {
  
  ::pb_message::turn_t* temp = start_turn_;
  start_turn_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pb_message::turn_t* scenario_t::unsafe_arena_release_start_turn() {
  // @@protoc_insertion_point(field_release:pb_message.scenario_t.start_turn)
  
  ::pb_message::turn_t* temp = start_turn_;
  start_turn_ = nullptr;
  return temp;
}
inline ::pb_message::turn_t* scenario_t::_internal_mutable_start_turn() {
  
  if (start_turn_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_message::turn_t>(GetArena());
    start_turn_ = p;
  }
  return start_turn_;
}
inline ::pb_message::turn_t* scenario_t::mutable_start_turn() {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.start_turn)
  return _internal_mutable_start_turn();
}
inline void scenario_t::set_allocated_start_turn(::pb_message::turn_t* start_turn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_turn_);
  }
  if (start_turn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_turn)->GetArena();
    if (message_arena != submessage_arena) {
      start_turn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_turn, submessage_arena);
    }
    
  } else {
    
  }
  start_turn_ = start_turn;
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.start_turn)
}

// repeated .pb_message.team_t teams = 4;
inline int scenario_t::_internal_teams_size() const {
  return teams_.size();
}
inline int scenario_t::teams_size() const {
  return _internal_teams_size();
}
inline void scenario_t::clear_teams() {
  teams_.Clear();
}
inline ::pb_message::team_t* scenario_t::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::team_t >*
scenario_t::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.teams)
  return &teams_;
}
inline const ::pb_message::team_t& scenario_t::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::pb_message::team_t& scenario_t::teams(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.teams)
  return _internal_teams(index);
}
inline ::pb_message::team_t* scenario_t::_internal_add_teams() {
  return teams_.Add();
}
inline ::pb_message::team_t* scenario_t::add_teams() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.teams)
  return _internal_add_teams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::team_t >&
scenario_t::teams() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.teams)
  return teams_;
}

// repeated string team_turn_order = 5;
inline int scenario_t::_internal_team_turn_order_size() const {
  return team_turn_order_.size();
}
inline int scenario_t::team_turn_order_size() const {
  return _internal_team_turn_order_size();
}
inline void scenario_t::clear_team_turn_order() {
  team_turn_order_.Clear();
}
inline std::string* scenario_t::add_team_turn_order() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.scenario_t.team_turn_order)
  return _internal_add_team_turn_order();
}
inline const std::string& scenario_t::_internal_team_turn_order(int index) const {
  return team_turn_order_.Get(index);
}
inline const std::string& scenario_t::team_turn_order(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.team_turn_order)
  return _internal_team_turn_order(index);
}
inline std::string* scenario_t::mutable_team_turn_order(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.team_turn_order)
  return team_turn_order_.Mutable(index);
}
inline void scenario_t::set_team_turn_order(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.team_turn_order)
  team_turn_order_.Mutable(index)->assign(value);
}
inline void scenario_t::set_team_turn_order(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.team_turn_order)
  team_turn_order_.Mutable(index)->assign(std::move(value));
}
inline void scenario_t::set_team_turn_order(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  team_turn_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.team_turn_order)
}
inline void scenario_t::set_team_turn_order(int index, const char* value, size_t size) {
  team_turn_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.team_turn_order)
}
inline std::string* scenario_t::_internal_add_team_turn_order() {
  return team_turn_order_.Add();
}
inline void scenario_t::add_team_turn_order(const std::string& value) {
  team_turn_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.team_turn_order)
}
inline void scenario_t::add_team_turn_order(std::string&& value) {
  team_turn_order_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.team_turn_order)
}
inline void scenario_t::add_team_turn_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  team_turn_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.team_turn_order)
}
inline void scenario_t::add_team_turn_order(const char* value, size_t size) {
  team_turn_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.team_turn_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
scenario_t::team_turn_order() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.team_turn_order)
  return team_turn_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
scenario_t::mutable_team_turn_order() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.team_turn_order)
  return &team_turn_order_;
}

// string map = 6;
inline void scenario_t::clear_map() {
  map_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& scenario_t::map() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.map)
  return _internal_map();
}
inline void scenario_t::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.map)
}
inline std::string* scenario_t::mutable_map() {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.map)
  return _internal_mutable_map();
}
inline const std::string& scenario_t::_internal_map() const {
  return map_.Get();
}
inline void scenario_t::_internal_set_map(const std::string& value) {
  
  map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void scenario_t::set_map(std::string&& value) {
  
  map_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.scenario_t.map)
}
inline void scenario_t::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.map)
}
inline void scenario_t::set_map(const char* value,
    size_t size) {
  
  map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.map)
}
inline std::string* scenario_t::_internal_mutable_map() {
  
  return map_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* scenario_t::release_map() {
  // @@protoc_insertion_point(field_release:pb_message.scenario_t.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void scenario_t::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.map)
}

// string order_of_battle = 7;
inline void scenario_t::clear_order_of_battle() {
  order_of_battle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& scenario_t::order_of_battle() const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.order_of_battle)
  return _internal_order_of_battle();
}
inline void scenario_t::set_order_of_battle(const std::string& value) {
  _internal_set_order_of_battle(value);
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.order_of_battle)
}
inline std::string* scenario_t::mutable_order_of_battle() {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.order_of_battle)
  return _internal_mutable_order_of_battle();
}
inline const std::string& scenario_t::_internal_order_of_battle() const {
  return order_of_battle_.Get();
}
inline void scenario_t::_internal_set_order_of_battle(const std::string& value) {
  
  order_of_battle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void scenario_t::set_order_of_battle(std::string&& value) {
  
  order_of_battle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pb_message.scenario_t.order_of_battle)
}
inline void scenario_t::set_order_of_battle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_of_battle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.order_of_battle)
}
inline void scenario_t::set_order_of_battle(const char* value,
    size_t size) {
  
  order_of_battle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.order_of_battle)
}
inline std::string* scenario_t::_internal_mutable_order_of_battle() {
  
  return order_of_battle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* scenario_t::release_order_of_battle() {
  // @@protoc_insertion_point(field_release:pb_message.scenario_t.order_of_battle)
  return order_of_battle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void scenario_t::set_allocated_order_of_battle(std::string* order_of_battle) {
  if (order_of_battle != nullptr) {
    
  } else {
    
  }
  order_of_battle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_of_battle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pb_message.scenario_t.order_of_battle)
}

// repeated string setup_order = 8;
inline int scenario_t::_internal_setup_order_size() const {
  return setup_order_.size();
}
inline int scenario_t::setup_order_size() const {
  return _internal_setup_order_size();
}
inline void scenario_t::clear_setup_order() {
  setup_order_.Clear();
}
inline std::string* scenario_t::add_setup_order() {
  // @@protoc_insertion_point(field_add_mutable:pb_message.scenario_t.setup_order)
  return _internal_add_setup_order();
}
inline const std::string& scenario_t::_internal_setup_order(int index) const {
  return setup_order_.Get(index);
}
inline const std::string& scenario_t::setup_order(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.setup_order)
  return _internal_setup_order(index);
}
inline std::string* scenario_t::mutable_setup_order(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.setup_order)
  return setup_order_.Mutable(index);
}
inline void scenario_t::set_setup_order(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.setup_order)
  setup_order_.Mutable(index)->assign(value);
}
inline void scenario_t::set_setup_order(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pb_message.scenario_t.setup_order)
  setup_order_.Mutable(index)->assign(std::move(value));
}
inline void scenario_t::set_setup_order(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  setup_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_message.scenario_t.setup_order)
}
inline void scenario_t::set_setup_order(int index, const char* value, size_t size) {
  setup_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_message.scenario_t.setup_order)
}
inline std::string* scenario_t::_internal_add_setup_order() {
  return setup_order_.Add();
}
inline void scenario_t::add_setup_order(const std::string& value) {
  setup_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.setup_order)
}
inline void scenario_t::add_setup_order(std::string&& value) {
  setup_order_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.setup_order)
}
inline void scenario_t::add_setup_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  setup_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_message.scenario_t.setup_order)
}
inline void scenario_t::add_setup_order(const char* value, size_t size) {
  setup_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_message.scenario_t.setup_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
scenario_t::setup_order() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.setup_order)
  return setup_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
scenario_t::mutable_setup_order() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.setup_order)
  return &setup_order_;
}

// map<string, .pb_message.scenario_t.nation_t> nations = 9;
inline int scenario_t::_internal_nations_size() const {
  return nations_.size();
}
inline int scenario_t::nations_size() const {
  return _internal_nations_size();
}
inline void scenario_t::clear_nations() {
  nations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >&
scenario_t::_internal_nations() const {
  return nations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >&
scenario_t::nations() const {
  // @@protoc_insertion_point(field_map:pb_message.scenario_t.nations)
  return _internal_nations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >*
scenario_t::_internal_mutable_nations() {
  return nations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >*
scenario_t::mutable_nations() {
  // @@protoc_insertion_point(field_mutable_map:pb_message.scenario_t.nations)
  return _internal_mutable_nations();
}

// repeated .pb_message.scenario_turn_t turns = 10;
inline int scenario_t::_internal_turns_size() const {
  return turns_.size();
}
inline int scenario_t::turns_size() const {
  return _internal_turns_size();
}
inline void scenario_t::clear_turns() {
  turns_.Clear();
}
inline ::pb_message::scenario_turn_t* scenario_t::mutable_turns(int index) {
  // @@protoc_insertion_point(field_mutable:pb_message.scenario_t.turns)
  return turns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t >*
scenario_t::mutable_turns() {
  // @@protoc_insertion_point(field_mutable_list:pb_message.scenario_t.turns)
  return &turns_;
}
inline const ::pb_message::scenario_turn_t& scenario_t::_internal_turns(int index) const {
  return turns_.Get(index);
}
inline const ::pb_message::scenario_turn_t& scenario_t::turns(int index) const {
  // @@protoc_insertion_point(field_get:pb_message.scenario_t.turns)
  return _internal_turns(index);
}
inline ::pb_message::scenario_turn_t* scenario_t::_internal_add_turns() {
  return turns_.Add();
}
inline ::pb_message::scenario_turn_t* scenario_t::add_turns() {
  // @@protoc_insertion_point(field_add:pb_message.scenario_t.turns)
  return _internal_add_turns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb_message::scenario_turn_t >&
scenario_t::turns() const {
  // @@protoc_insertion_point(field_list:pb_message.scenario_t.turns)
  return turns_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb_message::scenario_condition_t_action_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::scenario_condition_t_action_t>() {
  return ::pb_message::scenario_condition_t_action_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::scenario_condition_t_object_type_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::scenario_condition_t_object_type_t>() {
  return ::pb_message::scenario_condition_t_object_type_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::scenario_turn_t_national_action_t_action_type_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::scenario_turn_t_national_action_t_action_type_t>() {
  return ::pb_message::scenario_turn_t_national_action_t_action_type_t_descriptor();
}
template <> struct is_proto_enum< ::pb_message::feature_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb_message::feature_t>() {
  return ::pb_message::feature_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_start_5fdata_2eproto
