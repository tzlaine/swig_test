// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: start_data.proto

#include "start_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_capital_hex_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_capital_hex_zone_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_capital_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleet_release_condition_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hex_coord_t_base_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_map_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_map_t_StartingNationalHoldingsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mothball_reserve_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_nation_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_nation_unit_defs_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_nations_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_nations_t_NationsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_offmap_area_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_offmap_possesions_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_oob_unit_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_order_of_battle_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_order_of_battle_t_StartingFleetsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_orders_of_battle_t_OobsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_production_cost_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_production_element_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_province_hex_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_province_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_condition_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scenario_condition_t_object_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_t_NationsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_scenario_t_nation_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_turn_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_turn_t_NationalActionsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_starting_fleet_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_starting_national_holdings_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_team_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_towable_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_turn_t_base_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_unit_def_side_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_unit_def_t_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_unit_def_t_ConversionsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_unit_def_t_SubstitutionsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_unit_defs_t_NationUnitsEntry_DoNotUse_start_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_start_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_war_entry_condition_t_start_5fdata_2eproto;
namespace pb_message {
class capital_hex_zone_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<capital_hex_zone_t> _instance;
} _capital_hex_zone_t_default_instance_;
class capital_hex_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<capital_hex_t> _instance;
} _capital_hex_t_default_instance_;
class capital_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<capital_t> _instance;
} _capital_t_default_instance_;
class offmap_possesions_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<offmap_possesions_t> _instance;
} _offmap_possesions_t_default_instance_;
class nation_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nation_t> _instance;
} _nation_t_default_instance_;
class nations_t_NationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nations_t_NationsEntry_DoNotUse> _instance;
} _nations_t_NationsEntry_DoNotUse_default_instance_;
class nations_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nations_t> _instance;
} _nations_t_default_instance_;
class hex_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hex_t> _instance;
} _hex_t_default_instance_;
class province_hex_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<province_hex_t> _instance;
} _province_hex_t_default_instance_;
class province_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<province_t> _instance;
} _province_t_default_instance_;
class offmap_area_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<offmap_area_t> _instance;
} _offmap_area_t_default_instance_;
class starting_national_holdings_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<starting_national_holdings_t> _instance;
} _starting_national_holdings_t_default_instance_;
class map_t_StartingNationalHoldingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_t_StartingNationalHoldingsEntry_DoNotUse> _instance;
} _map_t_StartingNationalHoldingsEntry_DoNotUse_default_instance_;
class map_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_t> _instance;
} _map_t_default_instance_;
class model_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<model_t> _instance;
} _model_t_default_instance_;
class oob_unit_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<oob_unit_t> _instance;
} _oob_unit_t_default_instance_;
class production_element_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<production_element_t> _instance;
} _production_element_t_default_instance_;
class starting_fleet_t_HexPlacementLimitsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<starting_fleet_t_HexPlacementLimitsEntry_DoNotUse> _instance;
} _starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_default_instance_;
class starting_fleet_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<starting_fleet_t> _instance;
} _starting_fleet_t_default_instance_;
class mothball_reserve_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mothball_reserve_t> _instance;
} _mothball_reserve_t_default_instance_;
class order_of_battle_t_StartingFleetsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<order_of_battle_t_StartingFleetsEntry_DoNotUse> _instance;
} _order_of_battle_t_StartingFleetsEntry_DoNotUse_default_instance_;
class order_of_battle_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<order_of_battle_t> _instance;
} _order_of_battle_t_default_instance_;
class orders_of_battle_t_OobsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<orders_of_battle_t_OobsEntry_DoNotUse> _instance;
} _orders_of_battle_t_OobsEntry_DoNotUse_default_instance_;
class orders_of_battle_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<orders_of_battle_t> _instance;
} _orders_of_battle_t_default_instance_;
class unit_def_side_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unit_def_side_t> _instance;
} _unit_def_side_t_default_instance_;
class towable_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<towable_t> _instance;
} _towable_t_default_instance_;
class production_cost_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<production_cost_t> _instance;
} _production_cost_t_default_instance_;
class unit_def_t_SubstitutionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unit_def_t_SubstitutionsEntry_DoNotUse> _instance;
} _unit_def_t_SubstitutionsEntry_DoNotUse_default_instance_;
class unit_def_t_ConversionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unit_def_t_ConversionsEntry_DoNotUse> _instance;
} _unit_def_t_ConversionsEntry_DoNotUse_default_instance_;
class unit_def_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unit_def_t> _instance;
} _unit_def_t_default_instance_;
class nation_unit_defs_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nation_unit_defs_t> _instance;
} _nation_unit_defs_t_default_instance_;
class unit_defs_t_NationUnitsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unit_defs_t_NationUnitsEntry_DoNotUse> _instance;
} _unit_defs_t_NationUnitsEntry_DoNotUse_default_instance_;
class unit_defs_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unit_defs_t> _instance;
} _unit_defs_t_default_instance_;
class team_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<team_t> _instance;
} _team_t_default_instance_;
class scenario_condition_t_object_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_condition_t_object_t> _instance;
} _scenario_condition_t_object_t_default_instance_;
class scenario_condition_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_condition_t> _instance;
} _scenario_condition_t_default_instance_;
class fleet_release_condition_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fleet_release_condition_t> _instance;
} _fleet_release_condition_t_default_instance_;
class war_entry_condition_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<war_entry_condition_t> _instance;
} _war_entry_condition_t_default_instance_;
class scenario_turn_t_national_action_t_action_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_turn_t_national_action_t_action_t> _instance;
} _scenario_turn_t_national_action_t_action_t_default_instance_;
class scenario_turn_t_national_action_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_turn_t_national_action_t> _instance;
} _scenario_turn_t_national_action_t_default_instance_;
class scenario_turn_t_NationalActionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_turn_t_NationalActionsEntry_DoNotUse> _instance;
} _scenario_turn_t_NationalActionsEntry_DoNotUse_default_instance_;
class scenario_turn_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_turn_t> _instance;
} _scenario_turn_t_default_instance_;
class scenario_t_nation_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_t_nation_t> _instance;
} _scenario_t_nation_t_default_instance_;
class scenario_t_NationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_t_NationsEntry_DoNotUse> _instance;
} _scenario_t_NationsEntry_DoNotUse_default_instance_;
class scenario_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scenario_t> _instance;
} _scenario_t_default_instance_;
}  // namespace pb_message
static void InitDefaultsscc_info_capital_hex_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_capital_hex_t_default_instance_;
    new (ptr) ::pb_message::capital_hex_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::capital_hex_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_capital_hex_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_capital_hex_t_start_5fdata_2eproto}, {
      &scc_info_capital_hex_zone_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_capital_hex_zone_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_capital_hex_zone_t_default_instance_;
    new (ptr) ::pb_message::capital_hex_zone_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::capital_hex_zone_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_capital_hex_zone_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_capital_hex_zone_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_capital_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_capital_t_default_instance_;
    new (ptr) ::pb_message::capital_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::capital_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_capital_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_capital_t_start_5fdata_2eproto}, {
      &scc_info_capital_hex_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_fleet_release_condition_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_fleet_release_condition_t_default_instance_;
    new (ptr) ::pb_message::fleet_release_condition_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::fleet_release_condition_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fleet_release_condition_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fleet_release_condition_t_start_5fdata_2eproto}, {
      &scc_info_scenario_condition_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_hex_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_hex_t_default_instance_;
    new (ptr) ::pb_message::hex_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::hex_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_hex_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_hex_t_start_5fdata_2eproto}, {
      &scc_info_hex_coord_t_base_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_map_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_map_t_default_instance_;
    new (ptr) ::pb_message::map_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::map_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_map_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_map_t_start_5fdata_2eproto}, {
      &scc_info_map_t_StartingNationalHoldingsEntry_DoNotUse_start_5fdata_2eproto.base,
      &scc_info_hex_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_map_t_StartingNationalHoldingsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_map_t_StartingNationalHoldingsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse();
  }
  ::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_map_t_StartingNationalHoldingsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_map_t_StartingNationalHoldingsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_starting_national_holdings_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_model_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_model_t_default_instance_;
    new (ptr) ::pb_message::model_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::model_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_model_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_model_t_start_5fdata_2eproto}, {
      &scc_info_nations_t_start_5fdata_2eproto.base,
      &scc_info_map_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_mothball_reserve_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_mothball_reserve_t_default_instance_;
    new (ptr) ::pb_message::mothball_reserve_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::mothball_reserve_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mothball_reserve_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mothball_reserve_t_start_5fdata_2eproto}, {
      &scc_info_oob_unit_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_nation_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_nation_t_default_instance_;
    new (ptr) ::pb_message::nation_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::nation_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_nation_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_nation_t_start_5fdata_2eproto}, {
      &scc_info_capital_t_start_5fdata_2eproto.base,
      &scc_info_offmap_possesions_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_nation_unit_defs_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_nation_unit_defs_t_default_instance_;
    new (ptr) ::pb_message::nation_unit_defs_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::nation_unit_defs_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_nation_unit_defs_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_nation_unit_defs_t_start_5fdata_2eproto}, {
      &scc_info_unit_def_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_nations_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_nations_t_default_instance_;
    new (ptr) ::pb_message::nations_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::nations_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_nations_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_nations_t_start_5fdata_2eproto}, {
      &scc_info_nations_t_NationsEntry_DoNotUse_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_nations_t_NationsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_nations_t_NationsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::nations_t_NationsEntry_DoNotUse();
  }
  ::pb_message::nations_t_NationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_nations_t_NationsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_nations_t_NationsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_nation_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_offmap_area_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_offmap_area_t_default_instance_;
    new (ptr) ::pb_message::offmap_area_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::offmap_area_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_offmap_area_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_offmap_area_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_offmap_possesions_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_offmap_possesions_t_default_instance_;
    new (ptr) ::pb_message::offmap_possesions_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::offmap_possesions_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_offmap_possesions_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_offmap_possesions_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_oob_unit_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_oob_unit_t_default_instance_;
    new (ptr) ::pb_message::oob_unit_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::oob_unit_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_oob_unit_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_oob_unit_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_order_of_battle_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_order_of_battle_t_default_instance_;
    new (ptr) ::pb_message::order_of_battle_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::order_of_battle_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_order_of_battle_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_order_of_battle_t_start_5fdata_2eproto}, {
      &scc_info_order_of_battle_t_StartingFleetsEntry_DoNotUse_start_5fdata_2eproto.base,
      &scc_info_mothball_reserve_t_start_5fdata_2eproto.base,
      &scc_info_production_element_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_order_of_battle_t_StartingFleetsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_order_of_battle_t_StartingFleetsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse();
  }
  ::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_order_of_battle_t_StartingFleetsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_order_of_battle_t_StartingFleetsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_starting_fleet_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_orders_of_battle_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_orders_of_battle_t_default_instance_;
    new (ptr) ::pb_message::orders_of_battle_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::orders_of_battle_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_orders_of_battle_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_orders_of_battle_t_start_5fdata_2eproto}, {
      &scc_info_orders_of_battle_t_OobsEntry_DoNotUse_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_orders_of_battle_t_OobsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_orders_of_battle_t_OobsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::orders_of_battle_t_OobsEntry_DoNotUse();
  }
  ::pb_message::orders_of_battle_t_OobsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_orders_of_battle_t_OobsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_orders_of_battle_t_OobsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_order_of_battle_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_production_cost_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_production_cost_t_default_instance_;
    new (ptr) ::pb_message::production_cost_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::production_cost_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_production_cost_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_production_cost_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_production_element_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_production_element_t_default_instance_;
    new (ptr) ::pb_message::production_element_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::production_element_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_production_element_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_production_element_t_start_5fdata_2eproto}, {
      &scc_info_oob_unit_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_province_hex_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_province_hex_t_default_instance_;
    new (ptr) ::pb_message::province_hex_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::province_hex_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_province_hex_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_province_hex_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_province_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_province_t_default_instance_;
    new (ptr) ::pb_message::province_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::province_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_province_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_province_t_start_5fdata_2eproto}, {
      &scc_info_province_hex_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_condition_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_condition_t_default_instance_;
    new (ptr) ::pb_message::scenario_condition_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::scenario_condition_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_condition_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_scenario_condition_t_start_5fdata_2eproto}, {
      &scc_info_scenario_condition_t_object_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_condition_t_object_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_condition_t_object_t_default_instance_;
    new (ptr) ::pb_message::scenario_condition_t_object_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::scenario_condition_t_object_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scenario_condition_t_object_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_scenario_condition_t_object_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_scenario_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_t_default_instance_;
    new (ptr) ::pb_message::scenario_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::scenario_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_scenario_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_scenario_t_start_5fdata_2eproto}, {
      &scc_info_turn_t_base_5ftypes_2eproto.base,
      &scc_info_team_t_start_5fdata_2eproto.base,
      &scc_info_scenario_t_NationsEntry_DoNotUse_start_5fdata_2eproto.base,
      &scc_info_scenario_turn_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_t_NationsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_t_NationsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::scenario_t_NationsEntry_DoNotUse();
  }
  ::pb_message::scenario_t_NationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_t_NationsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_scenario_t_NationsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_scenario_t_nation_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_t_nation_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_t_nation_t_default_instance_;
    new (ptr) ::pb_message::scenario_t_nation_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::scenario_t_nation_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_scenario_t_nation_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_scenario_t_nation_t_start_5fdata_2eproto}, {
      &scc_info_fleet_release_condition_t_start_5fdata_2eproto.base,
      &scc_info_war_entry_condition_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_turn_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_turn_t_default_instance_;
    new (ptr) ::pb_message::scenario_turn_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::scenario_turn_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_turn_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_scenario_turn_t_start_5fdata_2eproto}, {
      &scc_info_scenario_turn_t_NationalActionsEntry_DoNotUse_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_turn_t_NationalActionsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_turn_t_NationalActionsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse();
  }
  ::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_turn_t_NationalActionsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_scenario_turn_t_NationalActionsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_turn_t_national_action_t_default_instance_;
    new (ptr) ::pb_message::scenario_turn_t_national_action_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::scenario_turn_t_national_action_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto}, {
      &scc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_scenario_turn_t_national_action_t_action_t_default_instance_;
    new (ptr) ::pb_message::scenario_turn_t_national_action_t_action_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::scenario_turn_t_national_action_t_action_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_starting_fleet_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_starting_fleet_t_default_instance_;
    new (ptr) ::pb_message::starting_fleet_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::starting_fleet_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_starting_fleet_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_starting_fleet_t_start_5fdata_2eproto}, {
      &scc_info_oob_unit_t_start_5fdata_2eproto.base,
      &scc_info_production_element_t_start_5fdata_2eproto.base,
      &scc_info_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse();
  }
  ::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_starting_national_holdings_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_starting_national_holdings_t_default_instance_;
    new (ptr) ::pb_message::starting_national_holdings_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::starting_national_holdings_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_starting_national_holdings_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_starting_national_holdings_t_start_5fdata_2eproto}, {
      &scc_info_province_t_start_5fdata_2eproto.base,
      &scc_info_offmap_area_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_team_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_team_t_default_instance_;
    new (ptr) ::pb_message::team_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::team_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_team_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_team_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_towable_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_towable_t_default_instance_;
    new (ptr) ::pb_message::towable_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::towable_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_towable_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_towable_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_unit_def_side_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_unit_def_side_t_default_instance_;
    new (ptr) ::pb_message::unit_def_side_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::unit_def_side_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_unit_def_side_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_unit_def_side_t_start_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_unit_def_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_unit_def_t_default_instance_;
    new (ptr) ::pb_message::unit_def_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::unit_def_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_unit_def_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_unit_def_t_start_5fdata_2eproto}, {
      &scc_info_unit_def_side_t_start_5fdata_2eproto.base,
      &scc_info_turn_t_base_5ftypes_2eproto.base,
      &scc_info_production_cost_t_start_5fdata_2eproto.base,
      &scc_info_unit_def_t_SubstitutionsEntry_DoNotUse_start_5fdata_2eproto.base,
      &scc_info_unit_def_t_ConversionsEntry_DoNotUse_start_5fdata_2eproto.base,
      &scc_info_towable_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_unit_def_t_ConversionsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_unit_def_t_ConversionsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::unit_def_t_ConversionsEntry_DoNotUse();
  }
  ::pb_message::unit_def_t_ConversionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_unit_def_t_ConversionsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_unit_def_t_ConversionsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_production_cost_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_unit_def_t_SubstitutionsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_unit_def_t_SubstitutionsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse();
  }
  ::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_unit_def_t_SubstitutionsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_unit_def_t_SubstitutionsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_production_cost_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_unit_defs_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_unit_defs_t_default_instance_;
    new (ptr) ::pb_message::unit_defs_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::unit_defs_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_unit_defs_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_unit_defs_t_start_5fdata_2eproto}, {
      &scc_info_unit_defs_t_NationUnitsEntry_DoNotUse_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_unit_defs_t_NationUnitsEntry_DoNotUse_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_unit_defs_t_NationUnitsEntry_DoNotUse_default_instance_;
    new (ptr) ::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse();
  }
  ::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_unit_defs_t_NationUnitsEntry_DoNotUse_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_unit_defs_t_NationUnitsEntry_DoNotUse_start_5fdata_2eproto}, {
      &scc_info_nation_unit_defs_t_start_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_war_entry_condition_t_start_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb_message::_war_entry_condition_t_default_instance_;
    new (ptr) ::pb_message::war_entry_condition_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb_message::war_entry_condition_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_war_entry_condition_t_start_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_war_entry_condition_t_start_5fdata_2eproto}, {
      &scc_info_scenario_condition_t_start_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_start_5fdata_2eproto[45];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_start_5fdata_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_start_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_start_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_hex_zone_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_hex_zone_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_hex_zone_t, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_hex_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_hex_t, coord_),
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_hex_t, zones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::capital_t, hexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_possesions_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_possesions_t, provinces_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_possesions_t, mins_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_possesions_t, majs_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_possesions_t, survey_ships_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_possesions_t, cannot_build_offmap_capital_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_possesions_t, old_shipyard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, short_name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, capital_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, free_strategic_moves_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, capital_star_points_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, offmap_possesions_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_t, nation_id_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nations_t_NationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nations_t_NationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::nations_t_NationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::nations_t_NationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::nations_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::nations_t, nations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::hex_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::hex_t, coord_),
  PROTOBUF_FIELD_OFFSET(::pb_message::hex_t, owner_),
  PROTOBUF_FIELD_OFFSET(::pb_message::hex_t, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::province_hex_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::province_hex_t, hex_),
  PROTOBUF_FIELD_OFFSET(::pb_message::province_hex_t, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::province_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::province_t, hexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_area_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_area_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_area_t, features_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_area_t, feature_hexes_),
  PROTOBUF_FIELD_OFFSET(::pb_message::offmap_area_t, adjacent_hexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_national_holdings_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_national_holdings_t, provinces_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_national_holdings_t, offmap_area_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t, width_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t, height_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t, nz_planets_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t, nz_hexes_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t, starting_national_holdings_),
  PROTOBUF_FIELD_OFFSET(::pb_message::map_t, hexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::model_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::model_t, nations_),
  PROTOBUF_FIELD_OFFSET(::pb_message::model_t, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::oob_unit_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::oob_unit_t, unit_),
  PROTOBUF_FIELD_OFFSET(::pb_message::oob_unit_t, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::production_element_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::production_element_t, year_),
  PROTOBUF_FIELD_OFFSET(::pb_message::production_element_t, season_),
  PROTOBUF_FIELD_OFFSET(::pb_message::production_element_t, units_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, hexes_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, units_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, reserve_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, prewar_construction_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, strategic_move_arrival_year_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, strategic_move_arrival_season_),
  PROTOBUF_FIELD_OFFSET(::pb_message::starting_fleet_t, hex_placement_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::mothball_reserve_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::mothball_reserve_t, units_),
  PROTOBUF_FIELD_OFFSET(::pb_message::mothball_reserve_t, war_release_),
  PROTOBUF_FIELD_OFFSET(::pb_message::mothball_reserve_t, limited_war_release_),
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t, starting_fleets_),
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t, mothball_reserve_),
  PROTOBUF_FIELD_OFFSET(::pb_message::order_of_battle_t, production_),
  PROTOBUF_FIELD_OFFSET(::pb_message::orders_of_battle_t_OobsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::orders_of_battle_t_OobsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::orders_of_battle_t_OobsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::orders_of_battle_t_OobsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::orders_of_battle_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::orders_of_battle_t, oobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, att_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, def_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, scout_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, fighters_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, heavy_fighter_bonus_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, pfs_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, drones_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, mauler_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_side_t, tug_missions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::towable_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::towable_t, move_cost_),
  PROTOBUF_FIELD_OFFSET(::pb_message::towable_t, strat_move_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::production_cost_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::production_cost_t, cost_),
  PROTOBUF_FIELD_OFFSET(::pb_message::production_cost_t, fighter_cost_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_ConversionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_ConversionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_ConversionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t_ConversionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, cmd_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, uncrippled_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, crippled_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, escort_type_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, available_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, pod_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, max_in_service_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, construction_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, substitutions_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, conversions_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, move_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, carrier_type_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, not_spaceworthy_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, towable_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, salvage_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_def_t, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_unit_defs_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::nation_unit_defs_t, units_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_defs_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::unit_defs_t, nation_units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::team_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::team_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::team_t, nations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t_object_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t_object_t, type_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t_object_t, names_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t_object_t, hexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t, actors_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t, action_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_condition_t, one_of_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::fleet_release_condition_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::fleet_release_condition_t, fleet_),
  PROTOBUF_FIELD_OFFSET(::pb_message::fleet_release_condition_t, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::war_entry_condition_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::war_entry_condition_t, economy_),
  PROTOBUF_FIELD_OFFSET(::pb_message::war_entry_condition_t, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_national_action_t_action_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_national_action_t_action_t, type_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_national_action_t_action_t, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_national_action_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_national_action_t, actions_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t, turn_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_turn_t, national_actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, at_war_with_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, future_belligerents_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, economy_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, exhaustion_turns_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, accumulate_exhaustion_at_peace_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, release_conditions_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_nation_t, war_entry_conditions_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_NationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_NationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_NationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t_NationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, name_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, description_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, start_turn_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, teams_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, team_turn_order_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, map_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, order_of_battle_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, setup_order_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, nations_),
  PROTOBUF_FIELD_OFFSET(::pb_message::scenario_t, turns_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb_message::capital_hex_zone_t)},
  { 7, -1, sizeof(::pb_message::capital_hex_t)},
  { 14, -1, sizeof(::pb_message::capital_t)},
  { 20, -1, sizeof(::pb_message::offmap_possesions_t)},
  { 31, -1, sizeof(::pb_message::nation_t)},
  { 43, 50, sizeof(::pb_message::nations_t_NationsEntry_DoNotUse)},
  { 52, -1, sizeof(::pb_message::nations_t)},
  { 58, -1, sizeof(::pb_message::hex_t)},
  { 66, -1, sizeof(::pb_message::province_hex_t)},
  { 73, -1, sizeof(::pb_message::province_t)},
  { 79, -1, sizeof(::pb_message::offmap_area_t)},
  { 88, -1, sizeof(::pb_message::starting_national_holdings_t)},
  { 95, 102, sizeof(::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse)},
  { 104, -1, sizeof(::pb_message::map_t)},
  { 115, -1, sizeof(::pb_message::model_t)},
  { 122, -1, sizeof(::pb_message::oob_unit_t)},
  { 129, -1, sizeof(::pb_message::production_element_t)},
  { 137, 144, sizeof(::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse)},
  { 146, -1, sizeof(::pb_message::starting_fleet_t)},
  { 158, -1, sizeof(::pb_message::mothball_reserve_t)},
  { 166, 173, sizeof(::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse)},
  { 175, -1, sizeof(::pb_message::order_of_battle_t)},
  { 183, 190, sizeof(::pb_message::orders_of_battle_t_OobsEntry_DoNotUse)},
  { 192, -1, sizeof(::pb_message::orders_of_battle_t)},
  { 198, -1, sizeof(::pb_message::unit_def_side_t)},
  { 212, -1, sizeof(::pb_message::towable_t)},
  { 219, -1, sizeof(::pb_message::production_cost_t)},
  { 226, 233, sizeof(::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse)},
  { 235, 242, sizeof(::pb_message::unit_def_t_ConversionsEntry_DoNotUse)},
  { 244, -1, sizeof(::pb_message::unit_def_t)},
  { 266, -1, sizeof(::pb_message::nation_unit_defs_t)},
  { 272, 279, sizeof(::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse)},
  { 281, -1, sizeof(::pb_message::unit_defs_t)},
  { 287, -1, sizeof(::pb_message::team_t)},
  { 294, -1, sizeof(::pb_message::scenario_condition_t_object_t)},
  { 302, -1, sizeof(::pb_message::scenario_condition_t)},
  { 310, -1, sizeof(::pb_message::fleet_release_condition_t)},
  { 317, -1, sizeof(::pb_message::war_entry_condition_t)},
  { 324, -1, sizeof(::pb_message::scenario_turn_t_national_action_t_action_t)},
  { 331, -1, sizeof(::pb_message::scenario_turn_t_national_action_t)},
  { 337, 344, sizeof(::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse)},
  { 346, -1, sizeof(::pb_message::scenario_turn_t)},
  { 353, -1, sizeof(::pb_message::scenario_t_nation_t)},
  { 365, 372, sizeof(::pb_message::scenario_t_NationsEntry_DoNotUse)},
  { 374, -1, sizeof(::pb_message::scenario_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_capital_hex_zone_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_capital_hex_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_capital_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_offmap_possesions_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_nation_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_nations_t_NationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_nations_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_hex_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_province_hex_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_province_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_offmap_area_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_starting_national_holdings_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_map_t_StartingNationalHoldingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_map_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_model_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_oob_unit_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_production_element_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_starting_fleet_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_mothball_reserve_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_order_of_battle_t_StartingFleetsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_order_of_battle_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_orders_of_battle_t_OobsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_orders_of_battle_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_unit_def_side_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_towable_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_production_cost_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_unit_def_t_SubstitutionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_unit_def_t_ConversionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_unit_def_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_nation_unit_defs_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_unit_defs_t_NationUnitsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_unit_defs_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_team_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_condition_t_object_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_condition_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_fleet_release_condition_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_war_entry_condition_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_turn_t_national_action_t_action_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_turn_t_national_action_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_turn_t_NationalActionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_turn_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_t_nation_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_t_NationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb_message::_scenario_t_default_instance_),
};

const char descriptor_table_protodef_start_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020start_data.proto\022\npb_message\032\020base_typ"
  "es.proto\"O\n\022capital_hex_zone_t\022\014\n\004name\030\001"
  " \001(\t\022+\n\010features\030\002 \003(\0162\025.pb_message.feat"
  "ure_tB\002\020\001\"M\n\rcapital_hex_t\022\r\n\005coord\030\001 \001("
  "\005\022-\n\005zones\030\002 \003(\0132\036.pb_message.capital_he"
  "x_zone_t\"5\n\tcapital_t\022(\n\005hexes\030\001 \003(\0132\031.p"
  "b_message.capital_hex_t\"\225\001\n\023offmap_posse"
  "sions_t\022\021\n\tprovinces\030\001 \001(\005\022\014\n\004mins\030\002 \001(\005"
  "\022\014\n\004majs\030\003 \001(\005\022\024\n\014survey_ships\030\004 \001(\005\022#\n\033"
  "cannot_build_offmap_capital\030\005 \001(\010\022\024\n\014old"
  "_shipyard\030\006 \001(\010\"\336\001\n\010nation_t\022\014\n\004name\030\001 \001"
  "(\t\022\022\n\nshort_name\030\002 \001(\t\022&\n\007capital\030\003 \001(\0132"
  "\025.pb_message.capital_t\022\034\n\024free_strategic"
  "_moves\030\004 \001(\005\022\033\n\023capital_star_points\030\005 \001("
  "\005\022:\n\021offmap_possesions\030\006 \001(\0132\037.pb_messag"
  "e.offmap_possesions_t\022\021\n\tnation_id\030\007 \001(\005"
  "\"\206\001\n\tnations_t\0223\n\007nations\030\001 \003(\0132\".pb_mes"
  "sage.nations_t.NationsEntry\032D\n\014NationsEn"
  "try\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.pb_mes"
  "sage.nation_t:\0028\001\"f\n\005hex_t\022&\n\005coord\030\001 \001("
  "\0132\027.pb_message.hex_coord_t\022\r\n\005owner\030\002 \001("
  "\005\022&\n\007feature\030\003 \001(\0162\025.pb_message.feature_"
  "t\"E\n\016province_hex_t\022\013\n\003hex\030\001 \001(\005\022&\n\007feat"
  "ure\030\002 \001(\0162\025.pb_message.feature_t\"7\n\nprov"
  "ince_t\022)\n\005hexes\030\001 \003(\0132\032.pb_message.provi"
  "nce_hex_t\"\201\001\n\roffmap_area_t\022\014\n\004name\030\001 \001("
  "\t\022+\n\010features\030\002 \003(\0162\025.pb_message.feature"
  "_tB\002\020\001\022\031\n\rfeature_hexes\030\003 \003(\005B\002\020\001\022\032\n\016adj"
  "acent_hexes\030\004 \003(\005B\002\020\001\"y\n\034starting_nation"
  "al_holdings_t\022)\n\tprovinces\030\001 \003(\0132\026.pb_me"
  "ssage.province_t\022.\n\013offmap_area\030\002 \001(\0132\031."
  "pb_message.offmap_area_t\"\266\002\n\005map_t\022\r\n\005wi"
  "dth\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\026\n\nnz_planets\030"
  "\003 \003(\005B\002\020\001\022\024\n\010nz_hexes\030\004 \003(\005B\002\020\001\022S\n\032start"
  "ing_national_holdings\030\005 \003(\0132/.pb_message"
  ".map_t.StartingNationalHoldingsEntry\022 \n\005"
  "hexes\030\006 \003(\0132\021.pb_message.hex_t\032i\n\035Starti"
  "ngNationalHoldingsEntry\022\013\n\003key\030\001 \001(\t\0227\n\005"
  "value\030\002 \001(\0132(.pb_message.starting_nation"
  "al_holdings_t:\0028\001\"Q\n\007model_t\022&\n\007nations\030"
  "\001 \001(\0132\025.pb_message.nations_t\022\036\n\003map\030\002 \001("
  "\0132\021.pb_message.map_t\")\n\noob_unit_t\022\014\n\004un"
  "it\030\001 \001(\t\022\r\n\005times\030\002 \001(\005\"q\n\024production_el"
  "ement_t\022\014\n\004year\030\001 \001(\005\022$\n\006season\030\002 \001(\0162\024."
  "pb_message.season_t\022%\n\005units\030\003 \003(\0132\026.pb_"
  "message.oob_unit_t\"\215\003\n\020starting_fleet_t\022"
  "\021\n\005hexes\030\001 \003(\005B\002\020\001\022%\n\005units\030\002 \003(\0132\026.pb_m"
  "essage.oob_unit_t\022\017\n\007reserve\030\003 \001(\010\022=\n\023pr"
  "ewar_construction\030\004 \003(\0132 .pb_message.pro"
  "duction_element_t\022#\n\033strategic_move_arri"
  "val_year\030\005 \001(\005\022;\n\035strategic_move_arrival"
  "_season\030\006 \001(\0162\024.pb_message.season_t\022R\n\024h"
  "ex_placement_limits\030\007 \003(\01324.pb_message.s"
  "tarting_fleet_t.HexPlacementLimitsEntry\032"
  "9\n\027HexPlacementLimitsEntry\022\013\n\003key\030\001 \001(\005\022"
  "\r\n\005value\030\002 \001(\005:\0028\001\"\235\001\n\022mothball_reserve_"
  "t\022%\n\005units\030\001 \003(\0132\026.pb_message.oob_unit_t"
  "\022+\n\013war_release\030\002 \003(\0132\026.pb_message.oob_u"
  "nit_t\0223\n\023limited_war_release\030\003 \003(\0132\026.pb_"
  "message.oob_unit_t\"\244\002\n\021order_of_battle_t"
  "\022J\n\017starting_fleets\030\001 \003(\01321.pb_message.o"
  "rder_of_battle_t.StartingFleetsEntry\0228\n\020"
  "mothball_reserve\030\002 \001(\0132\036.pb_message.moth"
  "ball_reserve_t\0224\n\nproduction\030\003 \003(\0132 .pb_"
  "message.production_element_t\032S\n\023Starting"
  "FleetsEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\0132"
  "\034.pb_message.starting_fleet_t:\0028\001\"\230\001\n\022or"
  "ders_of_battle_t\0226\n\004oobs\030\001 \003(\0132(.pb_mess"
  "age.orders_of_battle_t.OobsEntry\032J\n\tOobs"
  "Entry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.pb_m"
  "essage.order_of_battle_t:\0028\001\"\307\001\n\017unit_de"
  "f_side_t\022\013\n\003att\030\001 \001(\002\022\013\n\003def\030\002 \001(\002\022\r\n\005sc"
  "out\030\003 \001(\010\022\020\n\010fighters\030\004 \001(\002\022\033\n\023heavy_fig"
  "hter_bonus\030\005 \001(\002\022\013\n\003pfs\030\006 \001(\005\022\016\n\006drones\030"
  "\007 \001(\005\022\016\n\006mauler\030\010 \001(\010\022/\n\014tug_missions\030\t "
  "\003(\0162\031.pb_message.tug_mission_t\"8\n\ttowabl"
  "e_t\022\021\n\tmove_cost\030\001 \001(\005\022\030\n\020strat_move_lim"
  "it\030\002 \001(\005\"7\n\021production_cost_t\022\014\n\004cost\030\001 "
  "\001(\005\022\024\n\014fighter_cost\030\002 \001(\005\"\201\006\n\nunit_def_t"
  "\022\014\n\004name\030\001 \001(\t\022\013\n\003cmd\030\002 \001(\005\022/\n\nuncripple"
  "d\030\003 \001(\0132\033.pb_message.unit_def_side_t\022-\n\010"
  "crippled\030\004 \001(\0132\033.pb_message.unit_def_sid"
  "e_t\022.\n\013escort_type\030\005 \001(\0162\031.pb_message.es"
  "cort_type_t\022%\n\tavailable\030\006 \001(\0132\022.pb_mess"
  "age.turn_t\022\013\n\003pod\030\007 \001(\010\022\026\n\016max_in_servic"
  "e\030\010 \001(\005\0223\n\014construction\030\t \001(\0132\035.pb_messa"
  "ge.production_cost_t\022@\n\rsubstitutions\030\n "
  "\003(\0132).pb_message.unit_def_t.Substitution"
  "sEntry\022<\n\013conversions\030\013 \003(\0132\'.pb_message"
  ".unit_def_t.ConversionsEntry\022\014\n\004move\030\014 \001"
  "(\005\0220\n\014carrier_type\030\r \001(\0162\032.pb_message.ca"
  "rrier_type_t\022\027\n\017not_spaceworthy\030\016 \001(\010\022&\n"
  "\007towable\030\017 \001(\0132\025.pb_message.towable_t\022\017\n"
  "\007salvage\030\020 \001(\005\022\r\n\005notes\030\021 \001(\t\032S\n\022Substit"
  "utionsEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132"
  "\035.pb_message.production_cost_t:\0028\001\032Q\n\020Co"
  "nversionsEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001"
  "(\0132\035.pb_message.production_cost_t:\0028\001\";\n"
  "\022nation_unit_defs_t\022%\n\005units\030\001 \003(\0132\026.pb_"
  "message.unit_def_t\"\241\001\n\013unit_defs_t\022>\n\014na"
  "tion_units\030\001 \003(\0132(.pb_message.unit_defs_"
  "t.NationUnitsEntry\032R\n\020NationUnitsEntry\022\013"
  "\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.pb_message."
  "nation_unit_defs_t:\0028\001\"\'\n\006team_t\022\014\n\004name"
  "\030\001 \001(\t\022\017\n\007nations\030\002 \003(\t\"\354\002\n\024scenario_con"
  "dition_t\022\016\n\006actors\030\001 \003(\t\0229\n\006action\030\002 \001(\016"
  "2).pb_message.scenario_condition_t.actio"
  "n_t\0229\n\006one_of\030\003 \003(\0132).pb_message.scenari"
  "o_condition_t.object_t\032f\n\010object_t\022<\n\004ty"
  "pe\030\001 \001(\0162..pb_message.scenario_condition"
  "_t.object_type_t\022\r\n\005names\030\002 \003(\t\022\r\n\005hexes"
  "\030\003 \003(\005\"&\n\010action_t\022\014\n\010occupies\020\000\022\014\n\010dest"
  "roys\020\001\">\n\robject_type_t\022\t\n\005hexes\020\000\022\006\n\002sb"
  "\020\001\022\016\n\nfleet_area\020\002\022\n\n\006nation\020\003\"_\n\031fleet_"
  "release_condition_t\022\r\n\005fleet\030\001 \001(\t\0223\n\tco"
  "ndition\030\002 \001(\0132 .pb_message.scenario_cond"
  "ition_t\"x\n\025war_entry_condition_t\022*\n\007econ"
  "omy\030\003 \001(\0162\031.pb_message.war_footing_t\0223\n\t"
  "condition\030\002 \001(\0132 .pb_message.scenario_co"
  "ndition_t\"\315\003\n\017scenario_turn_t\022\014\n\004turn\030\001 "
  "\001(\005\022J\n\020national_actions\030\002 \003(\01320.pb_messa"
  "ge.scenario_turn_t.NationalActionsEntry\032"
  "\370\001\n\021national_action_t\022G\n\007actions\030\001 \003(\01326"
  ".pb_message.scenario_turn_t.national_act"
  "ion_t.action_t\032d\n\010action_t\022I\n\004type\030\001 \001(\016"
  "2;.pb_message.scenario_turn_t.national_a"
  "ction_t.action_type_t\022\r\n\005names\030\002 \003(\t\"4\n\r"
  "action_type_t\022\022\n\016release_fleets\020\000\022\017\n\013dec"
  "lare_war\020\001\032e\n\024NationalActionsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022<\n\005value\030\002 \001(\0132-.pb_message.scen"
  "ario_turn_t.national_action_t:\0028\001\"\262\005\n\nsc"
  "enario_t\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 "
  "\001(\t\022&\n\nstart_turn\030\003 \001(\0132\022.pb_message.tur"
  "n_t\022!\n\005teams\030\004 \003(\0132\022.pb_message.team_t\022\027"
  "\n\017team_turn_order\030\005 \003(\t\022\013\n\003map\030\006 \001(\t\022\027\n\017"
  "order_of_battle\030\007 \001(\t\022\023\n\013setup_order\030\010 \003"
  "(\t\0224\n\007nations\030\t \003(\0132#.pb_message.scenari"
  "o_t.NationsEntry\022*\n\005turns\030\n \003(\0132\033.pb_mes"
  "sage.scenario_turn_t\032\256\002\n\010nation_t\022\023\n\013at_"
  "war_with\030\001 \003(\t\022\033\n\023future_belligerents\030\002 "
  "\003(\t\022*\n\007economy\030\003 \001(\0162\031.pb_message.war_fo"
  "oting_t\022\030\n\020exhaustion_turns\030\004 \001(\005\022&\n\036acc"
  "umulate_exhaustion_at_peace\030\005 \001(\010\022A\n\022rel"
  "ease_conditions\030\006 \003(\0132%.pb_message.fleet"
  "_release_condition_t\022\?\n\024war_entry_condit"
  "ions\030\007 \003(\0132!.pb_message.war_entry_condit"
  "ion_t\032O\n\014NationsEntry\022\013\n\003key\030\001 \001(\t\022.\n\005va"
  "lue\030\002 \001(\0132\037.pb_message.scenario_t.nation"
  "_t:\0028\001*L\n\tfeature_t\022\016\n\nno_feature\020\000\022\010\n\004b"
  "ats\020\001\022\006\n\002sb\020\002\022\007\n\003min\020\003\022\007\n\003maj\020\004\022\013\n\007capit"
  "al\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_start_5fdata_2eproto_deps[1] = {
  &::descriptor_table_base_5ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_start_5fdata_2eproto_sccs[45] = {
  &scc_info_capital_hex_t_start_5fdata_2eproto.base,
  &scc_info_capital_hex_zone_t_start_5fdata_2eproto.base,
  &scc_info_capital_t_start_5fdata_2eproto.base,
  &scc_info_fleet_release_condition_t_start_5fdata_2eproto.base,
  &scc_info_hex_t_start_5fdata_2eproto.base,
  &scc_info_map_t_start_5fdata_2eproto.base,
  &scc_info_map_t_StartingNationalHoldingsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_model_t_start_5fdata_2eproto.base,
  &scc_info_mothball_reserve_t_start_5fdata_2eproto.base,
  &scc_info_nation_t_start_5fdata_2eproto.base,
  &scc_info_nation_unit_defs_t_start_5fdata_2eproto.base,
  &scc_info_nations_t_start_5fdata_2eproto.base,
  &scc_info_nations_t_NationsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_offmap_area_t_start_5fdata_2eproto.base,
  &scc_info_offmap_possesions_t_start_5fdata_2eproto.base,
  &scc_info_oob_unit_t_start_5fdata_2eproto.base,
  &scc_info_order_of_battle_t_start_5fdata_2eproto.base,
  &scc_info_order_of_battle_t_StartingFleetsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_orders_of_battle_t_start_5fdata_2eproto.base,
  &scc_info_orders_of_battle_t_OobsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_production_cost_t_start_5fdata_2eproto.base,
  &scc_info_production_element_t_start_5fdata_2eproto.base,
  &scc_info_province_hex_t_start_5fdata_2eproto.base,
  &scc_info_province_t_start_5fdata_2eproto.base,
  &scc_info_scenario_condition_t_start_5fdata_2eproto.base,
  &scc_info_scenario_condition_t_object_t_start_5fdata_2eproto.base,
  &scc_info_scenario_t_start_5fdata_2eproto.base,
  &scc_info_scenario_t_NationsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_scenario_t_nation_t_start_5fdata_2eproto.base,
  &scc_info_scenario_turn_t_start_5fdata_2eproto.base,
  &scc_info_scenario_turn_t_NationalActionsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto.base,
  &scc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto.base,
  &scc_info_starting_fleet_t_start_5fdata_2eproto.base,
  &scc_info_starting_fleet_t_HexPlacementLimitsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_starting_national_holdings_t_start_5fdata_2eproto.base,
  &scc_info_team_t_start_5fdata_2eproto.base,
  &scc_info_towable_t_start_5fdata_2eproto.base,
  &scc_info_unit_def_side_t_start_5fdata_2eproto.base,
  &scc_info_unit_def_t_start_5fdata_2eproto.base,
  &scc_info_unit_def_t_ConversionsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_unit_def_t_SubstitutionsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_unit_defs_t_start_5fdata_2eproto.base,
  &scc_info_unit_defs_t_NationUnitsEntry_DoNotUse_start_5fdata_2eproto.base,
  &scc_info_war_entry_condition_t_start_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_start_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_start_5fdata_2eproto = {
  false, false, descriptor_table_protodef_start_5fdata_2eproto, "start_data.proto", 6012,
  &descriptor_table_start_5fdata_2eproto_once, descriptor_table_start_5fdata_2eproto_sccs, descriptor_table_start_5fdata_2eproto_deps, 45, 1,
  schemas, file_default_instances, TableStruct_start_5fdata_2eproto::offsets,
  file_level_metadata_start_5fdata_2eproto, 45, file_level_enum_descriptors_start_5fdata_2eproto, file_level_service_descriptors_start_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_start_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_start_5fdata_2eproto)), true);
namespace pb_message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* scenario_condition_t_action_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_start_5fdata_2eproto);
  return file_level_enum_descriptors_start_5fdata_2eproto[0];
}
bool scenario_condition_t_action_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr scenario_condition_t_action_t scenario_condition_t::occupies;
constexpr scenario_condition_t_action_t scenario_condition_t::destroys;
constexpr scenario_condition_t_action_t scenario_condition_t::action_t_MIN;
constexpr scenario_condition_t_action_t scenario_condition_t::action_t_MAX;
constexpr int scenario_condition_t::action_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* scenario_condition_t_object_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_start_5fdata_2eproto);
  return file_level_enum_descriptors_start_5fdata_2eproto[1];
}
bool scenario_condition_t_object_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr scenario_condition_t_object_type_t scenario_condition_t::hexes;
constexpr scenario_condition_t_object_type_t scenario_condition_t::sb;
constexpr scenario_condition_t_object_type_t scenario_condition_t::fleet_area;
constexpr scenario_condition_t_object_type_t scenario_condition_t::nation;
constexpr scenario_condition_t_object_type_t scenario_condition_t::object_type_t_MIN;
constexpr scenario_condition_t_object_type_t scenario_condition_t::object_type_t_MAX;
constexpr int scenario_condition_t::object_type_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* scenario_turn_t_national_action_t_action_type_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_start_5fdata_2eproto);
  return file_level_enum_descriptors_start_5fdata_2eproto[2];
}
bool scenario_turn_t_national_action_t_action_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::release_fleets;
constexpr scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::declare_war;
constexpr scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::action_type_t_MIN;
constexpr scenario_turn_t_national_action_t_action_type_t scenario_turn_t_national_action_t::action_type_t_MAX;
constexpr int scenario_turn_t_national_action_t::action_type_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* feature_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_start_5fdata_2eproto);
  return file_level_enum_descriptors_start_5fdata_2eproto[3];
}
bool feature_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void capital_hex_zone_t::InitAsDefaultInstance() {
}
class capital_hex_zone_t::_Internal {
 public:
};

capital_hex_zone_t::capital_hex_zone_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  features_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.capital_hex_zone_t)
}
capital_hex_zone_t::capital_hex_zone_t(const capital_hex_zone_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      features_(from.features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.capital_hex_zone_t)
}

void capital_hex_zone_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_capital_hex_zone_t_start_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

capital_hex_zone_t::~capital_hex_zone_t() {
  // @@protoc_insertion_point(destructor:pb_message.capital_hex_zone_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void capital_hex_zone_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void capital_hex_zone_t::ArenaDtor(void* object) {
  capital_hex_zone_t* _this = reinterpret_cast< capital_hex_zone_t* >(object);
  (void)_this;
}
void capital_hex_zone_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void capital_hex_zone_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const capital_hex_zone_t& capital_hex_zone_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_capital_hex_zone_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void capital_hex_zone_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.capital_hex_zone_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* capital_hex_zone_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.capital_hex_zone_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.feature_t features = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_features(static_cast<::pb_message::feature_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* capital_hex_zone_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.capital_hex_zone_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.capital_hex_zone_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  {
    int byte_size = _features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, features_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.capital_hex_zone_t)
  return target;
}

size_t capital_hex_zone_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.capital_hex_zone_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.feature_t features = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void capital_hex_zone_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.capital_hex_zone_t)
  GOOGLE_DCHECK_NE(&from, this);
  const capital_hex_zone_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<capital_hex_zone_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.capital_hex_zone_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.capital_hex_zone_t)
    MergeFrom(*source);
  }
}

void capital_hex_zone_t::MergeFrom(const capital_hex_zone_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.capital_hex_zone_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void capital_hex_zone_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.capital_hex_zone_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void capital_hex_zone_t::CopyFrom(const capital_hex_zone_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.capital_hex_zone_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool capital_hex_zone_t::IsInitialized() const {
  return true;
}

void capital_hex_zone_t::InternalSwap(capital_hex_zone_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata capital_hex_zone_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void capital_hex_t::InitAsDefaultInstance() {
}
class capital_hex_t::_Internal {
 public:
};

capital_hex_t::capital_hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  zones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.capital_hex_t)
}
capital_hex_t::capital_hex_t(const capital_hex_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      zones_(from.zones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coord_ = from.coord_;
  // @@protoc_insertion_point(copy_constructor:pb_message.capital_hex_t)
}

void capital_hex_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_capital_hex_t_start_5fdata_2eproto.base);
  coord_ = 0;
}

capital_hex_t::~capital_hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.capital_hex_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void capital_hex_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void capital_hex_t::ArenaDtor(void* object) {
  capital_hex_t* _this = reinterpret_cast< capital_hex_t* >(object);
  (void)_this;
}
void capital_hex_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void capital_hex_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const capital_hex_t& capital_hex_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_capital_hex_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void capital_hex_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.capital_hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zones_.Clear();
  coord_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* capital_hex_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.capital_hex_zone_t zones = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* capital_hex_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.capital_hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 coord = 1;
  if (this->coord() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_coord(), target);
  }

  // repeated .pb_message.capital_hex_zone_t zones = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_zones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_zones(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.capital_hex_t)
  return target;
}

size_t capital_hex_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.capital_hex_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.capital_hex_zone_t zones = 2;
  total_size += 1UL * this->_internal_zones_size();
  for (const auto& msg : this->zones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 coord = 1;
  if (this->coord() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coord());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void capital_hex_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.capital_hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  const capital_hex_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<capital_hex_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.capital_hex_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.capital_hex_t)
    MergeFrom(*source);
  }
}

void capital_hex_t::MergeFrom(const capital_hex_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.capital_hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zones_.MergeFrom(from.zones_);
  if (from.coord() != 0) {
    _internal_set_coord(from._internal_coord());
  }
}

void capital_hex_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.capital_hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void capital_hex_t::CopyFrom(const capital_hex_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.capital_hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool capital_hex_t::IsInitialized() const {
  return true;
}

void capital_hex_t::InternalSwap(capital_hex_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  zones_.InternalSwap(&other->zones_);
  swap(coord_, other->coord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata capital_hex_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void capital_t::InitAsDefaultInstance() {
}
class capital_t::_Internal {
 public:
};

capital_t::capital_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.capital_t)
}
capital_t::capital_t(const capital_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hexes_(from.hexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_message.capital_t)
}

void capital_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_capital_t_start_5fdata_2eproto.base);
}

capital_t::~capital_t() {
  // @@protoc_insertion_point(destructor:pb_message.capital_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void capital_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void capital_t::ArenaDtor(void* object) {
  capital_t* _this = reinterpret_cast< capital_t* >(object);
  (void)_this;
}
void capital_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void capital_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const capital_t& capital_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_capital_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void capital_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.capital_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* capital_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_message.capital_hex_t hexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* capital_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.capital_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_message.capital_hex_t hexes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.capital_t)
  return target;
}

size_t capital_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.capital_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.capital_hex_t hexes = 1;
  total_size += 1UL * this->_internal_hexes_size();
  for (const auto& msg : this->hexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void capital_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.capital_t)
  GOOGLE_DCHECK_NE(&from, this);
  const capital_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<capital_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.capital_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.capital_t)
    MergeFrom(*source);
  }
}

void capital_t::MergeFrom(const capital_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.capital_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hexes_.MergeFrom(from.hexes_);
}

void capital_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.capital_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void capital_t::CopyFrom(const capital_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.capital_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool capital_t::IsInitialized() const {
  return true;
}

void capital_t::InternalSwap(capital_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hexes_.InternalSwap(&other->hexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata capital_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void offmap_possesions_t::InitAsDefaultInstance() {
}
class offmap_possesions_t::_Internal {
 public:
};

offmap_possesions_t::offmap_possesions_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.offmap_possesions_t)
}
offmap_possesions_t::offmap_possesions_t(const offmap_possesions_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&provinces_, &from.provinces_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_shipyard_) -
    reinterpret_cast<char*>(&provinces_)) + sizeof(old_shipyard_));
  // @@protoc_insertion_point(copy_constructor:pb_message.offmap_possesions_t)
}

void offmap_possesions_t::SharedCtor() {
  ::memset(&provinces_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_shipyard_) -
      reinterpret_cast<char*>(&provinces_)) + sizeof(old_shipyard_));
}

offmap_possesions_t::~offmap_possesions_t() {
  // @@protoc_insertion_point(destructor:pb_message.offmap_possesions_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void offmap_possesions_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void offmap_possesions_t::ArenaDtor(void* object) {
  offmap_possesions_t* _this = reinterpret_cast< offmap_possesions_t* >(object);
  (void)_this;
}
void offmap_possesions_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void offmap_possesions_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const offmap_possesions_t& offmap_possesions_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_offmap_possesions_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void offmap_possesions_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.offmap_possesions_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&provinces_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_shipyard_) -
      reinterpret_cast<char*>(&provinces_)) + sizeof(old_shipyard_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* offmap_possesions_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 provinces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          provinces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 majs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          majs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 survey_ships = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          survey_ships_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cannot_build_offmap_capital = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cannot_build_offmap_capital_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool old_shipyard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          old_shipyard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* offmap_possesions_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.offmap_possesions_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 provinces = 1;
  if (this->provinces() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_provinces(), target);
  }

  // int32 mins = 2;
  if (this->mins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mins(), target);
  }

  // int32 majs = 3;
  if (this->majs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_majs(), target);
  }

  // int32 survey_ships = 4;
  if (this->survey_ships() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_survey_ships(), target);
  }

  // bool cannot_build_offmap_capital = 5;
  if (this->cannot_build_offmap_capital() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cannot_build_offmap_capital(), target);
  }

  // bool old_shipyard = 6;
  if (this->old_shipyard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_old_shipyard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.offmap_possesions_t)
  return target;
}

size_t offmap_possesions_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.offmap_possesions_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 provinces = 1;
  if (this->provinces() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_provinces());
  }

  // int32 mins = 2;
  if (this->mins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mins());
  }

  // int32 majs = 3;
  if (this->majs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_majs());
  }

  // int32 survey_ships = 4;
  if (this->survey_ships() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_survey_ships());
  }

  // bool cannot_build_offmap_capital = 5;
  if (this->cannot_build_offmap_capital() != 0) {
    total_size += 1 + 1;
  }

  // bool old_shipyard = 6;
  if (this->old_shipyard() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offmap_possesions_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.offmap_possesions_t)
  GOOGLE_DCHECK_NE(&from, this);
  const offmap_possesions_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<offmap_possesions_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.offmap_possesions_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.offmap_possesions_t)
    MergeFrom(*source);
  }
}

void offmap_possesions_t::MergeFrom(const offmap_possesions_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.offmap_possesions_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provinces() != 0) {
    _internal_set_provinces(from._internal_provinces());
  }
  if (from.mins() != 0) {
    _internal_set_mins(from._internal_mins());
  }
  if (from.majs() != 0) {
    _internal_set_majs(from._internal_majs());
  }
  if (from.survey_ships() != 0) {
    _internal_set_survey_ships(from._internal_survey_ships());
  }
  if (from.cannot_build_offmap_capital() != 0) {
    _internal_set_cannot_build_offmap_capital(from._internal_cannot_build_offmap_capital());
  }
  if (from.old_shipyard() != 0) {
    _internal_set_old_shipyard(from._internal_old_shipyard());
  }
}

void offmap_possesions_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.offmap_possesions_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_possesions_t::CopyFrom(const offmap_possesions_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.offmap_possesions_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_possesions_t::IsInitialized() const {
  return true;
}

void offmap_possesions_t::InternalSwap(offmap_possesions_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(offmap_possesions_t, old_shipyard_)
      + sizeof(offmap_possesions_t::old_shipyard_)
      - PROTOBUF_FIELD_OFFSET(offmap_possesions_t, provinces_)>(
          reinterpret_cast<char*>(&provinces_),
          reinterpret_cast<char*>(&other->provinces_));
}

::PROTOBUF_NAMESPACE_ID::Metadata offmap_possesions_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void nation_t::InitAsDefaultInstance() {
  ::pb_message::_nation_t_default_instance_._instance.get_mutable()->capital_ = const_cast< ::pb_message::capital_t*>(
      ::pb_message::capital_t::internal_default_instance());
  ::pb_message::_nation_t_default_instance_._instance.get_mutable()->offmap_possesions_ = const_cast< ::pb_message::offmap_possesions_t*>(
      ::pb_message::offmap_possesions_t::internal_default_instance());
}
class nation_t::_Internal {
 public:
  static const ::pb_message::capital_t& capital(const nation_t* msg);
  static const ::pb_message::offmap_possesions_t& offmap_possesions(const nation_t* msg);
};

const ::pb_message::capital_t&
nation_t::_Internal::capital(const nation_t* msg) {
  return *msg->capital_;
}
const ::pb_message::offmap_possesions_t&
nation_t::_Internal::offmap_possesions(const nation_t* msg) {
  return *msg->offmap_possesions_;
}
nation_t::nation_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.nation_t)
}
nation_t::nation_t(const nation_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_short_name().empty()) {
    short_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_short_name(),
      GetArena());
  }
  if (from._internal_has_capital()) {
    capital_ = new ::pb_message::capital_t(*from.capital_);
  } else {
    capital_ = nullptr;
  }
  if (from._internal_has_offmap_possesions()) {
    offmap_possesions_ = new ::pb_message::offmap_possesions_t(*from.offmap_possesions_);
  } else {
    offmap_possesions_ = nullptr;
  }
  ::memcpy(&free_strategic_moves_, &from.free_strategic_moves_,
    static_cast<size_t>(reinterpret_cast<char*>(&nation_id_) -
    reinterpret_cast<char*>(&free_strategic_moves_)) + sizeof(nation_id_));
  // @@protoc_insertion_point(copy_constructor:pb_message.nation_t)
}

void nation_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nation_t_start_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capital_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nation_id_) -
      reinterpret_cast<char*>(&capital_)) + sizeof(nation_id_));
}

nation_t::~nation_t() {
  // @@protoc_insertion_point(destructor:pb_message.nation_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void nation_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capital_;
  if (this != internal_default_instance()) delete offmap_possesions_;
}

void nation_t::ArenaDtor(void* object) {
  nation_t* _this = reinterpret_cast< nation_t* >(object);
  (void)_this;
}
void nation_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void nation_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nation_t& nation_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nation_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void nation_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.nation_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && capital_ != nullptr) {
    delete capital_;
  }
  capital_ = nullptr;
  if (GetArena() == nullptr && offmap_possesions_ != nullptr) {
    delete offmap_possesions_;
  }
  offmap_possesions_ = nullptr;
  ::memset(&free_strategic_moves_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nation_id_) -
      reinterpret_cast<char*>(&free_strategic_moves_)) + sizeof(nation_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* nation_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.nation_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string short_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.nation_t.short_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.capital_t capital = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capital(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 free_strategic_moves = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          free_strategic_moves_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capital_star_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          capital_star_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.offmap_possesions_t offmap_possesions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_offmap_possesions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nation_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* nation_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.nation_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.nation_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string short_name = 2;
  if (this->short_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.nation_t.short_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_short_name(), target);
  }

  // .pb_message.capital_t capital = 3;
  if (this->has_capital()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capital(this), target, stream);
  }

  // int32 free_strategic_moves = 4;
  if (this->free_strategic_moves() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_free_strategic_moves(), target);
  }

  // int32 capital_star_points = 5;
  if (this->capital_star_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_capital_star_points(), target);
  }

  // .pb_message.offmap_possesions_t offmap_possesions = 6;
  if (this->has_offmap_possesions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::offmap_possesions(this), target, stream);
  }

  // int32 nation_id = 7;
  if (this->nation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.nation_t)
  return target;
}

size_t nation_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.nation_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string short_name = 2;
  if (this->short_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_short_name());
  }

  // .pb_message.capital_t capital = 3;
  if (this->has_capital()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capital_);
  }

  // .pb_message.offmap_possesions_t offmap_possesions = 6;
  if (this->has_offmap_possesions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offmap_possesions_);
  }

  // int32 free_strategic_moves = 4;
  if (this->free_strategic_moves() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_free_strategic_moves());
  }

  // int32 capital_star_points = 5;
  if (this->capital_star_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capital_star_points());
  }

  // int32 nation_id = 7;
  if (this->nation_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nation_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.nation_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nation_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nation_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.nation_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.nation_t)
    MergeFrom(*source);
  }
}

void nation_t::MergeFrom(const nation_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.nation_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.short_name().size() > 0) {
    _internal_set_short_name(from._internal_short_name());
  }
  if (from.has_capital()) {
    _internal_mutable_capital()->::pb_message::capital_t::MergeFrom(from._internal_capital());
  }
  if (from.has_offmap_possesions()) {
    _internal_mutable_offmap_possesions()->::pb_message::offmap_possesions_t::MergeFrom(from._internal_offmap_possesions());
  }
  if (from.free_strategic_moves() != 0) {
    _internal_set_free_strategic_moves(from._internal_free_strategic_moves());
  }
  if (from.capital_star_points() != 0) {
    _internal_set_capital_star_points(from._internal_capital_star_points());
  }
  if (from.nation_id() != 0) {
    _internal_set_nation_id(from._internal_nation_id());
  }
}

void nation_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.nation_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nation_t::CopyFrom(const nation_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.nation_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nation_t::IsInitialized() const {
  return true;
}

void nation_t::InternalSwap(nation_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(nation_t, nation_id_)
      + sizeof(nation_t::nation_id_)
      - PROTOBUF_FIELD_OFFSET(nation_t, capital_)>(
          reinterpret_cast<char*>(&capital_),
          reinterpret_cast<char*>(&other->capital_));
}

::PROTOBUF_NAMESPACE_ID::Metadata nation_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

nations_t_NationsEntry_DoNotUse::nations_t_NationsEntry_DoNotUse() {}
nations_t_NationsEntry_DoNotUse::nations_t_NationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void nations_t_NationsEntry_DoNotUse::MergeFrom(const nations_t_NationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata nations_t_NationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void nations_t_NationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void nations_t::InitAsDefaultInstance() {
}
class nations_t::_Internal {
 public:
};

nations_t::nations_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.nations_t)
}
nations_t::nations_t(const nations_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nations_.MergeFrom(from.nations_);
  // @@protoc_insertion_point(copy_constructor:pb_message.nations_t)
}

void nations_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nations_t_start_5fdata_2eproto.base);
}

nations_t::~nations_t() {
  // @@protoc_insertion_point(destructor:pb_message.nations_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void nations_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void nations_t::ArenaDtor(void* object) {
  nations_t* _this = reinterpret_cast< nations_t* >(object);
  (void)_this;
}
void nations_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void nations_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nations_t& nations_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nations_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void nations_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.nations_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* nations_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .pb_message.nation_t> nations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* nations_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.nations_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .pb_message.nation_t> nations = 1;
  if (!this->_internal_nations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.nations_t.NationsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >::const_iterator
          it = this->_internal_nations().begin();
          it != this->_internal_nations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = nations_t_NationsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >::const_iterator
          it = this->_internal_nations().begin();
          it != this->_internal_nations().end(); ++it) {
        target = nations_t_NationsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.nations_t)
  return target;
}

size_t nations_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.nations_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pb_message.nation_t> nations = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_t >::const_iterator
      it = this->_internal_nations().begin();
      it != this->_internal_nations().end(); ++it) {
    total_size += nations_t_NationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nations_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.nations_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nations_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nations_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.nations_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.nations_t)
    MergeFrom(*source);
  }
}

void nations_t::MergeFrom(const nations_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.nations_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nations_.MergeFrom(from.nations_);
}

void nations_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.nations_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nations_t::CopyFrom(const nations_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.nations_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nations_t::IsInitialized() const {
  return true;
}

void nations_t::InternalSwap(nations_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nations_.Swap(&other->nations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata nations_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void hex_t::InitAsDefaultInstance() {
  ::pb_message::_hex_t_default_instance_._instance.get_mutable()->coord_ = const_cast< ::pb_message::hex_coord_t*>(
      ::pb_message::hex_coord_t::internal_default_instance());
}
class hex_t::_Internal {
 public:
  static const ::pb_message::hex_coord_t& coord(const hex_t* msg);
};

const ::pb_message::hex_coord_t&
hex_t::_Internal::coord(const hex_t* msg) {
  return *msg->coord_;
}
void hex_t::clear_coord() {
  if (GetArena() == nullptr && coord_ != nullptr) {
    delete coord_;
  }
  coord_ = nullptr;
}
hex_t::hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.hex_t)
}
hex_t::hex_t(const hex_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coord()) {
    coord_ = new ::pb_message::hex_coord_t(*from.coord_);
  } else {
    coord_ = nullptr;
  }
  ::memcpy(&owner_, &from.owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(feature_));
  // @@protoc_insertion_point(copy_constructor:pb_message.hex_t)
}

void hex_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hex_t_start_5fdata_2eproto.base);
  ::memset(&coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_) -
      reinterpret_cast<char*>(&coord_)) + sizeof(feature_));
}

hex_t::~hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.hex_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hex_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coord_;
}

void hex_t::ArenaDtor(void* object) {
  hex_t* _this = reinterpret_cast< hex_t* >(object);
  (void)_this;
}
void hex_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hex_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hex_t& hex_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hex_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void hex_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && coord_ != nullptr) {
    delete coord_;
  }
  coord_ = nullptr;
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(feature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hex_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_message.hex_coord_t coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.feature_t feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_feature(static_cast<::pb_message::feature_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hex_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coord(this), target, stream);
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner(), target);
  }

  // .pb_message.feature_t feature = 3;
  if (this->feature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_feature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.hex_t)
  return target;
}

size_t hex_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.hex_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_message.hex_coord_t coord = 1;
  if (this->has_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_);
  }

  // int32 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner());
  }

  // .pb_message.feature_t feature = 3;
  if (this->feature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_feature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hex_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  const hex_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hex_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.hex_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.hex_t)
    MergeFrom(*source);
  }
}

void hex_t::MergeFrom(const hex_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coord()) {
    _internal_mutable_coord()->::pb_message::hex_coord_t::MergeFrom(from._internal_coord());
  }
  if (from.owner() != 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.feature() != 0) {
    _internal_set_feature(from._internal_feature());
  }
}

void hex_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hex_t::CopyFrom(const hex_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hex_t::IsInitialized() const {
  return true;
}

void hex_t::InternalSwap(hex_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hex_t, feature_)
      + sizeof(hex_t::feature_)
      - PROTOBUF_FIELD_OFFSET(hex_t, coord_)>(
          reinterpret_cast<char*>(&coord_),
          reinterpret_cast<char*>(&other->coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hex_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void province_hex_t::InitAsDefaultInstance() {
}
class province_hex_t::_Internal {
 public:
};

province_hex_t::province_hex_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.province_hex_t)
}
province_hex_t::province_hex_t(const province_hex_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hex_, &from.hex_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_) -
    reinterpret_cast<char*>(&hex_)) + sizeof(feature_));
  // @@protoc_insertion_point(copy_constructor:pb_message.province_hex_t)
}

void province_hex_t::SharedCtor() {
  ::memset(&hex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_) -
      reinterpret_cast<char*>(&hex_)) + sizeof(feature_));
}

province_hex_t::~province_hex_t() {
  // @@protoc_insertion_point(destructor:pb_message.province_hex_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void province_hex_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void province_hex_t::ArenaDtor(void* object) {
  province_hex_t* _this = reinterpret_cast< province_hex_t* >(object);
  (void)_this;
}
void province_hex_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void province_hex_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const province_hex_t& province_hex_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_province_hex_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void province_hex_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.province_hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_) -
      reinterpret_cast<char*>(&hex_)) + sizeof(feature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* province_hex_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.feature_t feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_feature(static_cast<::pb_message::feature_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* province_hex_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.province_hex_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hex = 1;
  if (this->hex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hex(), target);
  }

  // .pb_message.feature_t feature = 2;
  if (this->feature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_feature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.province_hex_t)
  return target;
}

size_t province_hex_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.province_hex_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hex = 1;
  if (this->hex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hex());
  }

  // .pb_message.feature_t feature = 2;
  if (this->feature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_feature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void province_hex_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.province_hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  const province_hex_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<province_hex_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.province_hex_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.province_hex_t)
    MergeFrom(*source);
  }
}

void province_hex_t::MergeFrom(const province_hex_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.province_hex_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hex() != 0) {
    _internal_set_hex(from._internal_hex());
  }
  if (from.feature() != 0) {
    _internal_set_feature(from._internal_feature());
  }
}

void province_hex_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.province_hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_hex_t::CopyFrom(const province_hex_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.province_hex_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_hex_t::IsInitialized() const {
  return true;
}

void province_hex_t::InternalSwap(province_hex_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(province_hex_t, feature_)
      + sizeof(province_hex_t::feature_)
      - PROTOBUF_FIELD_OFFSET(province_hex_t, hex_)>(
          reinterpret_cast<char*>(&hex_),
          reinterpret_cast<char*>(&other->hex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata province_hex_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void province_t::InitAsDefaultInstance() {
}
class province_t::_Internal {
 public:
};

province_t::province_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.province_t)
}
province_t::province_t(const province_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hexes_(from.hexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_message.province_t)
}

void province_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_province_t_start_5fdata_2eproto.base);
}

province_t::~province_t() {
  // @@protoc_insertion_point(destructor:pb_message.province_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void province_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void province_t::ArenaDtor(void* object) {
  province_t* _this = reinterpret_cast< province_t* >(object);
  (void)_this;
}
void province_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void province_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const province_t& province_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_province_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void province_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.province_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* province_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_message.province_hex_t hexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* province_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.province_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_message.province_hex_t hexes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.province_t)
  return target;
}

size_t province_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.province_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.province_hex_t hexes = 1;
  total_size += 1UL * this->_internal_hexes_size();
  for (const auto& msg : this->hexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void province_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.province_t)
  GOOGLE_DCHECK_NE(&from, this);
  const province_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<province_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.province_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.province_t)
    MergeFrom(*source);
  }
}

void province_t::MergeFrom(const province_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.province_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hexes_.MergeFrom(from.hexes_);
}

void province_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.province_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void province_t::CopyFrom(const province_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.province_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool province_t::IsInitialized() const {
  return true;
}

void province_t::InternalSwap(province_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hexes_.InternalSwap(&other->hexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata province_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void offmap_area_t::InitAsDefaultInstance() {
}
class offmap_area_t::_Internal {
 public:
};

offmap_area_t::offmap_area_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  features_(arena),
  feature_hexes_(arena),
  adjacent_hexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.offmap_area_t)
}
offmap_area_t::offmap_area_t(const offmap_area_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      features_(from.features_),
      feature_hexes_(from.feature_hexes_),
      adjacent_hexes_(from.adjacent_hexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.offmap_area_t)
}

void offmap_area_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_offmap_area_t_start_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

offmap_area_t::~offmap_area_t() {
  // @@protoc_insertion_point(destructor:pb_message.offmap_area_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void offmap_area_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void offmap_area_t::ArenaDtor(void* object) {
  offmap_area_t* _this = reinterpret_cast< offmap_area_t* >(object);
  (void)_this;
}
void offmap_area_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void offmap_area_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const offmap_area_t& offmap_area_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_offmap_area_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void offmap_area_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.offmap_area_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  feature_hexes_.Clear();
  adjacent_hexes_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* offmap_area_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.offmap_area_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.feature_t features = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_features(static_cast<::pb_message::feature_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 feature_hexes = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_feature_hexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_feature_hexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 adjacent_hexes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_adjacent_hexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_adjacent_hexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* offmap_area_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.offmap_area_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.offmap_area_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .pb_message.feature_t features = 2 [packed = true];
  {
    int byte_size = _features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, features_, byte_size, target);
    }
  }

  // repeated int32 feature_hexes = 3 [packed = true];
  {
    int byte_size = _feature_hexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_feature_hexes(), byte_size, target);
    }
  }

  // repeated int32 adjacent_hexes = 4 [packed = true];
  {
    int byte_size = _adjacent_hexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_adjacent_hexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.offmap_area_t)
  return target;
}

size_t offmap_area_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.offmap_area_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.feature_t features = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 feature_hexes = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->feature_hexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _feature_hexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 adjacent_hexes = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->adjacent_hexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _adjacent_hexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offmap_area_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.offmap_area_t)
  GOOGLE_DCHECK_NE(&from, this);
  const offmap_area_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<offmap_area_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.offmap_area_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.offmap_area_t)
    MergeFrom(*source);
  }
}

void offmap_area_t::MergeFrom(const offmap_area_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.offmap_area_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  feature_hexes_.MergeFrom(from.feature_hexes_);
  adjacent_hexes_.MergeFrom(from.adjacent_hexes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void offmap_area_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.offmap_area_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offmap_area_t::CopyFrom(const offmap_area_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.offmap_area_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offmap_area_t::IsInitialized() const {
  return true;
}

void offmap_area_t::InternalSwap(offmap_area_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  features_.InternalSwap(&other->features_);
  feature_hexes_.InternalSwap(&other->feature_hexes_);
  adjacent_hexes_.InternalSwap(&other->adjacent_hexes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata offmap_area_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void starting_national_holdings_t::InitAsDefaultInstance() {
  ::pb_message::_starting_national_holdings_t_default_instance_._instance.get_mutable()->offmap_area_ = const_cast< ::pb_message::offmap_area_t*>(
      ::pb_message::offmap_area_t::internal_default_instance());
}
class starting_national_holdings_t::_Internal {
 public:
  static const ::pb_message::offmap_area_t& offmap_area(const starting_national_holdings_t* msg);
};

const ::pb_message::offmap_area_t&
starting_national_holdings_t::_Internal::offmap_area(const starting_national_holdings_t* msg) {
  return *msg->offmap_area_;
}
starting_national_holdings_t::starting_national_holdings_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  provinces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.starting_national_holdings_t)
}
starting_national_holdings_t::starting_national_holdings_t(const starting_national_holdings_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      provinces_(from.provinces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offmap_area()) {
    offmap_area_ = new ::pb_message::offmap_area_t(*from.offmap_area_);
  } else {
    offmap_area_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.starting_national_holdings_t)
}

void starting_national_holdings_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_starting_national_holdings_t_start_5fdata_2eproto.base);
  offmap_area_ = nullptr;
}

starting_national_holdings_t::~starting_national_holdings_t() {
  // @@protoc_insertion_point(destructor:pb_message.starting_national_holdings_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void starting_national_holdings_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete offmap_area_;
}

void starting_national_holdings_t::ArenaDtor(void* object) {
  starting_national_holdings_t* _this = reinterpret_cast< starting_national_holdings_t* >(object);
  (void)_this;
}
void starting_national_holdings_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void starting_national_holdings_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const starting_national_holdings_t& starting_national_holdings_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_starting_national_holdings_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void starting_national_holdings_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.starting_national_holdings_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provinces_.Clear();
  if (GetArena() == nullptr && offmap_area_ != nullptr) {
    delete offmap_area_;
  }
  offmap_area_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* starting_national_holdings_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_message.province_t provinces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_provinces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb_message.offmap_area_t offmap_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offmap_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* starting_national_holdings_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.starting_national_holdings_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_message.province_t provinces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_provinces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_provinces(i), target, stream);
  }

  // .pb_message.offmap_area_t offmap_area = 2;
  if (this->has_offmap_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offmap_area(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.starting_national_holdings_t)
  return target;
}

size_t starting_national_holdings_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.starting_national_holdings_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.province_t provinces = 1;
  total_size += 1UL * this->_internal_provinces_size();
  for (const auto& msg : this->provinces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb_message.offmap_area_t offmap_area = 2;
  if (this->has_offmap_area()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offmap_area_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void starting_national_holdings_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.starting_national_holdings_t)
  GOOGLE_DCHECK_NE(&from, this);
  const starting_national_holdings_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<starting_national_holdings_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.starting_national_holdings_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.starting_national_holdings_t)
    MergeFrom(*source);
  }
}

void starting_national_holdings_t::MergeFrom(const starting_national_holdings_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.starting_national_holdings_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  provinces_.MergeFrom(from.provinces_);
  if (from.has_offmap_area()) {
    _internal_mutable_offmap_area()->::pb_message::offmap_area_t::MergeFrom(from._internal_offmap_area());
  }
}

void starting_national_holdings_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.starting_national_holdings_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starting_national_holdings_t::CopyFrom(const starting_national_holdings_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.starting_national_holdings_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starting_national_holdings_t::IsInitialized() const {
  return true;
}

void starting_national_holdings_t::InternalSwap(starting_national_holdings_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provinces_.InternalSwap(&other->provinces_);
  swap(offmap_area_, other->offmap_area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata starting_national_holdings_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

map_t_StartingNationalHoldingsEntry_DoNotUse::map_t_StartingNationalHoldingsEntry_DoNotUse() {}
map_t_StartingNationalHoldingsEntry_DoNotUse::map_t_StartingNationalHoldingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void map_t_StartingNationalHoldingsEntry_DoNotUse::MergeFrom(const map_t_StartingNationalHoldingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata map_t_StartingNationalHoldingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void map_t_StartingNationalHoldingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void map_t::InitAsDefaultInstance() {
}
class map_t::_Internal {
 public:
};

map_t::map_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nz_planets_(arena),
  nz_hexes_(arena),
  starting_national_holdings_(arena),
  hexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.map_t)
}
map_t::map_t(const map_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nz_planets_(from.nz_planets_),
      nz_hexes_(from.nz_hexes_),
      hexes_(from.hexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  starting_national_holdings_.MergeFrom(from.starting_national_holdings_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:pb_message.map_t)
}

void map_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_map_t_start_5fdata_2eproto.base);
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

map_t::~map_t() {
  // @@protoc_insertion_point(destructor:pb_message.map_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void map_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void map_t::ArenaDtor(void* object) {
  map_t* _this = reinterpret_cast< map_t* >(object);
  (void)_this;
}
void map_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void map_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const map_t& map_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_map_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void map_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.map_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nz_planets_.Clear();
  nz_hexes_.Clear();
  starting_national_holdings_.Clear();
  hexes_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* map_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 nz_planets = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nz_planets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_nz_planets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 nz_hexes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nz_hexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_nz_hexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&starting_national_holdings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.hex_t hexes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* map_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.map_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated int32 nz_planets = 3 [packed = true];
  {
    int byte_size = _nz_planets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_nz_planets(), byte_size, target);
    }
  }

  // repeated int32 nz_hexes = 4 [packed = true];
  {
    int byte_size = _nz_hexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_nz_hexes(), byte_size, target);
    }
  }

  // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
  if (!this->_internal_starting_national_holdings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.map_t.StartingNationalHoldingsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_starting_national_holdings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_starting_national_holdings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >::const_iterator
          it = this->_internal_starting_national_holdings().begin();
          it != this->_internal_starting_national_holdings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = map_t_StartingNationalHoldingsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >::const_iterator
          it = this->_internal_starting_national_holdings().begin();
          it != this->_internal_starting_national_holdings().end(); ++it) {
        target = map_t_StartingNationalHoldingsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .pb_message.hex_t hexes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_hexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.map_t)
  return target;
}

size_t map_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.map_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nz_planets = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nz_planets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nz_planets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 nz_hexes = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nz_hexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nz_hexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .pb_message.starting_national_holdings_t> starting_national_holdings = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_starting_national_holdings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_national_holdings_t >::const_iterator
      it = this->_internal_starting_national_holdings().begin();
      it != this->_internal_starting_national_holdings().end(); ++it) {
    total_size += map_t_StartingNationalHoldingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .pb_message.hex_t hexes = 6;
  total_size += 1UL * this->_internal_hexes_size();
  for (const auto& msg : this->hexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void map_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.map_t)
  GOOGLE_DCHECK_NE(&from, this);
  const map_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<map_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.map_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.map_t)
    MergeFrom(*source);
  }
}

void map_t::MergeFrom(const map_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.map_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nz_planets_.MergeFrom(from.nz_planets_);
  nz_hexes_.MergeFrom(from.nz_hexes_);
  starting_national_holdings_.MergeFrom(from.starting_national_holdings_);
  hexes_.MergeFrom(from.hexes_);
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void map_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.map_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_t::CopyFrom(const map_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.map_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_t::IsInitialized() const {
  return true;
}

void map_t::InternalSwap(map_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nz_planets_.InternalSwap(&other->nz_planets_);
  nz_hexes_.InternalSwap(&other->nz_hexes_);
  starting_national_holdings_.Swap(&other->starting_national_holdings_);
  hexes_.InternalSwap(&other->hexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(map_t, height_)
      + sizeof(map_t::height_)
      - PROTOBUF_FIELD_OFFSET(map_t, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata map_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void model_t::InitAsDefaultInstance() {
  ::pb_message::_model_t_default_instance_._instance.get_mutable()->nations_ = const_cast< ::pb_message::nations_t*>(
      ::pb_message::nations_t::internal_default_instance());
  ::pb_message::_model_t_default_instance_._instance.get_mutable()->map_ = const_cast< ::pb_message::map_t*>(
      ::pb_message::map_t::internal_default_instance());
}
class model_t::_Internal {
 public:
  static const ::pb_message::nations_t& nations(const model_t* msg);
  static const ::pb_message::map_t& map(const model_t* msg);
};

const ::pb_message::nations_t&
model_t::_Internal::nations(const model_t* msg) {
  return *msg->nations_;
}
const ::pb_message::map_t&
model_t::_Internal::map(const model_t* msg) {
  return *msg->map_;
}
model_t::model_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.model_t)
}
model_t::model_t(const model_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nations()) {
    nations_ = new ::pb_message::nations_t(*from.nations_);
  } else {
    nations_ = nullptr;
  }
  if (from._internal_has_map()) {
    map_ = new ::pb_message::map_t(*from.map_);
  } else {
    map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.model_t)
}

void model_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_model_t_start_5fdata_2eproto.base);
  ::memset(&nations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_) -
      reinterpret_cast<char*>(&nations_)) + sizeof(map_));
}

model_t::~model_t() {
  // @@protoc_insertion_point(destructor:pb_message.model_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void model_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete nations_;
  if (this != internal_default_instance()) delete map_;
}

void model_t::ArenaDtor(void* object) {
  model_t* _this = reinterpret_cast< model_t* >(object);
  (void)_this;
}
void model_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void model_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const model_t& model_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_model_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void model_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.model_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && nations_ != nullptr) {
    delete nations_;
  }
  nations_ = nullptr;
  if (GetArena() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* model_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_message.nations_t nations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.map_t map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* model_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.model_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_message.nations_t nations = 1;
  if (this->has_nations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nations(this), target, stream);
  }

  // .pb_message.map_t map = 2;
  if (this->has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.model_t)
  return target;
}

size_t model_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.model_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_message.nations_t nations = 1;
  if (this->has_nations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nations_);
  }

  // .pb_message.map_t map = 2;
  if (this->has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void model_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.model_t)
  GOOGLE_DCHECK_NE(&from, this);
  const model_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<model_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.model_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.model_t)
    MergeFrom(*source);
  }
}

void model_t::MergeFrom(const model_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.model_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nations()) {
    _internal_mutable_nations()->::pb_message::nations_t::MergeFrom(from._internal_nations());
  }
  if (from.has_map()) {
    _internal_mutable_map()->::pb_message::map_t::MergeFrom(from._internal_map());
  }
}

void model_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.model_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void model_t::CopyFrom(const model_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.model_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool model_t::IsInitialized() const {
  return true;
}

void model_t::InternalSwap(model_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(model_t, map_)
      + sizeof(model_t::map_)
      - PROTOBUF_FIELD_OFFSET(model_t, nations_)>(
          reinterpret_cast<char*>(&nations_),
          reinterpret_cast<char*>(&other->nations_));
}

::PROTOBUF_NAMESPACE_ID::Metadata model_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void oob_unit_t::InitAsDefaultInstance() {
}
class oob_unit_t::_Internal {
 public:
};

oob_unit_t::oob_unit_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.oob_unit_t)
}
oob_unit_t::oob_unit_t(const oob_unit_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unit(),
      GetArena());
  }
  times_ = from.times_;
  // @@protoc_insertion_point(copy_constructor:pb_message.oob_unit_t)
}

void oob_unit_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_oob_unit_t_start_5fdata_2eproto.base);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  times_ = 0;
}

oob_unit_t::~oob_unit_t() {
  // @@protoc_insertion_point(destructor:pb_message.oob_unit_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void oob_unit_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void oob_unit_t::ArenaDtor(void* object) {
  oob_unit_t* _this = reinterpret_cast< oob_unit_t* >(object);
  (void)_this;
}
void oob_unit_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void oob_unit_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const oob_unit_t& oob_unit_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_oob_unit_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void oob_unit_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.oob_unit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  times_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* oob_unit_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.oob_unit_t.unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* oob_unit_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.oob_unit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string unit = 1;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.oob_unit_t.unit");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unit(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.oob_unit_t)
  return target;
}

size_t oob_unit_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.oob_unit_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unit = 1;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void oob_unit_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.oob_unit_t)
  GOOGLE_DCHECK_NE(&from, this);
  const oob_unit_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<oob_unit_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.oob_unit_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.oob_unit_t)
    MergeFrom(*source);
  }
}

void oob_unit_t::MergeFrom(const oob_unit_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.oob_unit_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void oob_unit_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.oob_unit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oob_unit_t::CopyFrom(const oob_unit_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.oob_unit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oob_unit_t::IsInitialized() const {
  return true;
}

void oob_unit_t::InternalSwap(oob_unit_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata oob_unit_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void production_element_t::InitAsDefaultInstance() {
}
class production_element_t::_Internal {
 public:
};

production_element_t::production_element_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.production_element_t)
}
production_element_t::production_element_t(const production_element_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&year_)) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:pb_message.production_element_t)
}

void production_element_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_production_element_t_start_5fdata_2eproto.base);
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&year_)) + sizeof(season_));
}

production_element_t::~production_element_t() {
  // @@protoc_insertion_point(destructor:pb_message.production_element_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void production_element_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void production_element_t::ArenaDtor(void* object) {
  production_element_t* _this = reinterpret_cast< production_element_t* >(object);
  (void)_this;
}
void production_element_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void production_element_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const production_element_t& production_element_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_production_element_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void production_element_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.production_element_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&year_)) + sizeof(season_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* production_element_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.season_t season = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_season(static_cast<::pb_message::season_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.oob_unit_t units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* production_element_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.production_element_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // .pb_message.season_t season = 2;
  if (this->season() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_season(), target);
  }

  // repeated .pb_message.oob_unit_t units = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_units_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_units(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.production_element_t)
  return target;
}

size_t production_element_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.production_element_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.oob_unit_t units = 3;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // .pb_message.season_t season = 2;
  if (this->season() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_season());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void production_element_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.production_element_t)
  GOOGLE_DCHECK_NE(&from, this);
  const production_element_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<production_element_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.production_element_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.production_element_t)
    MergeFrom(*source);
  }
}

void production_element_t::MergeFrom(const production_element_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.production_element_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.season() != 0) {
    _internal_set_season(from._internal_season());
  }
}

void production_element_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.production_element_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void production_element_t::CopyFrom(const production_element_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.production_element_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool production_element_t::IsInitialized() const {
  return true;
}

void production_element_t::InternalSwap(production_element_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.InternalSwap(&other->units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(production_element_t, season_)
      + sizeof(production_element_t::season_)
      - PROTOBUF_FIELD_OFFSET(production_element_t, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata production_element_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse() {}
starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::MergeFrom(const starting_fleet_t_HexPlacementLimitsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void starting_fleet_t::InitAsDefaultInstance() {
}
class starting_fleet_t::_Internal {
 public:
};

starting_fleet_t::starting_fleet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hexes_(arena),
  units_(arena),
  prewar_construction_(arena),
  hex_placement_limits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.starting_fleet_t)
}
starting_fleet_t::starting_fleet_t(const starting_fleet_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hexes_(from.hexes_),
      units_(from.units_),
      prewar_construction_(from.prewar_construction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hex_placement_limits_.MergeFrom(from.hex_placement_limits_);
  ::memcpy(&reserve_, &from.reserve_,
    static_cast<size_t>(reinterpret_cast<char*>(&strategic_move_arrival_season_) -
    reinterpret_cast<char*>(&reserve_)) + sizeof(strategic_move_arrival_season_));
  // @@protoc_insertion_point(copy_constructor:pb_message.starting_fleet_t)
}

void starting_fleet_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_starting_fleet_t_start_5fdata_2eproto.base);
  ::memset(&reserve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strategic_move_arrival_season_) -
      reinterpret_cast<char*>(&reserve_)) + sizeof(strategic_move_arrival_season_));
}

starting_fleet_t::~starting_fleet_t() {
  // @@protoc_insertion_point(destructor:pb_message.starting_fleet_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void starting_fleet_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void starting_fleet_t::ArenaDtor(void* object) {
  starting_fleet_t* _this = reinterpret_cast< starting_fleet_t* >(object);
  (void)_this;
}
void starting_fleet_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void starting_fleet_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const starting_fleet_t& starting_fleet_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_starting_fleet_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void starting_fleet_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.starting_fleet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hexes_.Clear();
  units_.Clear();
  prewar_construction_.Clear();
  hex_placement_limits_.Clear();
  ::memset(&reserve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strategic_move_arrival_season_) -
      reinterpret_cast<char*>(&reserve_)) + sizeof(strategic_move_arrival_season_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* starting_fleet_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 hexes = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_hexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.oob_unit_t units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool reserve = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reserve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.production_element_t prewar_construction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prewar_construction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 strategic_move_arrival_year = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          strategic_move_arrival_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.season_t strategic_move_arrival_season = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategic_move_arrival_season(static_cast<::pb_message::season_t>(val));
        } else goto handle_unusual;
        continue;
      // map<int32, int32> hex_placement_limits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&hex_placement_limits_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* starting_fleet_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.starting_fleet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 hexes = 1 [packed = true];
  {
    int byte_size = _hexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_hexes(), byte_size, target);
    }
  }

  // repeated .pb_message.oob_unit_t units = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_units_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_units(i), target, stream);
  }

  // bool reserve = 3;
  if (this->reserve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_reserve(), target);
  }

  // repeated .pb_message.production_element_t prewar_construction = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prewar_construction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prewar_construction(i), target, stream);
  }

  // int32 strategic_move_arrival_year = 5;
  if (this->strategic_move_arrival_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_strategic_move_arrival_year(), target);
  }

  // .pb_message.season_t strategic_move_arrival_season = 6;
  if (this->strategic_move_arrival_season() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_strategic_move_arrival_season(), target);
  }

  // map<int32, int32> hex_placement_limits = 7;
  if (!this->_internal_hex_placement_limits().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_hex_placement_limits().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_hex_placement_limits().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_hex_placement_limits().begin();
          it != this->_internal_hex_placement_limits().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_hex_placement_limits().begin();
          it != this->_internal_hex_placement_limits().end(); ++it) {
        target = starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.starting_fleet_t)
  return target;
}

size_t starting_fleet_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.starting_fleet_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 hexes = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pb_message.oob_unit_t units = 2;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_message.production_element_t prewar_construction = 4;
  total_size += 1UL * this->_internal_prewar_construction_size();
  for (const auto& msg : this->prewar_construction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, int32> hex_placement_limits = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hex_placement_limits_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_hex_placement_limits().begin();
      it != this->_internal_hex_placement_limits().end(); ++it) {
    total_size += starting_fleet_t_HexPlacementLimitsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool reserve = 3;
  if (this->reserve() != 0) {
    total_size += 1 + 1;
  }

  // int32 strategic_move_arrival_year = 5;
  if (this->strategic_move_arrival_year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strategic_move_arrival_year());
  }

  // .pb_message.season_t strategic_move_arrival_season = 6;
  if (this->strategic_move_arrival_season() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strategic_move_arrival_season());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void starting_fleet_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.starting_fleet_t)
  GOOGLE_DCHECK_NE(&from, this);
  const starting_fleet_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<starting_fleet_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.starting_fleet_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.starting_fleet_t)
    MergeFrom(*source);
  }
}

void starting_fleet_t::MergeFrom(const starting_fleet_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.starting_fleet_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hexes_.MergeFrom(from.hexes_);
  units_.MergeFrom(from.units_);
  prewar_construction_.MergeFrom(from.prewar_construction_);
  hex_placement_limits_.MergeFrom(from.hex_placement_limits_);
  if (from.reserve() != 0) {
    _internal_set_reserve(from._internal_reserve());
  }
  if (from.strategic_move_arrival_year() != 0) {
    _internal_set_strategic_move_arrival_year(from._internal_strategic_move_arrival_year());
  }
  if (from.strategic_move_arrival_season() != 0) {
    _internal_set_strategic_move_arrival_season(from._internal_strategic_move_arrival_season());
  }
}

void starting_fleet_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.starting_fleet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starting_fleet_t::CopyFrom(const starting_fleet_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.starting_fleet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starting_fleet_t::IsInitialized() const {
  return true;
}

void starting_fleet_t::InternalSwap(starting_fleet_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hexes_.InternalSwap(&other->hexes_);
  units_.InternalSwap(&other->units_);
  prewar_construction_.InternalSwap(&other->prewar_construction_);
  hex_placement_limits_.Swap(&other->hex_placement_limits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(starting_fleet_t, strategic_move_arrival_season_)
      + sizeof(starting_fleet_t::strategic_move_arrival_season_)
      - PROTOBUF_FIELD_OFFSET(starting_fleet_t, reserve_)>(
          reinterpret_cast<char*>(&reserve_),
          reinterpret_cast<char*>(&other->reserve_));
}

::PROTOBUF_NAMESPACE_ID::Metadata starting_fleet_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mothball_reserve_t::InitAsDefaultInstance() {
}
class mothball_reserve_t::_Internal {
 public:
};

mothball_reserve_t::mothball_reserve_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena),
  war_release_(arena),
  limited_war_release_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.mothball_reserve_t)
}
mothball_reserve_t::mothball_reserve_t(const mothball_reserve_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      units_(from.units_),
      war_release_(from.war_release_),
      limited_war_release_(from.limited_war_release_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_message.mothball_reserve_t)
}

void mothball_reserve_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mothball_reserve_t_start_5fdata_2eproto.base);
}

mothball_reserve_t::~mothball_reserve_t() {
  // @@protoc_insertion_point(destructor:pb_message.mothball_reserve_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mothball_reserve_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mothball_reserve_t::ArenaDtor(void* object) {
  mothball_reserve_t* _this = reinterpret_cast< mothball_reserve_t* >(object);
  (void)_this;
}
void mothball_reserve_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mothball_reserve_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mothball_reserve_t& mothball_reserve_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mothball_reserve_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void mothball_reserve_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.mothball_reserve_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  war_release_.Clear();
  limited_war_release_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mothball_reserve_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_message.oob_unit_t units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.oob_unit_t war_release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_war_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.oob_unit_t limited_war_release = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limited_war_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mothball_reserve_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.mothball_reserve_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_message.oob_unit_t units = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_units_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_units(i), target, stream);
  }

  // repeated .pb_message.oob_unit_t war_release = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_war_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_war_release(i), target, stream);
  }

  // repeated .pb_message.oob_unit_t limited_war_release = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limited_war_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_limited_war_release(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.mothball_reserve_t)
  return target;
}

size_t mothball_reserve_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.mothball_reserve_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.oob_unit_t units = 1;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_message.oob_unit_t war_release = 2;
  total_size += 1UL * this->_internal_war_release_size();
  for (const auto& msg : this->war_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_message.oob_unit_t limited_war_release = 3;
  total_size += 1UL * this->_internal_limited_war_release_size();
  for (const auto& msg : this->limited_war_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mothball_reserve_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.mothball_reserve_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mothball_reserve_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mothball_reserve_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.mothball_reserve_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.mothball_reserve_t)
    MergeFrom(*source);
  }
}

void mothball_reserve_t::MergeFrom(const mothball_reserve_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.mothball_reserve_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  war_release_.MergeFrom(from.war_release_);
  limited_war_release_.MergeFrom(from.limited_war_release_);
}

void mothball_reserve_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.mothball_reserve_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mothball_reserve_t::CopyFrom(const mothball_reserve_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.mothball_reserve_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mothball_reserve_t::IsInitialized() const {
  return true;
}

void mothball_reserve_t::InternalSwap(mothball_reserve_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.InternalSwap(&other->units_);
  war_release_.InternalSwap(&other->war_release_);
  limited_war_release_.InternalSwap(&other->limited_war_release_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mothball_reserve_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

order_of_battle_t_StartingFleetsEntry_DoNotUse::order_of_battle_t_StartingFleetsEntry_DoNotUse() {}
order_of_battle_t_StartingFleetsEntry_DoNotUse::order_of_battle_t_StartingFleetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void order_of_battle_t_StartingFleetsEntry_DoNotUse::MergeFrom(const order_of_battle_t_StartingFleetsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata order_of_battle_t_StartingFleetsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void order_of_battle_t_StartingFleetsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void order_of_battle_t::InitAsDefaultInstance() {
  ::pb_message::_order_of_battle_t_default_instance_._instance.get_mutable()->mothball_reserve_ = const_cast< ::pb_message::mothball_reserve_t*>(
      ::pb_message::mothball_reserve_t::internal_default_instance());
}
class order_of_battle_t::_Internal {
 public:
  static const ::pb_message::mothball_reserve_t& mothball_reserve(const order_of_battle_t* msg);
};

const ::pb_message::mothball_reserve_t&
order_of_battle_t::_Internal::mothball_reserve(const order_of_battle_t* msg) {
  return *msg->mothball_reserve_;
}
order_of_battle_t::order_of_battle_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  starting_fleets_(arena),
  production_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.order_of_battle_t)
}
order_of_battle_t::order_of_battle_t(const order_of_battle_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      production_(from.production_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  starting_fleets_.MergeFrom(from.starting_fleets_);
  if (from._internal_has_mothball_reserve()) {
    mothball_reserve_ = new ::pb_message::mothball_reserve_t(*from.mothball_reserve_);
  } else {
    mothball_reserve_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.order_of_battle_t)
}

void order_of_battle_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_order_of_battle_t_start_5fdata_2eproto.base);
  mothball_reserve_ = nullptr;
}

order_of_battle_t::~order_of_battle_t() {
  // @@protoc_insertion_point(destructor:pb_message.order_of_battle_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void order_of_battle_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mothball_reserve_;
}

void order_of_battle_t::ArenaDtor(void* object) {
  order_of_battle_t* _this = reinterpret_cast< order_of_battle_t* >(object);
  (void)_this;
}
void order_of_battle_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void order_of_battle_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const order_of_battle_t& order_of_battle_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_order_of_battle_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void order_of_battle_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.order_of_battle_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  starting_fleets_.Clear();
  production_.Clear();
  if (GetArena() == nullptr && mothball_reserve_ != nullptr) {
    delete mothball_reserve_;
  }
  mothball_reserve_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* order_of_battle_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&starting_fleets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb_message.mothball_reserve_t mothball_reserve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mothball_reserve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.production_element_t production = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_production(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* order_of_battle_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.order_of_battle_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
  if (!this->_internal_starting_fleets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.order_of_battle_t.StartingFleetsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_starting_fleets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_starting_fleets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >::const_iterator
          it = this->_internal_starting_fleets().begin();
          it != this->_internal_starting_fleets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = order_of_battle_t_StartingFleetsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >::const_iterator
          it = this->_internal_starting_fleets().begin();
          it != this->_internal_starting_fleets().end(); ++it) {
        target = order_of_battle_t_StartingFleetsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .pb_message.mothball_reserve_t mothball_reserve = 2;
  if (this->has_mothball_reserve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mothball_reserve(this), target, stream);
  }

  // repeated .pb_message.production_element_t production = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_production_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_production(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.order_of_battle_t)
  return target;
}

size_t order_of_battle_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.order_of_battle_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pb_message.starting_fleet_t> starting_fleets = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_starting_fleets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::starting_fleet_t >::const_iterator
      it = this->_internal_starting_fleets().begin();
      it != this->_internal_starting_fleets().end(); ++it) {
    total_size += order_of_battle_t_StartingFleetsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .pb_message.production_element_t production = 3;
  total_size += 1UL * this->_internal_production_size();
  for (const auto& msg : this->production_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb_message.mothball_reserve_t mothball_reserve = 2;
  if (this->has_mothball_reserve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mothball_reserve_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void order_of_battle_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.order_of_battle_t)
  GOOGLE_DCHECK_NE(&from, this);
  const order_of_battle_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<order_of_battle_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.order_of_battle_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.order_of_battle_t)
    MergeFrom(*source);
  }
}

void order_of_battle_t::MergeFrom(const order_of_battle_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.order_of_battle_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  starting_fleets_.MergeFrom(from.starting_fleets_);
  production_.MergeFrom(from.production_);
  if (from.has_mothball_reserve()) {
    _internal_mutable_mothball_reserve()->::pb_message::mothball_reserve_t::MergeFrom(from._internal_mothball_reserve());
  }
}

void order_of_battle_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.order_of_battle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_of_battle_t::CopyFrom(const order_of_battle_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.order_of_battle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_of_battle_t::IsInitialized() const {
  return true;
}

void order_of_battle_t::InternalSwap(order_of_battle_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  starting_fleets_.Swap(&other->starting_fleets_);
  production_.InternalSwap(&other->production_);
  swap(mothball_reserve_, other->mothball_reserve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata order_of_battle_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

orders_of_battle_t_OobsEntry_DoNotUse::orders_of_battle_t_OobsEntry_DoNotUse() {}
orders_of_battle_t_OobsEntry_DoNotUse::orders_of_battle_t_OobsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void orders_of_battle_t_OobsEntry_DoNotUse::MergeFrom(const orders_of_battle_t_OobsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata orders_of_battle_t_OobsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void orders_of_battle_t_OobsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void orders_of_battle_t::InitAsDefaultInstance() {
}
class orders_of_battle_t::_Internal {
 public:
};

orders_of_battle_t::orders_of_battle_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  oobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.orders_of_battle_t)
}
orders_of_battle_t::orders_of_battle_t(const orders_of_battle_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oobs_.MergeFrom(from.oobs_);
  // @@protoc_insertion_point(copy_constructor:pb_message.orders_of_battle_t)
}

void orders_of_battle_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_orders_of_battle_t_start_5fdata_2eproto.base);
}

orders_of_battle_t::~orders_of_battle_t() {
  // @@protoc_insertion_point(destructor:pb_message.orders_of_battle_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void orders_of_battle_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void orders_of_battle_t::ArenaDtor(void* object) {
  orders_of_battle_t* _this = reinterpret_cast< orders_of_battle_t* >(object);
  (void)_this;
}
void orders_of_battle_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void orders_of_battle_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const orders_of_battle_t& orders_of_battle_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_orders_of_battle_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void orders_of_battle_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.orders_of_battle_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oobs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* orders_of_battle_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .pb_message.order_of_battle_t> oobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&oobs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* orders_of_battle_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.orders_of_battle_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .pb_message.order_of_battle_t> oobs = 1;
  if (!this->_internal_oobs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.orders_of_battle_t.OobsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_oobs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_oobs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >::const_iterator
          it = this->_internal_oobs().begin();
          it != this->_internal_oobs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = orders_of_battle_t_OobsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >::const_iterator
          it = this->_internal_oobs().begin();
          it != this->_internal_oobs().end(); ++it) {
        target = orders_of_battle_t_OobsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.orders_of_battle_t)
  return target;
}

size_t orders_of_battle_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.orders_of_battle_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pb_message.order_of_battle_t> oobs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_oobs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::order_of_battle_t >::const_iterator
      it = this->_internal_oobs().begin();
      it != this->_internal_oobs().end(); ++it) {
    total_size += orders_of_battle_t_OobsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void orders_of_battle_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.orders_of_battle_t)
  GOOGLE_DCHECK_NE(&from, this);
  const orders_of_battle_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<orders_of_battle_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.orders_of_battle_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.orders_of_battle_t)
    MergeFrom(*source);
  }
}

void orders_of_battle_t::MergeFrom(const orders_of_battle_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.orders_of_battle_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oobs_.MergeFrom(from.oobs_);
}

void orders_of_battle_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.orders_of_battle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void orders_of_battle_t::CopyFrom(const orders_of_battle_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.orders_of_battle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool orders_of_battle_t::IsInitialized() const {
  return true;
}

void orders_of_battle_t::InternalSwap(orders_of_battle_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  oobs_.Swap(&other->oobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata orders_of_battle_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void unit_def_side_t::InitAsDefaultInstance() {
}
class unit_def_side_t::_Internal {
 public:
};

unit_def_side_t::unit_def_side_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tug_missions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.unit_def_side_t)
}
unit_def_side_t::unit_def_side_t(const unit_def_side_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tug_missions_(from.tug_missions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&att_, &from.att_,
    static_cast<size_t>(reinterpret_cast<char*>(&drones_) -
    reinterpret_cast<char*>(&att_)) + sizeof(drones_));
  // @@protoc_insertion_point(copy_constructor:pb_message.unit_def_side_t)
}

void unit_def_side_t::SharedCtor() {
  ::memset(&att_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drones_) -
      reinterpret_cast<char*>(&att_)) + sizeof(drones_));
}

unit_def_side_t::~unit_def_side_t() {
  // @@protoc_insertion_point(destructor:pb_message.unit_def_side_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void unit_def_side_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void unit_def_side_t::ArenaDtor(void* object) {
  unit_def_side_t* _this = reinterpret_cast< unit_def_side_t* >(object);
  (void)_this;
}
void unit_def_side_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void unit_def_side_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const unit_def_side_t& unit_def_side_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_unit_def_side_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void unit_def_side_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.unit_def_side_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tug_missions_.Clear();
  ::memset(&att_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drones_) -
      reinterpret_cast<char*>(&att_)) + sizeof(drones_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unit_def_side_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float att = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          att_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          def_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool scout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fighters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fighters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heavy_fighter_bonus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          heavy_fighter_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 pfs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pfs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 drones = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          drones_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mauler = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mauler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.tug_mission_t tug_missions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_tug_missions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_tug_missions(static_cast<::pb_message::tug_mission_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* unit_def_side_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.unit_def_side_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float att = 1;
  if (!(this->att() <= 0 && this->att() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_att(), target);
  }

  // float def = 2;
  if (!(this->def() <= 0 && this->def() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_def(), target);
  }

  // bool scout = 3;
  if (this->scout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_scout(), target);
  }

  // float fighters = 4;
  if (!(this->fighters() <= 0 && this->fighters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fighters(), target);
  }

  // float heavy_fighter_bonus = 5;
  if (!(this->heavy_fighter_bonus() <= 0 && this->heavy_fighter_bonus() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_heavy_fighter_bonus(), target);
  }

  // int32 pfs = 6;
  if (this->pfs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pfs(), target);
  }

  // int32 drones = 7;
  if (this->drones() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_drones(), target);
  }

  // bool mauler = 8;
  if (this->mauler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_mauler(), target);
  }

  // repeated .pb_message.tug_mission_t tug_missions = 9;
  {
    int byte_size = _tug_missions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, tug_missions_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.unit_def_side_t)
  return target;
}

size_t unit_def_side_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.unit_def_side_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.tug_mission_t tug_missions = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_tug_missions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_tug_missions(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tug_missions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float att = 1;
  if (!(this->att() <= 0 && this->att() >= 0)) {
    total_size += 1 + 4;
  }

  // float def = 2;
  if (!(this->def() <= 0 && this->def() >= 0)) {
    total_size += 1 + 4;
  }

  // float fighters = 4;
  if (!(this->fighters() <= 0 && this->fighters() >= 0)) {
    total_size += 1 + 4;
  }

  // float heavy_fighter_bonus = 5;
  if (!(this->heavy_fighter_bonus() <= 0 && this->heavy_fighter_bonus() >= 0)) {
    total_size += 1 + 4;
  }

  // bool scout = 3;
  if (this->scout() != 0) {
    total_size += 1 + 1;
  }

  // bool mauler = 8;
  if (this->mauler() != 0) {
    total_size += 1 + 1;
  }

  // int32 pfs = 6;
  if (this->pfs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pfs());
  }

  // int32 drones = 7;
  if (this->drones() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_drones());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void unit_def_side_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.unit_def_side_t)
  GOOGLE_DCHECK_NE(&from, this);
  const unit_def_side_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<unit_def_side_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.unit_def_side_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.unit_def_side_t)
    MergeFrom(*source);
  }
}

void unit_def_side_t::MergeFrom(const unit_def_side_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.unit_def_side_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tug_missions_.MergeFrom(from.tug_missions_);
  if (!(from.att() <= 0 && from.att() >= 0)) {
    _internal_set_att(from._internal_att());
  }
  if (!(from.def() <= 0 && from.def() >= 0)) {
    _internal_set_def(from._internal_def());
  }
  if (!(from.fighters() <= 0 && from.fighters() >= 0)) {
    _internal_set_fighters(from._internal_fighters());
  }
  if (!(from.heavy_fighter_bonus() <= 0 && from.heavy_fighter_bonus() >= 0)) {
    _internal_set_heavy_fighter_bonus(from._internal_heavy_fighter_bonus());
  }
  if (from.scout() != 0) {
    _internal_set_scout(from._internal_scout());
  }
  if (from.mauler() != 0) {
    _internal_set_mauler(from._internal_mauler());
  }
  if (from.pfs() != 0) {
    _internal_set_pfs(from._internal_pfs());
  }
  if (from.drones() != 0) {
    _internal_set_drones(from._internal_drones());
  }
}

void unit_def_side_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.unit_def_side_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_def_side_t::CopyFrom(const unit_def_side_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.unit_def_side_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_def_side_t::IsInitialized() const {
  return true;
}

void unit_def_side_t::InternalSwap(unit_def_side_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tug_missions_.InternalSwap(&other->tug_missions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(unit_def_side_t, drones_)
      + sizeof(unit_def_side_t::drones_)
      - PROTOBUF_FIELD_OFFSET(unit_def_side_t, att_)>(
          reinterpret_cast<char*>(&att_),
          reinterpret_cast<char*>(&other->att_));
}

::PROTOBUF_NAMESPACE_ID::Metadata unit_def_side_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void towable_t::InitAsDefaultInstance() {
}
class towable_t::_Internal {
 public:
};

towable_t::towable_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.towable_t)
}
towable_t::towable_t(const towable_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&move_cost_, &from.move_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&strat_move_limit_) -
    reinterpret_cast<char*>(&move_cost_)) + sizeof(strat_move_limit_));
  // @@protoc_insertion_point(copy_constructor:pb_message.towable_t)
}

void towable_t::SharedCtor() {
  ::memset(&move_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strat_move_limit_) -
      reinterpret_cast<char*>(&move_cost_)) + sizeof(strat_move_limit_));
}

towable_t::~towable_t() {
  // @@protoc_insertion_point(destructor:pb_message.towable_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void towable_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void towable_t::ArenaDtor(void* object) {
  towable_t* _this = reinterpret_cast< towable_t* >(object);
  (void)_this;
}
void towable_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void towable_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const towable_t& towable_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_towable_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void towable_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.towable_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&move_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strat_move_limit_) -
      reinterpret_cast<char*>(&move_cost_)) + sizeof(strat_move_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* towable_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 move_cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          move_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 strat_move_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          strat_move_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* towable_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.towable_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 move_cost = 1;
  if (this->move_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_move_cost(), target);
  }

  // int32 strat_move_limit = 2;
  if (this->strat_move_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_strat_move_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.towable_t)
  return target;
}

size_t towable_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.towable_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 move_cost = 1;
  if (this->move_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_move_cost());
  }

  // int32 strat_move_limit = 2;
  if (this->strat_move_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strat_move_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void towable_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.towable_t)
  GOOGLE_DCHECK_NE(&from, this);
  const towable_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<towable_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.towable_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.towable_t)
    MergeFrom(*source);
  }
}

void towable_t::MergeFrom(const towable_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.towable_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.move_cost() != 0) {
    _internal_set_move_cost(from._internal_move_cost());
  }
  if (from.strat_move_limit() != 0) {
    _internal_set_strat_move_limit(from._internal_strat_move_limit());
  }
}

void towable_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.towable_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void towable_t::CopyFrom(const towable_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.towable_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool towable_t::IsInitialized() const {
  return true;
}

void towable_t::InternalSwap(towable_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(towable_t, strat_move_limit_)
      + sizeof(towable_t::strat_move_limit_)
      - PROTOBUF_FIELD_OFFSET(towable_t, move_cost_)>(
          reinterpret_cast<char*>(&move_cost_),
          reinterpret_cast<char*>(&other->move_cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata towable_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void production_cost_t::InitAsDefaultInstance() {
}
class production_cost_t::_Internal {
 public:
};

production_cost_t::production_cost_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.production_cost_t)
}
production_cost_t::production_cost_t(const production_cost_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cost_, &from.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&fighter_cost_) -
    reinterpret_cast<char*>(&cost_)) + sizeof(fighter_cost_));
  // @@protoc_insertion_point(copy_constructor:pb_message.production_cost_t)
}

void production_cost_t::SharedCtor() {
  ::memset(&cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fighter_cost_) -
      reinterpret_cast<char*>(&cost_)) + sizeof(fighter_cost_));
}

production_cost_t::~production_cost_t() {
  // @@protoc_insertion_point(destructor:pb_message.production_cost_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void production_cost_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void production_cost_t::ArenaDtor(void* object) {
  production_cost_t* _this = reinterpret_cast< production_cost_t* >(object);
  (void)_this;
}
void production_cost_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void production_cost_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const production_cost_t& production_cost_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_production_cost_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void production_cost_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.production_cost_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fighter_cost_) -
      reinterpret_cast<char*>(&cost_)) + sizeof(fighter_cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* production_cost_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fighter_cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fighter_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* production_cost_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.production_cost_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cost = 1;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cost(), target);
  }

  // int32 fighter_cost = 2;
  if (this->fighter_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fighter_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.production_cost_t)
  return target;
}

size_t production_cost_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.production_cost_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cost = 1;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  // int32 fighter_cost = 2;
  if (this->fighter_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fighter_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void production_cost_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.production_cost_t)
  GOOGLE_DCHECK_NE(&from, this);
  const production_cost_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<production_cost_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.production_cost_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.production_cost_t)
    MergeFrom(*source);
  }
}

void production_cost_t::MergeFrom(const production_cost_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.production_cost_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
  if (from.fighter_cost() != 0) {
    _internal_set_fighter_cost(from._internal_fighter_cost());
  }
}

void production_cost_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.production_cost_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void production_cost_t::CopyFrom(const production_cost_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.production_cost_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool production_cost_t::IsInitialized() const {
  return true;
}

void production_cost_t::InternalSwap(production_cost_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(production_cost_t, fighter_cost_)
      + sizeof(production_cost_t::fighter_cost_)
      - PROTOBUF_FIELD_OFFSET(production_cost_t, cost_)>(
          reinterpret_cast<char*>(&cost_),
          reinterpret_cast<char*>(&other->cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata production_cost_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

unit_def_t_SubstitutionsEntry_DoNotUse::unit_def_t_SubstitutionsEntry_DoNotUse() {}
unit_def_t_SubstitutionsEntry_DoNotUse::unit_def_t_SubstitutionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void unit_def_t_SubstitutionsEntry_DoNotUse::MergeFrom(const unit_def_t_SubstitutionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata unit_def_t_SubstitutionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void unit_def_t_SubstitutionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

unit_def_t_ConversionsEntry_DoNotUse::unit_def_t_ConversionsEntry_DoNotUse() {}
unit_def_t_ConversionsEntry_DoNotUse::unit_def_t_ConversionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void unit_def_t_ConversionsEntry_DoNotUse::MergeFrom(const unit_def_t_ConversionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata unit_def_t_ConversionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void unit_def_t_ConversionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void unit_def_t::InitAsDefaultInstance() {
  ::pb_message::_unit_def_t_default_instance_._instance.get_mutable()->uncrippled_ = const_cast< ::pb_message::unit_def_side_t*>(
      ::pb_message::unit_def_side_t::internal_default_instance());
  ::pb_message::_unit_def_t_default_instance_._instance.get_mutable()->crippled_ = const_cast< ::pb_message::unit_def_side_t*>(
      ::pb_message::unit_def_side_t::internal_default_instance());
  ::pb_message::_unit_def_t_default_instance_._instance.get_mutable()->available_ = const_cast< ::pb_message::turn_t*>(
      ::pb_message::turn_t::internal_default_instance());
  ::pb_message::_unit_def_t_default_instance_._instance.get_mutable()->construction_ = const_cast< ::pb_message::production_cost_t*>(
      ::pb_message::production_cost_t::internal_default_instance());
  ::pb_message::_unit_def_t_default_instance_._instance.get_mutable()->towable_ = const_cast< ::pb_message::towable_t*>(
      ::pb_message::towable_t::internal_default_instance());
}
class unit_def_t::_Internal {
 public:
  static const ::pb_message::unit_def_side_t& uncrippled(const unit_def_t* msg);
  static const ::pb_message::unit_def_side_t& crippled(const unit_def_t* msg);
  static const ::pb_message::turn_t& available(const unit_def_t* msg);
  static const ::pb_message::production_cost_t& construction(const unit_def_t* msg);
  static const ::pb_message::towable_t& towable(const unit_def_t* msg);
};

const ::pb_message::unit_def_side_t&
unit_def_t::_Internal::uncrippled(const unit_def_t* msg) {
  return *msg->uncrippled_;
}
const ::pb_message::unit_def_side_t&
unit_def_t::_Internal::crippled(const unit_def_t* msg) {
  return *msg->crippled_;
}
const ::pb_message::turn_t&
unit_def_t::_Internal::available(const unit_def_t* msg) {
  return *msg->available_;
}
const ::pb_message::production_cost_t&
unit_def_t::_Internal::construction(const unit_def_t* msg) {
  return *msg->construction_;
}
const ::pb_message::towable_t&
unit_def_t::_Internal::towable(const unit_def_t* msg) {
  return *msg->towable_;
}
void unit_def_t::clear_available() {
  if (GetArena() == nullptr && available_ != nullptr) {
    delete available_;
  }
  available_ = nullptr;
}
unit_def_t::unit_def_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  substitutions_(arena),
  conversions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.unit_def_t)
}
unit_def_t::unit_def_t(const unit_def_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  substitutions_.MergeFrom(from.substitutions_);
  conversions_.MergeFrom(from.conversions_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  if (from._internal_has_uncrippled()) {
    uncrippled_ = new ::pb_message::unit_def_side_t(*from.uncrippled_);
  } else {
    uncrippled_ = nullptr;
  }
  if (from._internal_has_crippled()) {
    crippled_ = new ::pb_message::unit_def_side_t(*from.crippled_);
  } else {
    crippled_ = nullptr;
  }
  if (from._internal_has_available()) {
    available_ = new ::pb_message::turn_t(*from.available_);
  } else {
    available_ = nullptr;
  }
  if (from._internal_has_construction()) {
    construction_ = new ::pb_message::production_cost_t(*from.construction_);
  } else {
    construction_ = nullptr;
  }
  if (from._internal_has_towable()) {
    towable_ = new ::pb_message::towable_t(*from.towable_);
  } else {
    towable_ = nullptr;
  }
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&salvage_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(salvage_));
  // @@protoc_insertion_point(copy_constructor:pb_message.unit_def_t)
}

void unit_def_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_unit_def_t_start_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uncrippled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&salvage_) -
      reinterpret_cast<char*>(&uncrippled_)) + sizeof(salvage_));
}

unit_def_t::~unit_def_t() {
  // @@protoc_insertion_point(destructor:pb_message.unit_def_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void unit_def_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uncrippled_;
  if (this != internal_default_instance()) delete crippled_;
  if (this != internal_default_instance()) delete available_;
  if (this != internal_default_instance()) delete construction_;
  if (this != internal_default_instance()) delete towable_;
}

void unit_def_t::ArenaDtor(void* object) {
  unit_def_t* _this = reinterpret_cast< unit_def_t* >(object);
  (void)_this;
}
void unit_def_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void unit_def_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const unit_def_t& unit_def_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_unit_def_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void unit_def_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.unit_def_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substitutions_.Clear();
  conversions_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && uncrippled_ != nullptr) {
    delete uncrippled_;
  }
  uncrippled_ = nullptr;
  if (GetArena() == nullptr && crippled_ != nullptr) {
    delete crippled_;
  }
  crippled_ = nullptr;
  if (GetArena() == nullptr && available_ != nullptr) {
    delete available_;
  }
  available_ = nullptr;
  if (GetArena() == nullptr && construction_ != nullptr) {
    delete construction_;
  }
  construction_ = nullptr;
  if (GetArena() == nullptr && towable_ != nullptr) {
    delete towable_;
  }
  towable_ = nullptr;
  ::memset(&cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&salvage_) -
      reinterpret_cast<char*>(&cmd_)) + sizeof(salvage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unit_def_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.unit_def_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.unit_def_side_t uncrippled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncrippled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.unit_def_side_t crippled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_crippled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.escort_type_t escort_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_escort_type(static_cast<::pb_message::escort_type_t>(val));
        } else goto handle_unusual;
        continue;
      // .pb_message.turn_t available = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_available(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pod = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_in_service = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_in_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.production_cost_t construction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_construction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .pb_message.production_cost_t> substitutions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&substitutions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .pb_message.production_cost_t> conversions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&conversions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 move = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.carrier_type_t carrier_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_carrier_type(static_cast<::pb_message::carrier_type_t>(val));
        } else goto handle_unusual;
        continue;
      // bool not_spaceworthy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          not_spaceworthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.towable_t towable = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_towable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 salvage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          salvage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.unit_def_t.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* unit_def_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.unit_def_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.unit_def_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 cmd = 2;
  if (this->cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cmd(), target);
  }

  // .pb_message.unit_def_side_t uncrippled = 3;
  if (this->has_uncrippled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::uncrippled(this), target, stream);
  }

  // .pb_message.unit_def_side_t crippled = 4;
  if (this->has_crippled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::crippled(this), target, stream);
  }

  // .pb_message.escort_type_t escort_type = 5;
  if (this->escort_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_escort_type(), target);
  }

  // .pb_message.turn_t available = 6;
  if (this->has_available()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::available(this), target, stream);
  }

  // bool pod = 7;
  if (this->pod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_pod(), target);
  }

  // int32 max_in_service = 8;
  if (this->max_in_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_in_service(), target);
  }

  // .pb_message.production_cost_t construction = 9;
  if (this->has_construction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::construction(this), target, stream);
  }

  // map<string, .pb_message.production_cost_t> substitutions = 10;
  if (!this->_internal_substitutions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.unit_def_t.SubstitutionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_substitutions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_substitutions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_iterator
          it = this->_internal_substitutions().begin();
          it != this->_internal_substitutions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = unit_def_t_SubstitutionsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_iterator
          it = this->_internal_substitutions().begin();
          it != this->_internal_substitutions().end(); ++it) {
        target = unit_def_t_SubstitutionsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .pb_message.production_cost_t> conversions = 11;
  if (!this->_internal_conversions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.unit_def_t.ConversionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_conversions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_conversions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_iterator
          it = this->_internal_conversions().begin();
          it != this->_internal_conversions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = unit_def_t_ConversionsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_iterator
          it = this->_internal_conversions().begin();
          it != this->_internal_conversions().end(); ++it) {
        target = unit_def_t_ConversionsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 move = 12;
  if (this->move() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_move(), target);
  }

  // .pb_message.carrier_type_t carrier_type = 13;
  if (this->carrier_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_carrier_type(), target);
  }

  // bool not_spaceworthy = 14;
  if (this->not_spaceworthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_not_spaceworthy(), target);
  }

  // .pb_message.towable_t towable = 15;
  if (this->has_towable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::towable(this), target, stream);
  }

  // int32 salvage = 16;
  if (this->salvage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_salvage(), target);
  }

  // string notes = 17;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.unit_def_t.notes");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.unit_def_t)
  return target;
}

size_t unit_def_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.unit_def_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pb_message.production_cost_t> substitutions = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_substitutions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_iterator
      it = this->_internal_substitutions().begin();
      it != this->_internal_substitutions().end(); ++it) {
    total_size += unit_def_t_SubstitutionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .pb_message.production_cost_t> conversions = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_conversions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::production_cost_t >::const_iterator
      it = this->_internal_conversions().begin();
      it != this->_internal_conversions().end(); ++it) {
    total_size += unit_def_t_ConversionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string notes = 17;
  if (this->notes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .pb_message.unit_def_side_t uncrippled = 3;
  if (this->has_uncrippled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uncrippled_);
  }

  // .pb_message.unit_def_side_t crippled = 4;
  if (this->has_crippled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crippled_);
  }

  // .pb_message.turn_t available = 6;
  if (this->has_available()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *available_);
  }

  // .pb_message.production_cost_t construction = 9;
  if (this->has_construction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *construction_);
  }

  // .pb_message.towable_t towable = 15;
  if (this->has_towable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *towable_);
  }

  // int32 cmd = 2;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cmd());
  }

  // .pb_message.escort_type_t escort_type = 5;
  if (this->escort_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_escort_type());
  }

  // int32 max_in_service = 8;
  if (this->max_in_service() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_in_service());
  }

  // bool pod = 7;
  if (this->pod() != 0) {
    total_size += 1 + 1;
  }

  // bool not_spaceworthy = 14;
  if (this->not_spaceworthy() != 0) {
    total_size += 1 + 1;
  }

  // int32 move = 12;
  if (this->move() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_move());
  }

  // .pb_message.carrier_type_t carrier_type = 13;
  if (this->carrier_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_carrier_type());
  }

  // int32 salvage = 16;
  if (this->salvage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_salvage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void unit_def_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.unit_def_t)
  GOOGLE_DCHECK_NE(&from, this);
  const unit_def_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<unit_def_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.unit_def_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.unit_def_t)
    MergeFrom(*source);
  }
}

void unit_def_t::MergeFrom(const unit_def_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.unit_def_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substitutions_.MergeFrom(from.substitutions_);
  conversions_.MergeFrom(from.conversions_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
  if (from.has_uncrippled()) {
    _internal_mutable_uncrippled()->::pb_message::unit_def_side_t::MergeFrom(from._internal_uncrippled());
  }
  if (from.has_crippled()) {
    _internal_mutable_crippled()->::pb_message::unit_def_side_t::MergeFrom(from._internal_crippled());
  }
  if (from.has_available()) {
    _internal_mutable_available()->::pb_message::turn_t::MergeFrom(from._internal_available());
  }
  if (from.has_construction()) {
    _internal_mutable_construction()->::pb_message::production_cost_t::MergeFrom(from._internal_construction());
  }
  if (from.has_towable()) {
    _internal_mutable_towable()->::pb_message::towable_t::MergeFrom(from._internal_towable());
  }
  if (from.cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (from.escort_type() != 0) {
    _internal_set_escort_type(from._internal_escort_type());
  }
  if (from.max_in_service() != 0) {
    _internal_set_max_in_service(from._internal_max_in_service());
  }
  if (from.pod() != 0) {
    _internal_set_pod(from._internal_pod());
  }
  if (from.not_spaceworthy() != 0) {
    _internal_set_not_spaceworthy(from._internal_not_spaceworthy());
  }
  if (from.move() != 0) {
    _internal_set_move(from._internal_move());
  }
  if (from.carrier_type() != 0) {
    _internal_set_carrier_type(from._internal_carrier_type());
  }
  if (from.salvage() != 0) {
    _internal_set_salvage(from._internal_salvage());
  }
}

void unit_def_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.unit_def_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_def_t::CopyFrom(const unit_def_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.unit_def_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_def_t::IsInitialized() const {
  return true;
}

void unit_def_t::InternalSwap(unit_def_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substitutions_.Swap(&other->substitutions_);
  conversions_.Swap(&other->conversions_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(unit_def_t, salvage_)
      + sizeof(unit_def_t::salvage_)
      - PROTOBUF_FIELD_OFFSET(unit_def_t, uncrippled_)>(
          reinterpret_cast<char*>(&uncrippled_),
          reinterpret_cast<char*>(&other->uncrippled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata unit_def_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void nation_unit_defs_t::InitAsDefaultInstance() {
}
class nation_unit_defs_t::_Internal {
 public:
};

nation_unit_defs_t::nation_unit_defs_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.nation_unit_defs_t)
}
nation_unit_defs_t::nation_unit_defs_t(const nation_unit_defs_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_message.nation_unit_defs_t)
}

void nation_unit_defs_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nation_unit_defs_t_start_5fdata_2eproto.base);
}

nation_unit_defs_t::~nation_unit_defs_t() {
  // @@protoc_insertion_point(destructor:pb_message.nation_unit_defs_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void nation_unit_defs_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void nation_unit_defs_t::ArenaDtor(void* object) {
  nation_unit_defs_t* _this = reinterpret_cast< nation_unit_defs_t* >(object);
  (void)_this;
}
void nation_unit_defs_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void nation_unit_defs_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nation_unit_defs_t& nation_unit_defs_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nation_unit_defs_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void nation_unit_defs_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.nation_unit_defs_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* nation_unit_defs_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_message.unit_def_t units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* nation_unit_defs_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.nation_unit_defs_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_message.unit_def_t units = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_units_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_units(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.nation_unit_defs_t)
  return target;
}

size_t nation_unit_defs_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.nation_unit_defs_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.unit_def_t units = 1;
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nation_unit_defs_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.nation_unit_defs_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nation_unit_defs_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nation_unit_defs_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.nation_unit_defs_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.nation_unit_defs_t)
    MergeFrom(*source);
  }
}

void nation_unit_defs_t::MergeFrom(const nation_unit_defs_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.nation_unit_defs_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
}

void nation_unit_defs_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.nation_unit_defs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nation_unit_defs_t::CopyFrom(const nation_unit_defs_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.nation_unit_defs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nation_unit_defs_t::IsInitialized() const {
  return true;
}

void nation_unit_defs_t::InternalSwap(nation_unit_defs_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.InternalSwap(&other->units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata nation_unit_defs_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

unit_defs_t_NationUnitsEntry_DoNotUse::unit_defs_t_NationUnitsEntry_DoNotUse() {}
unit_defs_t_NationUnitsEntry_DoNotUse::unit_defs_t_NationUnitsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void unit_defs_t_NationUnitsEntry_DoNotUse::MergeFrom(const unit_defs_t_NationUnitsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata unit_defs_t_NationUnitsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void unit_defs_t_NationUnitsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void unit_defs_t::InitAsDefaultInstance() {
}
class unit_defs_t::_Internal {
 public:
};

unit_defs_t::unit_defs_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nation_units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.unit_defs_t)
}
unit_defs_t::unit_defs_t(const unit_defs_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nation_units_.MergeFrom(from.nation_units_);
  // @@protoc_insertion_point(copy_constructor:pb_message.unit_defs_t)
}

void unit_defs_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_unit_defs_t_start_5fdata_2eproto.base);
}

unit_defs_t::~unit_defs_t() {
  // @@protoc_insertion_point(destructor:pb_message.unit_defs_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void unit_defs_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void unit_defs_t::ArenaDtor(void* object) {
  unit_defs_t* _this = reinterpret_cast< unit_defs_t* >(object);
  (void)_this;
}
void unit_defs_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void unit_defs_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const unit_defs_t& unit_defs_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_unit_defs_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void unit_defs_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.unit_defs_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nation_units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unit_defs_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nation_units_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* unit_defs_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.unit_defs_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
  if (!this->_internal_nation_units().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.unit_defs_t.NationUnitsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nation_units().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nation_units().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >::const_iterator
          it = this->_internal_nation_units().begin();
          it != this->_internal_nation_units().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = unit_defs_t_NationUnitsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >::const_iterator
          it = this->_internal_nation_units().begin();
          it != this->_internal_nation_units().end(); ++it) {
        target = unit_defs_t_NationUnitsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.unit_defs_t)
  return target;
}

size_t unit_defs_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.unit_defs_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pb_message.nation_unit_defs_t> nation_units = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nation_units_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::nation_unit_defs_t >::const_iterator
      it = this->_internal_nation_units().begin();
      it != this->_internal_nation_units().end(); ++it) {
    total_size += unit_defs_t_NationUnitsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void unit_defs_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.unit_defs_t)
  GOOGLE_DCHECK_NE(&from, this);
  const unit_defs_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<unit_defs_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.unit_defs_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.unit_defs_t)
    MergeFrom(*source);
  }
}

void unit_defs_t::MergeFrom(const unit_defs_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.unit_defs_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nation_units_.MergeFrom(from.nation_units_);
}

void unit_defs_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.unit_defs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_defs_t::CopyFrom(const unit_defs_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.unit_defs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_defs_t::IsInitialized() const {
  return true;
}

void unit_defs_t::InternalSwap(unit_defs_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nation_units_.Swap(&other->nation_units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata unit_defs_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void team_t::InitAsDefaultInstance() {
}
class team_t::_Internal {
 public:
};

team_t::team_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.team_t)
}
team_t::team_t(const team_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nations_(from.nations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.team_t)
}

void team_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_team_t_start_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

team_t::~team_t() {
  // @@protoc_insertion_point(destructor:pb_message.team_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void team_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void team_t::ArenaDtor(void* object) {
  team_t* _this = reinterpret_cast< team_t* >(object);
  (void)_this;
}
void team_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void team_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const team_t& team_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_team_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void team_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.team_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nations_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* team_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.team_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string nations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.team_t.nations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* team_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.team_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.team_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string nations = 2;
  for (int i = 0, n = this->_internal_nations_size(); i < n; i++) {
    const auto& s = this->_internal_nations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.team_t.nations");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.team_t)
  return target;
}

size_t team_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.team_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nations_.size());
  for (int i = 0, n = nations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nations_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void team_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.team_t)
  GOOGLE_DCHECK_NE(&from, this);
  const team_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<team_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.team_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.team_t)
    MergeFrom(*source);
  }
}

void team_t::MergeFrom(const team_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.team_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nations_.MergeFrom(from.nations_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void team_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.team_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_t::CopyFrom(const team_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.team_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_t::IsInitialized() const {
  return true;
}

void team_t::InternalSwap(team_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nations_.InternalSwap(&other->nations_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata team_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scenario_condition_t_object_t::InitAsDefaultInstance() {
}
class scenario_condition_t_object_t::_Internal {
 public:
};

scenario_condition_t_object_t::scenario_condition_t_object_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena),
  hexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.scenario_condition_t.object_t)
}
scenario_condition_t_object_t::scenario_condition_t_object_t(const scenario_condition_t_object_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_),
      hexes_(from.hexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_condition_t.object_t)
}

void scenario_condition_t_object_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scenario_condition_t_object_t_start_5fdata_2eproto.base);
  type_ = 0;
}

scenario_condition_t_object_t::~scenario_condition_t_object_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_condition_t.object_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scenario_condition_t_object_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scenario_condition_t_object_t::ArenaDtor(void* object) {
  scenario_condition_t_object_t* _this = reinterpret_cast< scenario_condition_t_object_t* >(object);
  (void)_this;
}
void scenario_condition_t_object_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scenario_condition_t_object_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scenario_condition_t_object_t& scenario_condition_t_object_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scenario_condition_t_object_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void scenario_condition_t_object_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.scenario_condition_t.object_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  hexes_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scenario_condition_t_object_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_message.scenario_condition_t.object_type_t type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb_message::scenario_condition_t_object_type_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_condition_t.object_t.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 hexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_hexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scenario_condition_t_object_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_condition_t.object_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_message.scenario_condition_t.object_type_t type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_condition_t.object_t.names");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 hexes = 3;
  {
    int byte_size = _hexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_hexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_condition_t.object_t)
  return target;
}

size_t scenario_condition_t_object_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.scenario_condition_t.object_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated int32 hexes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pb_message.scenario_condition_t.object_type_t type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scenario_condition_t_object_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.scenario_condition_t.object_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scenario_condition_t_object_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scenario_condition_t_object_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.scenario_condition_t.object_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.scenario_condition_t.object_t)
    MergeFrom(*source);
  }
}

void scenario_condition_t_object_t::MergeFrom(const scenario_condition_t_object_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.scenario_condition_t.object_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  hexes_.MergeFrom(from.hexes_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void scenario_condition_t_object_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.scenario_condition_t.object_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_condition_t_object_t::CopyFrom(const scenario_condition_t_object_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.scenario_condition_t.object_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_condition_t_object_t::IsInitialized() const {
  return true;
}

void scenario_condition_t_object_t::InternalSwap(scenario_condition_t_object_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  hexes_.InternalSwap(&other->hexes_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata scenario_condition_t_object_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scenario_condition_t::InitAsDefaultInstance() {
}
class scenario_condition_t::_Internal {
 public:
};

scenario_condition_t::scenario_condition_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actors_(arena),
  one_of_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.scenario_condition_t)
}
scenario_condition_t::scenario_condition_t(const scenario_condition_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actors_(from.actors_),
      one_of_(from.one_of_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_condition_t)
}

void scenario_condition_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scenario_condition_t_start_5fdata_2eproto.base);
  action_ = 0;
}

scenario_condition_t::~scenario_condition_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_condition_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scenario_condition_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scenario_condition_t::ArenaDtor(void* object) {
  scenario_condition_t* _this = reinterpret_cast< scenario_condition_t* >(object);
  (void)_this;
}
void scenario_condition_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scenario_condition_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scenario_condition_t& scenario_condition_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scenario_condition_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void scenario_condition_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.scenario_condition_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actors_.Clear();
  one_of_.Clear();
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scenario_condition_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string actors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_actors();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_condition_t.actors"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb_message.scenario_condition_t.action_t action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::pb_message::scenario_condition_t_action_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_one_of(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scenario_condition_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_condition_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string actors = 1;
  for (int i = 0, n = this->_internal_actors_size(); i < n; i++) {
    const auto& s = this->_internal_actors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_condition_t.actors");
    target = stream->WriteString(1, s, target);
  }

  // .pb_message.scenario_condition_t.action_t action = 2;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_one_of_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_one_of(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_condition_t)
  return target;
}

size_t scenario_condition_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.scenario_condition_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string actors = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(actors_.size());
  for (int i = 0, n = actors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      actors_.Get(i));
  }

  // repeated .pb_message.scenario_condition_t.object_t one_of = 3;
  total_size += 1UL * this->_internal_one_of_size();
  for (const auto& msg : this->one_of_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb_message.scenario_condition_t.action_t action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scenario_condition_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.scenario_condition_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scenario_condition_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scenario_condition_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.scenario_condition_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.scenario_condition_t)
    MergeFrom(*source);
  }
}

void scenario_condition_t::MergeFrom(const scenario_condition_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.scenario_condition_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actors_.MergeFrom(from.actors_);
  one_of_.MergeFrom(from.one_of_);
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void scenario_condition_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.scenario_condition_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_condition_t::CopyFrom(const scenario_condition_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.scenario_condition_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_condition_t::IsInitialized() const {
  return true;
}

void scenario_condition_t::InternalSwap(scenario_condition_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actors_.InternalSwap(&other->actors_);
  one_of_.InternalSwap(&other->one_of_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata scenario_condition_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fleet_release_condition_t::InitAsDefaultInstance() {
  ::pb_message::_fleet_release_condition_t_default_instance_._instance.get_mutable()->condition_ = const_cast< ::pb_message::scenario_condition_t*>(
      ::pb_message::scenario_condition_t::internal_default_instance());
}
class fleet_release_condition_t::_Internal {
 public:
  static const ::pb_message::scenario_condition_t& condition(const fleet_release_condition_t* msg);
};

const ::pb_message::scenario_condition_t&
fleet_release_condition_t::_Internal::condition(const fleet_release_condition_t* msg) {
  return *msg->condition_;
}
fleet_release_condition_t::fleet_release_condition_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.fleet_release_condition_t)
}
fleet_release_condition_t::fleet_release_condition_t(const fleet_release_condition_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fleet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fleet().empty()) {
    fleet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fleet(),
      GetArena());
  }
  if (from._internal_has_condition()) {
    condition_ = new ::pb_message::scenario_condition_t(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.fleet_release_condition_t)
}

void fleet_release_condition_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fleet_release_condition_t_start_5fdata_2eproto.base);
  fleet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  condition_ = nullptr;
}

fleet_release_condition_t::~fleet_release_condition_t() {
  // @@protoc_insertion_point(destructor:pb_message.fleet_release_condition_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fleet_release_condition_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fleet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete condition_;
}

void fleet_release_condition_t::ArenaDtor(void* object) {
  fleet_release_condition_t* _this = reinterpret_cast< fleet_release_condition_t* >(object);
  (void)_this;
}
void fleet_release_condition_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fleet_release_condition_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fleet_release_condition_t& fleet_release_condition_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fleet_release_condition_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void fleet_release_condition_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.fleet_release_condition_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fleet_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fleet_release_condition_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fleet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fleet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.fleet_release_condition_t.fleet"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.scenario_condition_t condition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fleet_release_condition_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.fleet_release_condition_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fleet = 1;
  if (this->fleet().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fleet().data(), static_cast<int>(this->_internal_fleet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.fleet_release_condition_t.fleet");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fleet(), target);
  }

  // .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.fleet_release_condition_t)
  return target;
}

size_t fleet_release_condition_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.fleet_release_condition_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fleet = 1;
  if (this->fleet().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fleet());
  }

  // .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fleet_release_condition_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.fleet_release_condition_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fleet_release_condition_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fleet_release_condition_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.fleet_release_condition_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.fleet_release_condition_t)
    MergeFrom(*source);
  }
}

void fleet_release_condition_t::MergeFrom(const fleet_release_condition_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.fleet_release_condition_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fleet().size() > 0) {
    _internal_set_fleet(from._internal_fleet());
  }
  if (from.has_condition()) {
    _internal_mutable_condition()->::pb_message::scenario_condition_t::MergeFrom(from._internal_condition());
  }
}

void fleet_release_condition_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.fleet_release_condition_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fleet_release_condition_t::CopyFrom(const fleet_release_condition_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.fleet_release_condition_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fleet_release_condition_t::IsInitialized() const {
  return true;
}

void fleet_release_condition_t::InternalSwap(fleet_release_condition_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fleet_.Swap(&other->fleet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(condition_, other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fleet_release_condition_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void war_entry_condition_t::InitAsDefaultInstance() {
  ::pb_message::_war_entry_condition_t_default_instance_._instance.get_mutable()->condition_ = const_cast< ::pb_message::scenario_condition_t*>(
      ::pb_message::scenario_condition_t::internal_default_instance());
}
class war_entry_condition_t::_Internal {
 public:
  static const ::pb_message::scenario_condition_t& condition(const war_entry_condition_t* msg);
};

const ::pb_message::scenario_condition_t&
war_entry_condition_t::_Internal::condition(const war_entry_condition_t* msg) {
  return *msg->condition_;
}
war_entry_condition_t::war_entry_condition_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.war_entry_condition_t)
}
war_entry_condition_t::war_entry_condition_t(const war_entry_condition_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::pb_message::scenario_condition_t(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  economy_ = from.economy_;
  // @@protoc_insertion_point(copy_constructor:pb_message.war_entry_condition_t)
}

void war_entry_condition_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_war_entry_condition_t_start_5fdata_2eproto.base);
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&economy_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(economy_));
}

war_entry_condition_t::~war_entry_condition_t() {
  // @@protoc_insertion_point(destructor:pb_message.war_entry_condition_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void war_entry_condition_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete condition_;
}

void war_entry_condition_t::ArenaDtor(void* object) {
  war_entry_condition_t* _this = reinterpret_cast< war_entry_condition_t* >(object);
  (void)_this;
}
void war_entry_condition_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void war_entry_condition_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const war_entry_condition_t& war_entry_condition_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_war_entry_condition_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void war_entry_condition_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.war_entry_condition_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  economy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* war_entry_condition_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_message.scenario_condition_t condition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.war_footing_t economy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_economy(static_cast<::pb_message::war_footing_t>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* war_entry_condition_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.war_entry_condition_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::condition(this), target, stream);
  }

  // .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_economy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.war_entry_condition_t)
  return target;
}

size_t war_entry_condition_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.war_entry_condition_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_message.scenario_condition_t condition = 2;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_economy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void war_entry_condition_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.war_entry_condition_t)
  GOOGLE_DCHECK_NE(&from, this);
  const war_entry_condition_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<war_entry_condition_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.war_entry_condition_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.war_entry_condition_t)
    MergeFrom(*source);
  }
}

void war_entry_condition_t::MergeFrom(const war_entry_condition_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.war_entry_condition_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    _internal_mutable_condition()->::pb_message::scenario_condition_t::MergeFrom(from._internal_condition());
  }
  if (from.economy() != 0) {
    _internal_set_economy(from._internal_economy());
  }
}

void war_entry_condition_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.war_entry_condition_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void war_entry_condition_t::CopyFrom(const war_entry_condition_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.war_entry_condition_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool war_entry_condition_t::IsInitialized() const {
  return true;
}

void war_entry_condition_t::InternalSwap(war_entry_condition_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(war_entry_condition_t, economy_)
      + sizeof(war_entry_condition_t::economy_)
      - PROTOBUF_FIELD_OFFSET(war_entry_condition_t, condition_)>(
          reinterpret_cast<char*>(&condition_),
          reinterpret_cast<char*>(&other->condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata war_entry_condition_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scenario_turn_t_national_action_t_action_t::InitAsDefaultInstance() {
}
class scenario_turn_t_national_action_t_action_t::_Internal {
 public:
};

scenario_turn_t_national_action_t_action_t::scenario_turn_t_national_action_t_action_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.scenario_turn_t.national_action_t.action_t)
}
scenario_turn_t_national_action_t_action_t::scenario_turn_t_national_action_t_action_t(const scenario_turn_t_national_action_t_action_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_turn_t.national_action_t.action_t)
}

void scenario_turn_t_national_action_t_action_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto.base);
  type_ = 0;
}

scenario_turn_t_national_action_t_action_t::~scenario_turn_t_national_action_t_action_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_turn_t.national_action_t.action_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scenario_turn_t_national_action_t_action_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scenario_turn_t_national_action_t_action_t::ArenaDtor(void* object) {
  scenario_turn_t_national_action_t_action_t* _this = reinterpret_cast< scenario_turn_t_national_action_t_action_t* >(object);
  (void)_this;
}
void scenario_turn_t_national_action_t_action_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scenario_turn_t_national_action_t_action_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scenario_turn_t_national_action_t_action_t& scenario_turn_t_national_action_t_action_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scenario_turn_t_national_action_t_action_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void scenario_turn_t_national_action_t_action_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.scenario_turn_t.national_action_t.action_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scenario_turn_t_national_action_t_action_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb_message::scenario_turn_t_national_action_t_action_type_t>(val));
        } else goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_turn_t.national_action_t.action_t.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scenario_turn_t_national_action_t_action_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_turn_t.national_action_t.action_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_turn_t.national_action_t.action_t.names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_turn_t.national_action_t.action_t)
  return target;
}

size_t scenario_turn_t_national_action_t_action_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.scenario_turn_t.national_action_t.action_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .pb_message.scenario_turn_t.national_action_t.action_type_t type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scenario_turn_t_national_action_t_action_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.scenario_turn_t.national_action_t.action_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scenario_turn_t_national_action_t_action_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scenario_turn_t_national_action_t_action_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.scenario_turn_t.national_action_t.action_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.scenario_turn_t.national_action_t.action_t)
    MergeFrom(*source);
  }
}

void scenario_turn_t_national_action_t_action_t::MergeFrom(const scenario_turn_t_national_action_t_action_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.scenario_turn_t.national_action_t.action_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void scenario_turn_t_national_action_t_action_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.scenario_turn_t.national_action_t.action_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_turn_t_national_action_t_action_t::CopyFrom(const scenario_turn_t_national_action_t_action_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.scenario_turn_t.national_action_t.action_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_turn_t_national_action_t_action_t::IsInitialized() const {
  return true;
}

void scenario_turn_t_national_action_t_action_t::InternalSwap(scenario_turn_t_national_action_t_action_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata scenario_turn_t_national_action_t_action_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scenario_turn_t_national_action_t::InitAsDefaultInstance() {
}
class scenario_turn_t_national_action_t::_Internal {
 public:
};

scenario_turn_t_national_action_t::scenario_turn_t_national_action_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.scenario_turn_t.national_action_t)
}
scenario_turn_t_national_action_t::scenario_turn_t_national_action_t(const scenario_turn_t_national_action_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_turn_t.national_action_t)
}

void scenario_turn_t_national_action_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto.base);
}

scenario_turn_t_national_action_t::~scenario_turn_t_national_action_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_turn_t.national_action_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scenario_turn_t_national_action_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scenario_turn_t_national_action_t::ArenaDtor(void* object) {
  scenario_turn_t_national_action_t* _this = reinterpret_cast< scenario_turn_t_national_action_t* >(object);
  (void)_this;
}
void scenario_turn_t_national_action_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scenario_turn_t_national_action_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scenario_turn_t_national_action_t& scenario_turn_t_national_action_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scenario_turn_t_national_action_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void scenario_turn_t_national_action_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.scenario_turn_t.national_action_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scenario_turn_t_national_action_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scenario_turn_t_national_action_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_turn_t.national_action_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_turn_t.national_action_t)
  return target;
}

size_t scenario_turn_t_national_action_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.scenario_turn_t.national_action_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.scenario_turn_t.national_action_t.action_t actions = 1;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scenario_turn_t_national_action_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.scenario_turn_t.national_action_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scenario_turn_t_national_action_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scenario_turn_t_national_action_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.scenario_turn_t.national_action_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.scenario_turn_t.national_action_t)
    MergeFrom(*source);
  }
}

void scenario_turn_t_national_action_t::MergeFrom(const scenario_turn_t_national_action_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.scenario_turn_t.national_action_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
}

void scenario_turn_t_national_action_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.scenario_turn_t.national_action_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_turn_t_national_action_t::CopyFrom(const scenario_turn_t_national_action_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.scenario_turn_t.national_action_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_turn_t_national_action_t::IsInitialized() const {
  return true;
}

void scenario_turn_t_national_action_t::InternalSwap(scenario_turn_t_national_action_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata scenario_turn_t_national_action_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

scenario_turn_t_NationalActionsEntry_DoNotUse::scenario_turn_t_NationalActionsEntry_DoNotUse() {}
scenario_turn_t_NationalActionsEntry_DoNotUse::scenario_turn_t_NationalActionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void scenario_turn_t_NationalActionsEntry_DoNotUse::MergeFrom(const scenario_turn_t_NationalActionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata scenario_turn_t_NationalActionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void scenario_turn_t_NationalActionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void scenario_turn_t::InitAsDefaultInstance() {
}
class scenario_turn_t::_Internal {
 public:
};

scenario_turn_t::scenario_turn_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  national_actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.scenario_turn_t)
}
scenario_turn_t::scenario_turn_t(const scenario_turn_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  national_actions_.MergeFrom(from.national_actions_);
  turn_ = from.turn_;
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_turn_t)
}

void scenario_turn_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scenario_turn_t_start_5fdata_2eproto.base);
  turn_ = 0;
}

scenario_turn_t::~scenario_turn_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_turn_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scenario_turn_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scenario_turn_t::ArenaDtor(void* object) {
  scenario_turn_t* _this = reinterpret_cast< scenario_turn_t* >(object);
  (void)_this;
}
void scenario_turn_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scenario_turn_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scenario_turn_t& scenario_turn_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scenario_turn_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void scenario_turn_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.scenario_turn_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  national_actions_.Clear();
  turn_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scenario_turn_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 turn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&national_actions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scenario_turn_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_turn_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 turn = 1;
  if (this->turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_turn(), target);
  }

  // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
  if (!this->_internal_national_actions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.scenario_turn_t.NationalActionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_national_actions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_national_actions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >::const_iterator
          it = this->_internal_national_actions().begin();
          it != this->_internal_national_actions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = scenario_turn_t_NationalActionsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >::const_iterator
          it = this->_internal_national_actions().begin();
          it != this->_internal_national_actions().end(); ++it) {
        target = scenario_turn_t_NationalActionsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_turn_t)
  return target;
}

size_t scenario_turn_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.scenario_turn_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .pb_message.scenario_turn_t.national_action_t> national_actions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_national_actions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_turn_t_national_action_t >::const_iterator
      it = this->_internal_national_actions().begin();
      it != this->_internal_national_actions().end(); ++it) {
    total_size += scenario_turn_t_NationalActionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 turn = 1;
  if (this->turn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scenario_turn_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.scenario_turn_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scenario_turn_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scenario_turn_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.scenario_turn_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.scenario_turn_t)
    MergeFrom(*source);
  }
}

void scenario_turn_t::MergeFrom(const scenario_turn_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.scenario_turn_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  national_actions_.MergeFrom(from.national_actions_);
  if (from.turn() != 0) {
    _internal_set_turn(from._internal_turn());
  }
}

void scenario_turn_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.scenario_turn_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_turn_t::CopyFrom(const scenario_turn_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.scenario_turn_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_turn_t::IsInitialized() const {
  return true;
}

void scenario_turn_t::InternalSwap(scenario_turn_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  national_actions_.Swap(&other->national_actions_);
  swap(turn_, other->turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata scenario_turn_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scenario_t_nation_t::InitAsDefaultInstance() {
}
class scenario_t_nation_t::_Internal {
 public:
};

scenario_t_nation_t::scenario_t_nation_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  at_war_with_(arena),
  future_belligerents_(arena),
  release_conditions_(arena),
  war_entry_conditions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.scenario_t.nation_t)
}
scenario_t_nation_t::scenario_t_nation_t(const scenario_t_nation_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      at_war_with_(from.at_war_with_),
      future_belligerents_(from.future_belligerents_),
      release_conditions_(from.release_conditions_),
      war_entry_conditions_(from.war_entry_conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&economy_, &from.economy_,
    static_cast<size_t>(reinterpret_cast<char*>(&accumulate_exhaustion_at_peace_) -
    reinterpret_cast<char*>(&economy_)) + sizeof(accumulate_exhaustion_at_peace_));
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_t.nation_t)
}

void scenario_t_nation_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scenario_t_nation_t_start_5fdata_2eproto.base);
  ::memset(&economy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accumulate_exhaustion_at_peace_) -
      reinterpret_cast<char*>(&economy_)) + sizeof(accumulate_exhaustion_at_peace_));
}

scenario_t_nation_t::~scenario_t_nation_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_t.nation_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scenario_t_nation_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scenario_t_nation_t::ArenaDtor(void* object) {
  scenario_t_nation_t* _this = reinterpret_cast< scenario_t_nation_t* >(object);
  (void)_this;
}
void scenario_t_nation_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scenario_t_nation_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scenario_t_nation_t& scenario_t_nation_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scenario_t_nation_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void scenario_t_nation_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.scenario_t.nation_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  at_war_with_.Clear();
  future_belligerents_.Clear();
  release_conditions_.Clear();
  war_entry_conditions_.Clear();
  ::memset(&economy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accumulate_exhaustion_at_peace_) -
      reinterpret_cast<char*>(&economy_)) + sizeof(accumulate_exhaustion_at_peace_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scenario_t_nation_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string at_war_with = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_at_war_with();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.nation_t.at_war_with"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string future_belligerents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_future_belligerents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.nation_t.future_belligerents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb_message.war_footing_t economy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_economy(static_cast<::pb_message::war_footing_t>(val));
        } else goto handle_unusual;
        continue;
      // int32 exhaustion_turns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exhaustion_turns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool accumulate_exhaustion_at_peace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          accumulate_exhaustion_at_peace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_release_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_war_entry_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scenario_t_nation_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_t.nation_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string at_war_with = 1;
  for (int i = 0, n = this->_internal_at_war_with_size(); i < n; i++) {
    const auto& s = this->_internal_at_war_with(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.nation_t.at_war_with");
    target = stream->WriteString(1, s, target);
  }

  // repeated string future_belligerents = 2;
  for (int i = 0, n = this->_internal_future_belligerents_size(); i < n; i++) {
    const auto& s = this->_internal_future_belligerents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.nation_t.future_belligerents");
    target = stream->WriteString(2, s, target);
  }

  // .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_economy(), target);
  }

  // int32 exhaustion_turns = 4;
  if (this->exhaustion_turns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_exhaustion_turns(), target);
  }

  // bool accumulate_exhaustion_at_peace = 5;
  if (this->accumulate_exhaustion_at_peace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_accumulate_exhaustion_at_peace(), target);
  }

  // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_release_conditions(i), target, stream);
  }

  // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_war_entry_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_war_entry_conditions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_t.nation_t)
  return target;
}

size_t scenario_t_nation_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.scenario_t.nation_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string at_war_with = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(at_war_with_.size());
  for (int i = 0, n = at_war_with_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      at_war_with_.Get(i));
  }

  // repeated string future_belligerents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(future_belligerents_.size());
  for (int i = 0, n = future_belligerents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      future_belligerents_.Get(i));
  }

  // repeated .pb_message.fleet_release_condition_t release_conditions = 6;
  total_size += 1UL * this->_internal_release_conditions_size();
  for (const auto& msg : this->release_conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb_message.war_entry_condition_t war_entry_conditions = 7;
  total_size += 1UL * this->_internal_war_entry_conditions_size();
  for (const auto& msg : this->war_entry_conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb_message.war_footing_t economy = 3;
  if (this->economy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_economy());
  }

  // int32 exhaustion_turns = 4;
  if (this->exhaustion_turns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exhaustion_turns());
  }

  // bool accumulate_exhaustion_at_peace = 5;
  if (this->accumulate_exhaustion_at_peace() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scenario_t_nation_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.scenario_t.nation_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scenario_t_nation_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scenario_t_nation_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.scenario_t.nation_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.scenario_t.nation_t)
    MergeFrom(*source);
  }
}

void scenario_t_nation_t::MergeFrom(const scenario_t_nation_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.scenario_t.nation_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  at_war_with_.MergeFrom(from.at_war_with_);
  future_belligerents_.MergeFrom(from.future_belligerents_);
  release_conditions_.MergeFrom(from.release_conditions_);
  war_entry_conditions_.MergeFrom(from.war_entry_conditions_);
  if (from.economy() != 0) {
    _internal_set_economy(from._internal_economy());
  }
  if (from.exhaustion_turns() != 0) {
    _internal_set_exhaustion_turns(from._internal_exhaustion_turns());
  }
  if (from.accumulate_exhaustion_at_peace() != 0) {
    _internal_set_accumulate_exhaustion_at_peace(from._internal_accumulate_exhaustion_at_peace());
  }
}

void scenario_t_nation_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.scenario_t.nation_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_t_nation_t::CopyFrom(const scenario_t_nation_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.scenario_t.nation_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_t_nation_t::IsInitialized() const {
  return true;
}

void scenario_t_nation_t::InternalSwap(scenario_t_nation_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  at_war_with_.InternalSwap(&other->at_war_with_);
  future_belligerents_.InternalSwap(&other->future_belligerents_);
  release_conditions_.InternalSwap(&other->release_conditions_);
  war_entry_conditions_.InternalSwap(&other->war_entry_conditions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(scenario_t_nation_t, accumulate_exhaustion_at_peace_)
      + sizeof(scenario_t_nation_t::accumulate_exhaustion_at_peace_)
      - PROTOBUF_FIELD_OFFSET(scenario_t_nation_t, economy_)>(
          reinterpret_cast<char*>(&economy_),
          reinterpret_cast<char*>(&other->economy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata scenario_t_nation_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

scenario_t_NationsEntry_DoNotUse::scenario_t_NationsEntry_DoNotUse() {}
scenario_t_NationsEntry_DoNotUse::scenario_t_NationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void scenario_t_NationsEntry_DoNotUse::MergeFrom(const scenario_t_NationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata scenario_t_NationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void scenario_t_NationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void scenario_t::InitAsDefaultInstance() {
  ::pb_message::_scenario_t_default_instance_._instance.get_mutable()->start_turn_ = const_cast< ::pb_message::turn_t*>(
      ::pb_message::turn_t::internal_default_instance());
}
class scenario_t::_Internal {
 public:
  static const ::pb_message::turn_t& start_turn(const scenario_t* msg);
};

const ::pb_message::turn_t&
scenario_t::_Internal::start_turn(const scenario_t* msg) {
  return *msg->start_turn_;
}
void scenario_t::clear_start_turn() {
  if (GetArena() == nullptr && start_turn_ != nullptr) {
    delete start_turn_;
  }
  start_turn_ = nullptr;
}
scenario_t::scenario_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  team_turn_order_(arena),
  setup_order_(arena),
  nations_(arena),
  turns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_message.scenario_t)
}
scenario_t::scenario_t(const scenario_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_),
      team_turn_order_(from.team_turn_order_),
      setup_order_(from.setup_order_),
      turns_(from.turns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nations_.MergeFrom(from.nations_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map().empty()) {
    map_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map(),
      GetArena());
  }
  order_of_battle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_of_battle().empty()) {
    order_of_battle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_order_of_battle(),
      GetArena());
  }
  if (from._internal_has_start_turn()) {
    start_turn_ = new ::pb_message::turn_t(*from.start_turn_);
  } else {
    start_turn_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb_message.scenario_t)
}

void scenario_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scenario_t_start_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_of_battle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_turn_ = nullptr;
}

scenario_t::~scenario_t() {
  // @@protoc_insertion_point(destructor:pb_message.scenario_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scenario_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_of_battle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_turn_;
}

void scenario_t::ArenaDtor(void* object) {
  scenario_t* _this = reinterpret_cast< scenario_t* >(object);
  (void)_this;
}
void scenario_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scenario_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scenario_t& scenario_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scenario_t_start_5fdata_2eproto.base);
  return *internal_default_instance();
}


void scenario_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_message.scenario_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  team_turn_order_.Clear();
  setup_order_.Clear();
  nations_.Clear();
  turns_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_of_battle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && start_turn_ != nullptr) {
    delete start_turn_;
  }
  start_turn_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scenario_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb_message.turn_t start_turn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_turn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.team_t teams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string team_turn_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_team_turn_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.team_turn_order"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.map"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string order_of_battle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_order_of_battle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.order_of_battle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string setup_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_setup_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb_message.scenario_t.setup_order"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .pb_message.scenario_t.nation_t> nations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb_message.scenario_turn_t turns = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_turns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scenario_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_message.scenario_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .pb_message.turn_t start_turn = 3;
  if (this->has_start_turn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_turn(this), target, stream);
  }

  // repeated .pb_message.team_t teams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_teams(i), target, stream);
  }

  // repeated string team_turn_order = 5;
  for (int i = 0, n = this->_internal_team_turn_order_size(); i < n; i++) {
    const auto& s = this->_internal_team_turn_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.team_turn_order");
    target = stream->WriteString(5, s, target);
  }

  // string map = 6;
  if (this->map().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.map");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_map(), target);
  }

  // string order_of_battle = 7;
  if (this->order_of_battle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_of_battle().data(), static_cast<int>(this->_internal_order_of_battle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.order_of_battle");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_order_of_battle(), target);
  }

  // repeated string setup_order = 8;
  for (int i = 0, n = this->_internal_setup_order_size(); i < n; i++) {
    const auto& s = this->_internal_setup_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb_message.scenario_t.setup_order");
    target = stream->WriteString(8, s, target);
  }

  // map<string, .pb_message.scenario_t.nation_t> nations = 9;
  if (!this->_internal_nations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pb_message.scenario_t.NationsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >::const_iterator
          it = this->_internal_nations().begin();
          it != this->_internal_nations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = scenario_t_NationsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >::const_iterator
          it = this->_internal_nations().begin();
          it != this->_internal_nations().end(); ++it) {
        target = scenario_t_NationsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .pb_message.scenario_turn_t turns = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_turns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_turns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_message.scenario_t)
  return target;
}

size_t scenario_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_message.scenario_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_message.team_t teams = 4;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string team_turn_order = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(team_turn_order_.size());
  for (int i = 0, n = team_turn_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      team_turn_order_.Get(i));
  }

  // repeated string setup_order = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(setup_order_.size());
  for (int i = 0, n = setup_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      setup_order_.Get(i));
  }

  // map<string, .pb_message.scenario_t.nation_t> nations = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pb_message::scenario_t_nation_t >::const_iterator
      it = this->_internal_nations().begin();
      it != this->_internal_nations().end(); ++it) {
    total_size += scenario_t_NationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .pb_message.scenario_turn_t turns = 10;
  total_size += 1UL * this->_internal_turns_size();
  for (const auto& msg : this->turns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string map = 6;
  if (this->map().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map());
  }

  // string order_of_battle = 7;
  if (this->order_of_battle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_of_battle());
  }

  // .pb_message.turn_t start_turn = 3;
  if (this->has_start_turn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_turn_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scenario_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb_message.scenario_t)
  GOOGLE_DCHECK_NE(&from, this);
  const scenario_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scenario_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb_message.scenario_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb_message.scenario_t)
    MergeFrom(*source);
  }
}

void scenario_t::MergeFrom(const scenario_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb_message.scenario_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  team_turn_order_.MergeFrom(from.team_turn_order_);
  setup_order_.MergeFrom(from.setup_order_);
  nations_.MergeFrom(from.nations_);
  turns_.MergeFrom(from.turns_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.map().size() > 0) {
    _internal_set_map(from._internal_map());
  }
  if (from.order_of_battle().size() > 0) {
    _internal_set_order_of_battle(from._internal_order_of_battle());
  }
  if (from.has_start_turn()) {
    _internal_mutable_start_turn()->::pb_message::turn_t::MergeFrom(from._internal_start_turn());
  }
}

void scenario_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb_message.scenario_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scenario_t::CopyFrom(const scenario_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_message.scenario_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scenario_t::IsInitialized() const {
  return true;
}

void scenario_t::InternalSwap(scenario_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
  team_turn_order_.InternalSwap(&other->team_turn_order_);
  setup_order_.InternalSwap(&other->setup_order_);
  nations_.Swap(&other->nations_);
  turns_.InternalSwap(&other->turns_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  order_of_battle_.Swap(&other->order_of_battle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(start_turn_, other->start_turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata scenario_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb_message::capital_hex_zone_t* Arena::CreateMaybeMessage< ::pb_message::capital_hex_zone_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::capital_hex_zone_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::capital_hex_t* Arena::CreateMaybeMessage< ::pb_message::capital_hex_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::capital_hex_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::capital_t* Arena::CreateMaybeMessage< ::pb_message::capital_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::capital_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::offmap_possesions_t* Arena::CreateMaybeMessage< ::pb_message::offmap_possesions_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::offmap_possesions_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::nation_t* Arena::CreateMaybeMessage< ::pb_message::nation_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::nation_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::nations_t_NationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::nations_t_NationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::nations_t_NationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::nations_t* Arena::CreateMaybeMessage< ::pb_message::nations_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::nations_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::hex_t* Arena::CreateMaybeMessage< ::pb_message::hex_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::hex_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::province_hex_t* Arena::CreateMaybeMessage< ::pb_message::province_hex_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::province_hex_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::province_t* Arena::CreateMaybeMessage< ::pb_message::province_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::province_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::offmap_area_t* Arena::CreateMaybeMessage< ::pb_message::offmap_area_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::offmap_area_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::starting_national_holdings_t* Arena::CreateMaybeMessage< ::pb_message::starting_national_holdings_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::starting_national_holdings_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::map_t_StartingNationalHoldingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::map_t* Arena::CreateMaybeMessage< ::pb_message::map_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::map_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::model_t* Arena::CreateMaybeMessage< ::pb_message::model_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::model_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::oob_unit_t* Arena::CreateMaybeMessage< ::pb_message::oob_unit_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::oob_unit_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::production_element_t* Arena::CreateMaybeMessage< ::pb_message::production_element_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::production_element_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::starting_fleet_t_HexPlacementLimitsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::starting_fleet_t* Arena::CreateMaybeMessage< ::pb_message::starting_fleet_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::starting_fleet_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::mothball_reserve_t* Arena::CreateMaybeMessage< ::pb_message::mothball_reserve_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::mothball_reserve_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::order_of_battle_t_StartingFleetsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::order_of_battle_t* Arena::CreateMaybeMessage< ::pb_message::order_of_battle_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::order_of_battle_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::orders_of_battle_t_OobsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::orders_of_battle_t_OobsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::orders_of_battle_t_OobsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::orders_of_battle_t* Arena::CreateMaybeMessage< ::pb_message::orders_of_battle_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::orders_of_battle_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::unit_def_side_t* Arena::CreateMaybeMessage< ::pb_message::unit_def_side_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::unit_def_side_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::towable_t* Arena::CreateMaybeMessage< ::pb_message::towable_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::towable_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::production_cost_t* Arena::CreateMaybeMessage< ::pb_message::production_cost_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::production_cost_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::unit_def_t_SubstitutionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::unit_def_t_ConversionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::unit_def_t_ConversionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::unit_def_t_ConversionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::unit_def_t* Arena::CreateMaybeMessage< ::pb_message::unit_def_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::unit_def_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::nation_unit_defs_t* Arena::CreateMaybeMessage< ::pb_message::nation_unit_defs_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::nation_unit_defs_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::unit_defs_t_NationUnitsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::unit_defs_t* Arena::CreateMaybeMessage< ::pb_message::unit_defs_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::unit_defs_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::team_t* Arena::CreateMaybeMessage< ::pb_message::team_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::team_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_condition_t_object_t* Arena::CreateMaybeMessage< ::pb_message::scenario_condition_t_object_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_condition_t_object_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_condition_t* Arena::CreateMaybeMessage< ::pb_message::scenario_condition_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_condition_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::fleet_release_condition_t* Arena::CreateMaybeMessage< ::pb_message::fleet_release_condition_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::fleet_release_condition_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::war_entry_condition_t* Arena::CreateMaybeMessage< ::pb_message::war_entry_condition_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::war_entry_condition_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_turn_t_national_action_t_action_t* Arena::CreateMaybeMessage< ::pb_message::scenario_turn_t_national_action_t_action_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_turn_t_national_action_t_action_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_turn_t_national_action_t* Arena::CreateMaybeMessage< ::pb_message::scenario_turn_t_national_action_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_turn_t_national_action_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_turn_t_NationalActionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_turn_t* Arena::CreateMaybeMessage< ::pb_message::scenario_turn_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_turn_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_t_nation_t* Arena::CreateMaybeMessage< ::pb_message::scenario_t_nation_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_t_nation_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_t_NationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pb_message::scenario_t_NationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_t_NationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pb_message::scenario_t* Arena::CreateMaybeMessage< ::pb_message::scenario_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb_message::scenario_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
